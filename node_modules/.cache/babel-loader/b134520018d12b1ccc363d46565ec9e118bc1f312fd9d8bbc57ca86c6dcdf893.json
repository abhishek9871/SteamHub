{"ast":null,"code":"// 2Embed API service (fallback provider)\n// Public embed mirrors are volatile; this list reflects commonly active domains as of 2025.\n\nconst TWOEMBED_DOMAINS = {\n  primary: 'https://2embed.to',\n  fallbacks: ['https://2embed.cc', 'https://2embed.org', 'https://2embed.ru']\n};\nexport const twoEmbedApi = {\n  getAllDomains: () => [TWOEMBED_DOMAINS.primary, ...TWOEMBED_DOMAINS.fallbacks],\n  // Movie via TMDB ID\n  getMovieStreamFromDomain: (domain, tmdbId, options = {}) => {\n    const {\n      autoplay = true,\n      muted = true\n    } = options; // kept for symmetry, not appended\n    // Prefer TMDB-prefixed pattern for better compatibility\n    let url = `${domain}/v.php?id=${encodeURIComponent(`tmdb-${tmdbId}`)}`;\n    // Do not append additional params for 2Embed; some mirrors error out with extra query params\n\n    return {\n      url,\n      type: 'movie',\n      provider: '2embed',\n      embeddable: true\n    };\n  },\n  // Movie via IMDb ID\n  getMovieStreamByImdbFromDomain: (domain, imdbId, options = {}) => {\n    const {\n      autoplay = true,\n      muted = true\n    } = options; // kept for symmetry, not appended\n    // Common pattern: v.php?imdb=<IMDB_ID>\n    let url = `${domain}/v.php?imdb=${encodeURIComponent(imdbId)}`;\n    const params = new URLSearchParams();\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    const qs = params.toString();\n    if (qs) url += `&${qs}`;\n    return {\n      url,\n      type: 'movie',\n      provider: '2embed',\n      embeddable: true\n    };\n  },\n  // TV via TMDB ID + season/episode\n  getTVStreamFromDomain: (domain, tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      autoplay = true,\n      muted = true\n    } = options; // kept for symmetry, not appended\n    // Prefer TMDB-prefixed pattern for better compatibility\n    let url = `${domain}/v.php?id=${encodeURIComponent(`tmdb-${tmdbId}`)}&s=${encodeURIComponent(season)}&e=${encodeURIComponent(episode)}`;\n    const params = new URLSearchParams();\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    const qs = params.toString();\n    if (qs) url += `&${qs}`;\n    return {\n      url,\n      type: 'tv',\n      provider: '2embed',\n      embeddable: true,\n      season,\n      episode\n    };\n  }\n};\nexport default twoEmbedApi;","map":{"version":3,"names":["TWOEMBED_DOMAINS","primary","fallbacks","twoEmbedApi","getAllDomains","getMovieStreamFromDomain","domain","tmdbId","options","autoplay","muted","url","encodeURIComponent","type","provider","embeddable","getMovieStreamByImdbFromDomain","imdbId","params","URLSearchParams","set","qs","toString","getTVStreamFromDomain","season","episode"],"sources":["C:/Users/VASU/Desktop/task/src/services/twoEmbedApi.js"],"sourcesContent":["// 2Embed API service (fallback provider)\n// Public embed mirrors are volatile; this list reflects commonly active domains as of 2025.\n\nconst TWOEMBED_DOMAINS = {\n  primary: 'https://2embed.to',\n  fallbacks: [\n    'https://2embed.cc',\n    'https://2embed.org',\n    'https://2embed.ru'\n  ]\n};\n\nexport const twoEmbedApi = {\n  getAllDomains: () => [TWOEMBED_DOMAINS.primary, ...TWOEMBED_DOMAINS.fallbacks],\n\n  // Movie via TMDB ID\n  getMovieStreamFromDomain: (domain, tmdbId, options = {}) => {\n    const { autoplay = true, muted = true } = options; // kept for symmetry, not appended\n    // Prefer TMDB-prefixed pattern for better compatibility\n    let url = `${domain}/v.php?id=${encodeURIComponent(`tmdb-${tmdbId}`)}`;\n    // Do not append additional params for 2Embed; some mirrors error out with extra query params\n\n    return {\n      url,\n      type: 'movie',\n      provider: '2embed',\n      embeddable: true\n    };\n  },\n\n  // Movie via IMDb ID\n  getMovieStreamByImdbFromDomain: (domain, imdbId, options = {}) => {\n    const { autoplay = true, muted = true } = options; // kept for symmetry, not appended\n    // Common pattern: v.php?imdb=<IMDB_ID>\n    let url = `${domain}/v.php?imdb=${encodeURIComponent(imdbId)}`;\n    const params = new URLSearchParams();\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    const qs = params.toString();\n    if (qs) url += `&${qs}`;\n\n    return {\n      url,\n      type: 'movie',\n      provider: '2embed',\n      embeddable: true\n    };\n  },\n\n  // TV via TMDB ID + season/episode\n  getTVStreamFromDomain: (domain, tmdbId, season = 1, episode = 1, options = {}) => {\n    const { autoplay = true, muted = true } = options; // kept for symmetry, not appended\n    // Prefer TMDB-prefixed pattern for better compatibility\n    let url = `${domain}/v.php?id=${encodeURIComponent(`tmdb-${tmdbId}`)}&s=${encodeURIComponent(season)}&e=${encodeURIComponent(episode)}`;\n    const params = new URLSearchParams();\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    const qs = params.toString();\n    if (qs) url += `&${qs}`;\n\n    return {\n      url,\n      type: 'tv',\n      provider: '2embed',\n      embeddable: true,\n      season,\n      episode\n    };\n  }\n};\n\nexport default twoEmbedApi;\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,gBAAgB,GAAG;EACvBC,OAAO,EAAE,mBAAmB;EAC5BC,SAAS,EAAE,CACT,mBAAmB,EACnB,oBAAoB,EACpB,mBAAmB;AAEvB,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG;EACzBC,aAAa,EAAEA,CAAA,KAAM,CAACJ,gBAAgB,CAACC,OAAO,EAAE,GAAGD,gBAAgB,CAACE,SAAS,CAAC;EAE9E;EACAG,wBAAwB,EAAEA,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC1D,MAAM;MAAEC,QAAQ,GAAG,IAAI;MAAEC,KAAK,GAAG;IAAK,CAAC,GAAGF,OAAO,CAAC,CAAC;IACnD;IACA,IAAIG,GAAG,GAAG,GAAGL,MAAM,aAAaM,kBAAkB,CAAC,QAAQL,MAAM,EAAE,CAAC,EAAE;IACtE;;IAEA,OAAO;MACLI,GAAG;MACHE,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,QAAQ;MAClBC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EAED;EACAC,8BAA8B,EAAEA,CAACV,MAAM,EAAEW,MAAM,EAAET,OAAO,GAAG,CAAC,CAAC,KAAK;IAChE,MAAM;MAAEC,QAAQ,GAAG,IAAI;MAAEC,KAAK,GAAG;IAAK,CAAC,GAAGF,OAAO,CAAC,CAAC;IACnD;IACA,IAAIG,GAAG,GAAG,GAAGL,MAAM,eAAeM,kBAAkB,CAACK,MAAM,CAAC,EAAE;IAC9D,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIV,QAAQ,EAAES,MAAM,CAACE,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC;IACzC,IAAIV,KAAK,EAAEQ,MAAM,CAACE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC;IACnC,MAAMC,EAAE,GAAGH,MAAM,CAACI,QAAQ,CAAC,CAAC;IAC5B,IAAID,EAAE,EAAEV,GAAG,IAAI,IAAIU,EAAE,EAAE;IAEvB,OAAO;MACLV,GAAG;MACHE,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,QAAQ;MAClBC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EAED;EACAQ,qBAAqB,EAAEA,CAACjB,MAAM,EAAEC,MAAM,EAAEiB,MAAM,GAAG,CAAC,EAAEC,OAAO,GAAG,CAAC,EAAEjB,OAAO,GAAG,CAAC,CAAC,KAAK;IAChF,MAAM;MAAEC,QAAQ,GAAG,IAAI;MAAEC,KAAK,GAAG;IAAK,CAAC,GAAGF,OAAO,CAAC,CAAC;IACnD;IACA,IAAIG,GAAG,GAAG,GAAGL,MAAM,aAAaM,kBAAkB,CAAC,QAAQL,MAAM,EAAE,CAAC,MAAMK,kBAAkB,CAACY,MAAM,CAAC,MAAMZ,kBAAkB,CAACa,OAAO,CAAC,EAAE;IACvI,MAAMP,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIV,QAAQ,EAAES,MAAM,CAACE,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC;IACzC,IAAIV,KAAK,EAAEQ,MAAM,CAACE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC;IACnC,MAAMC,EAAE,GAAGH,MAAM,CAACI,QAAQ,CAAC,CAAC;IAC5B,IAAID,EAAE,EAAEV,GAAG,IAAI,IAAIU,EAAE,EAAE;IAEvB,OAAO;MACLV,GAAG;MACHE,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE,QAAQ;MAClBC,UAAU,EAAE,IAAI;MAChBS,MAAM;MACNC;IACF,CAAC;EACH;AACF,CAAC;AAED,eAAetB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}