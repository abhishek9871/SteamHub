{"ast":null,"code":"// VidSrc API service for streaming integration\n// No API key required - uses TMDB IDs directly\n\nconst VIDSRC_BASE_URL = 'https://vidsrc.xyz/embed';\nconst VIDSRC_BACKUP_URLS = ['https://vidsrc.in/embed', 'https://vidsrc.pm/embed', 'https://vidsrc.net/embed'];\n\n// Alternative streaming sources for fallback\nconst EMBED_SOURCES = {\n  vidsrc: {\n    name: 'VidSrc',\n    baseUrl: 'https://vidsrc.xyz/embed',\n    supports: ['movie', 'tv']\n  },\n  embedsoap: {\n    name: 'EmbedSoap',\n    baseUrl: 'https://www.embedsoap.com/embed/movie/',\n    supports: ['movie']\n  },\n  smashystream: {\n    name: 'SmashyStream',\n    baseUrl: 'https://player.smashystream.com/movie/',\n    supports: ['movie']\n  }\n};\nexport const vidsrcApi = {\n  // Get streaming URL for movies\n  getMovieStream: tmdbId => {\n    return {\n      url: `${VIDSRC_BASE_URL}/movie/${tmdbId}`,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true\n    };\n  },\n  // Get streaming URL for TV shows\n  getTVStream: (tmdbId, season = 1, episode = 1) => {\n    return {\n      url: `${VIDSRC_BASE_URL}/tv/${tmdbId}/${season}/${episode}`,\n      type: 'tv',\n      provider: 'vidsrc',\n      embeddable: true,\n      season,\n      episode\n    };\n  },\n  // Get multiple streaming sources for a movie\n  getMovieSources: tmdbId => {\n    const sources = [];\n\n    // Primary VidSrc source\n    sources.push({\n      id: 'vidsrc',\n      name: 'VidSrc',\n      url: `${VIDSRC_BASE_URL}/movie/${tmdbId}`,\n      embeddable: true,\n      quality: 'HD/4K',\n      provider: 'vidsrc'\n    });\n\n    // Backup VidSrc URLs\n    VIDSRC_BACKUP_URLS.forEach((url, index) => {\n      sources.push({\n        id: `vidsrc-backup-${index}`,\n        name: `VidSrc Backup ${index + 1}`,\n        url: `${url}/movie/${tmdbId}`,\n        embeddable: true,\n        quality: 'HD/4K',\n        provider: 'vidsrc'\n      });\n    });\n\n    // Alternative sources\n    sources.push({\n      id: 'embedsoap',\n      name: 'EmbedSoap',\n      url: `${EMBED_SOURCES.embedsoap.baseUrl}?id=${tmdbId}`,\n      embeddable: true,\n      quality: 'HD',\n      provider: 'embedsoap'\n    });\n    sources.push({\n      id: 'smashystream',\n      name: 'SmashyStream',\n      url: `${EMBED_SOURCES.smashystream.baseUrl}${tmdbId}`,\n      embeddable: true,\n      quality: 'HD',\n      provider: 'smashystream'\n    });\n    return sources;\n  },\n  // Get multiple streaming sources for TV shows\n  getTVSources: (tmdbId, season = 1, episode = 1) => {\n    const sources = [];\n\n    // Primary VidSrc source\n    sources.push({\n      id: 'vidsrc',\n      name: 'VidSrc',\n      url: `${VIDSRC_BASE_URL}/tv/${tmdbId}/${season}/${episode}`,\n      embeddable: true,\n      quality: 'HD/4K',\n      provider: 'vidsrc',\n      season,\n      episode\n    });\n\n    // Backup VidSrc URLs\n    VIDSRC_BACKUP_URLS.forEach((url, index) => {\n      sources.push({\n        id: `vidsrc-backup-${index}`,\n        name: `VidSrc Backup ${index + 1}`,\n        url: `${url}/tv/${tmdbId}/${season}/${episode}`,\n        embeddable: true,\n        quality: 'HD/4K',\n        provider: 'vidsrc',\n        season,\n        episode\n      });\n    });\n    return sources;\n  },\n  // Check if streaming is available for a movie\n  checkAvailability: async (tmdbId, type = 'movie') => {\n    try {\n      // VidSrc doesn't have a formal availability check API\n      // We assume content is available if it has a valid TMDB ID\n      return {\n        available: true,\n        provider: 'vidsrc',\n        embeddable: true,\n        message: 'Streaming available via VidSrc'\n      };\n    } catch (error) {\n      return {\n        available: false,\n        provider: 'vidsrc',\n        embeddable: false,\n        message: 'Streaming temporarily unavailable'\n      };\n    }\n  },\n  // Get streaming quality information\n  getQualityInfo: () => {\n    return {\n      default: '1080p',\n      available: ['720p', '1080p', '4K'],\n      note: 'Quality automatically adjusts based on connection speed'\n    };\n  },\n  // Get supported regions\n  getSupportedRegions: () => {\n    return {\n      regionsn      note: 'VidSrc works globally with no regional restrictions'\n    };\n  }\n};\n\n// Helper function to create iframe embed code\nexport const createEmbedCode = (streamData, options = {}) => {\n  const {\n    width = '100%',\n    height = '500',\n    autoplay = false,\n    muted = false,\n    controls = true\n  } = options;\n  const embedUrl = streamData.url;\n  return {\n    iframe: `<iframe\n      src=\"${embedUrl}\"\n      width=\"${width}\"\n      height=\"${height}\"\n      frameborder=\"0\"\n      allowfullscreen\n      ${autoplay ? 'autoplay' : ''}\n      ${muted ? 'muted' : ''}\n      ${controls ? '' : 'controls=\"false\"'}\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\n    ></iframe>`,\n    url: embedUrl,\n    type: streamData.type,\n    provider: streamData.provider\n  };\n};\n\n// Error handling for streaming\nexport const handleStreamError = (error, fallbackSources = []) => {\n  console.error('Streaming error:', error);\n  if (fallbackSources.length > 0) {\n    return {\n      success: false,\n      error: error.message,\n      fallback: fallbackSources[0],\n      hasFallback: true\n    };\n  }\n  return {\n    success: false,\n    error: error.message,\n    hasFallback: false\n  };\n};\nexport default vidsrcApi;","map":{"version":3,"names":["VIDSRC_BASE_URL","VIDSRC_BACKUP_URLS","EMBED_SOURCES","vidsrc","name","baseUrl","supports","embedsoap","smashystream","vidsrcApi","getMovieStream","tmdbId","url","type","provider","embeddable","getTVStream","season","episode","getMovieSources","sources","push","id","quality","forEach","index","getTVSources","checkAvailability","available","message","error","getQualityInfo","default","note","getSupportedRegions","regions","createEmbedCode","streamData","options","width","height","autoplay","muted","controls","embedUrl","iframe","handleStreamError","fallbackSources","console","length","success","fallback","hasFallback"],"sources":["C:/Users/VASU/Desktop/task/src/services/vidsrcApi.js"],"sourcesContent":["// VidSrc API service for streaming integration\r\n// No API key required - uses TMDB IDs directly\r\n\r\nconst VIDSRC_BASE_URL = 'https://vidsrc.xyz/embed';\r\nconst VIDSRC_BACKUP_URLS = [\r\n  'https://vidsrc.in/embed',\r\n  'https://vidsrc.pm/embed',\r\n  'https://vidsrc.net/embed'\r\n];\r\n\r\n// Alternative streaming sources for fallback\r\nconst EMBED_SOURCES = {\r\n  vidsrc: {\r\n    name: 'VidSrc',\r\n    baseUrl: 'https://vidsrc.xyz/embed',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  embedsoap: {\r\n    name: 'EmbedSoap',\r\n    baseUrl: 'https://www.embedsoap.com/embed/movie/',\r\n    supports: ['movie']\r\n  },\r\n  smashystream: {\r\n    name: 'SmashyStream',\r\n    baseUrl: 'https://player.smashystream.com/movie/',\r\n    supports: ['movie']\r\n  }\r\n};\r\n\r\nexport const vidsrcApi = {\r\n  // Get streaming URL for movies\r\n  getMovieStream: (tmdbId) => {\r\n    return {\r\n      url: `${VIDSRC_BASE_URL}/movie/${tmdbId}`,\r\n      type: 'movie',\r\n      provider: 'vidsrc',\r\n      embeddable: true\r\n    };\r\n  },\r\n\r\n  // Get streaming URL for TV shows\r\n  getTVStream: (tmdbId, season = 1, episode = 1) => {\r\n    return {\r\n      url: `${VIDSRC_BASE_URL}/tv/${tmdbId}/${season}/${episode}`,\r\n      type: 'tv',\r\n      provider: 'vidsrc',\r\n      embeddable: true,\r\n      season,\r\n      episode\r\n    };\r\n  },\r\n\r\n  // Get multiple streaming sources for a movie\r\n  getMovieSources: (tmdbId) => {\r\n    const sources = [];\r\n\r\n    // Primary VidSrc source\r\n    sources.push({\r\n      id: 'vidsrc',\r\n      name: 'VidSrc',\r\n      url: `${VIDSRC_BASE_URL}/movie/${tmdbId}`,\r\n      embeddable: true,\r\n      quality: 'HD/4K',\r\n      provider: 'vidsrc'\r\n    });\r\n\r\n    // Backup VidSrc URLs\r\n    VIDSRC_BACKUP_URLS.forEach((url, index) => {\r\n      sources.push({\r\n        id: `vidsrc-backup-${index}`,\r\n        name: `VidSrc Backup ${index + 1}`,\r\n        url: `${url}/movie/${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD/4K',\r\n        provider: 'vidsrc'\r\n      });\r\n    });\r\n\r\n    // Alternative sources\r\n    sources.push({\r\n      id: 'embedsoap',\r\n      name: 'EmbedSoap',\r\n      url: `${EMBED_SOURCES.embedsoap.baseUrl}?id=${tmdbId}`,\r\n      embeddable: true,\r\n      quality: 'HD',\r\n      provider: 'embedsoap'\r\n    });\r\n\r\n    sources.push({\r\n      id: 'smashystream',\r\n      name: 'SmashyStream',\r\n      url: `${EMBED_SOURCES.smashystream.baseUrl}${tmdbId}`,\r\n      embeddable: true,\r\n      quality: 'HD',\r\n      provider: 'smashystream'\r\n    });\r\n\r\n    return sources;\r\n  },\r\n\r\n  // Get multiple streaming sources for TV shows\r\n  getTVSources: (tmdbId, season = 1, episode = 1) => {\r\n    const sources = [];\r\n\r\n    // Primary VidSrc source\r\n    sources.push({\r\n      id: 'vidsrc',\r\n      name: 'VidSrc',\r\n      url: `${VIDSRC_BASE_URL}/tv/${tmdbId}/${season}/${episode}`,\r\n      embeddable: true,\r\n      quality: 'HD/4K',\r\n      provider: 'vidsrc',\r\n      season,\r\n      episode\r\n    });\r\n\r\n    // Backup VidSrc URLs\r\n    VIDSRC_BACKUP_URLS.forEach((url, index) => {\r\n      sources.push({\r\n        id: `vidsrc-backup-${index}`,\r\n        name: `VidSrc Backup ${index + 1}`,\r\n        url: `${url}/tv/${tmdbId}/${season}/${episode}`,\r\n        embeddable: true,\r\n        quality: 'HD/4K',\r\n        provider: 'vidsrc',\r\n        season,\r\n        episode\r\n      });\r\n    });\r\n\r\n    return sources;\r\n  },\r\n\r\n  // Check if streaming is available for a movie\r\n  checkAvailability: async (tmdbId, type = 'movie') => {\r\n    try {\r\n      // VidSrc doesn't have a formal availability check API\r\n      // We assume content is available if it has a valid TMDB ID\r\n      return {\r\n        available: true,\r\n        provider: 'vidsrc',\r\n        embeddable: true,\r\n        message: 'Streaming available via VidSrc'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        available: false,\r\n        provider: 'vidsrc',\r\n        embeddable: false,\r\n        message: 'Streaming temporarily unavailable'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get streaming quality information\r\n  getQualityInfo: () => {\r\n    return {\r\n      default: '1080p',\r\n      available: ['720p', '1080p', '4K'],\r\n      note: 'Quality automatically adjusts based on connection speed'\r\n    };\r\n  },\r\n\r\n  // Get supported regions\r\n  getSupportedRegions: () => {\r\n    return {\r\n      regions: ['IN', 'US', 'UK', 'CA', 'AU', 'DE', 'FR', 'JP', 'KR', 'BR', 'MX', 'ES', 'IT', 'NL', 'SE', 'NO', 'DK', 'FI', 'PL', 'RU', 'CN', 'HK', 'TW', 'SG', 'MY', 'TH', 'VN', 'PH', 'ID', 'AE', 'SA', 'EG', 'ZA', 'NG', 'KE', 'MA', 'TN', 'DZ', 'AR', 'CL', 'CO', 'PE', 'VE', 'EC', 'UY', 'PY', 'BO', 'GT', 'CR', 'PA', 'DO', 'JM', 'TT', 'BB', 'LC', 'VC', 'GD', 'AG', 'DM', 'KN', 'MS', 'VG', 'AI', 'BM', 'KY', 'TC', 'FK', 'GS', 'SH', 'IO', 'AC', 'TA', 'PN', 'WF', 'PF', 'NC', 'VU', 'FJ', 'PG', 'SB', 'KI', 'NR', 'TV', 'TO', 'WS', 'CK', 'NU', 'TK', 'AS', 'GU', 'MP', 'FM', 'MH', 'PW', 'UM', 'VI', 'PR'],\r\n      note: 'VidSrc works globally with no regional restrictions'\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to create iframe embed code\r\nexport const createEmbedCode = (streamData, options = {}) => {\r\n  const {\r\n    width = '100%',\r\n    height = '500',\r\n    autoplay = false,\r\n    muted = false,\r\n    controls = true\r\n  } = options;\r\n\r\n  const embedUrl = streamData.url;\r\n\r\n  return {\r\n    iframe: `<iframe\r\n      src=\"${embedUrl}\"\r\n      width=\"${width}\"\r\n      height=\"${height}\"\r\n      frameborder=\"0\"\r\n      allowfullscreen\r\n      ${autoplay ? 'autoplay' : ''}\r\n      ${muted ? 'muted' : ''}\r\n      ${controls ? '' : 'controls=\"false\"'}\r\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\r\n    ></iframe>`,\r\n    url: embedUrl,\r\n    type: streamData.type,\r\n    provider: streamData.provider\r\n  };\r\n};\r\n\r\n// Error handling for streaming\r\nexport const handleStreamError = (error, fallbackSources = []) => {\r\n  console.error('Streaming error:', error);\r\n\r\n  if (fallbackSources.length > 0) {\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      fallback: fallbackSources[0],\r\n      hasFallback: true\r\n    };\r\n  }\r\n\r\n  return {\r\n    success: false,\r\n    error: error.message,\r\n    hasFallback: false\r\n  };\r\n};\r\n\r\nexport default vidsrcApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}