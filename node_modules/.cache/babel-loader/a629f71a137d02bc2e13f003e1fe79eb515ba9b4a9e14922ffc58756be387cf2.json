{"ast":null,"code":"// VidSrc API service for streaming integration\n// No API key required - uses TMDB IDs directly\n\n// Simplified domain configuration - vidsrc.net as primary source\nconst VIDSRC_DOMAINS = {\n  primary: 'https://vidsrc.net/embed',\n  fallbacks: ['https://vidsrc.to/embed', 'https://vidsrc.cc/embed']\n};\n\n// Quality options for streaming\nconst QualityOptions = {\n  AUTO: 'auto',\n  Q4K: '4k',\n  Q1080P: '1080p',\n  Q720P: '720p',\n  Q480P: '480p',\n  Q360P: '360p'\n};\n\n// Error types for better error handling\nconst StreamErrorTypes = {\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  PLAYER_ERROR: 'PLAYER_ERROR',\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\n  GEO_BLOCKED: 'GEO_BLOCKED',\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\n};\nexport const vidsrcApi = {\n  // Simple streaming URL generation using vidsrc.net\n  getMovieStream: (tmdbId, options = {}) => {\n    const {\n      quality = 'auto'\n    } = options;\n    const url = `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n  // Simple TV streaming using vidsrc.net\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      quality = 'auto'\n    } = options;\n    const url = `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n    return {\n      url,\n      type: 'tv',\n      provider: 'vidsrc',\n      embeddable: true,\n      season,\n      episode,\n      quality\n    };\n  },\n  // Get error stream for failed requests\n  getErrorStream: (type, id, error, season = null, episode = null) => {\n    return {\n      url: '',\n      type,\n      provider: 'error',\n      embeddable: false,\n      error: error.message,\n      season,\n      episode\n    };\n  },\n  // Check if streaming is available for a movie\n  checkAvailability: async (tmdbId, type = 'movie') => {\n    try {\n      // VidSrc doesn't have a formal availability check API\n      // We assume content is available if it has a valid TMDB ID\n      return {\n        available: true,\n        provider: 'vidsrc',\n        embeddable: true,\n        message: 'Streaming available via VidSrc'\n      };\n    } catch (error) {\n      return {\n        available: false,\n        provider: 'vidsrc',\n        embeddable: false,\n        message: 'Streaming temporarily unavailable'\n      };\n    }\n  },\n  // Get streaming quality information\n  getQualityInfo: () => {\n    return {\n      default: '1080p',\n      available: ['720p', '1080p', '4K'],\n      note: 'Quality automatically adjusts based on connection speed'\n    };\n  },\n  // Get supported regions\n  getSupportedRegions: () => {\n    return {\n      regions: ['IN', 'US', 'UK', 'CA', 'AU', 'DE', 'FR', 'JP', 'KR', 'BR', 'MX', 'ES', 'IT', 'NL', 'SE', 'NO', 'DK', 'FI', 'PL', 'RU', 'CN', 'HK', 'TW', 'SG', 'MY', 'TH', 'VN', 'PH', 'ID', 'AE', 'SA', 'EG', 'ZA', 'NG', 'KE', 'MA', 'TN', 'DZ', 'AR', 'CL', 'CO', 'PE', 'VE', 'EC', 'UY', 'PY', 'BO', 'GT', 'CR', 'PA', 'DO', 'JM', 'TT', 'BB', 'LC', 'VC', 'GD', 'AG', 'DM', 'KN', 'MS', 'VG', 'AI', 'BM', 'KY', 'TC', 'FK', 'GS', 'SH', 'IO', 'AC', 'TA', 'PN', 'WF', 'PF', 'NC', 'VU', 'FJ', 'PG', 'SB', 'KI', 'NR', 'TV', 'TO', 'WS', 'CK', 'NU', 'TK', 'AS', 'GU', 'MP', 'FM', 'MH', 'PW', 'UM', 'VI', 'PR'],\n      note: 'VidSrc works globally with no regional restrictions'\n    };\n  },\n  // Get available quality options\n  getQualityOptions: (contentType = 'movie') => {\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    if (contentType === 'movie') {\n      baseQualities.unshift(QualityOptions.Q4K);\n    }\n    return baseQualities;\n  },\n  // Create secure iframe embed\n  createSecureEmbed: (streamData, options = {}) => {\n    const {\n      width = '100%',\n      height = '500',\n      autoplay = false,\n      muted = false,\n      controls = true,\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\n    } = options;\n    const embedUrl = streamData.url;\n    return {\n      iframe: `<iframe\n        src=\"${embedUrl}\"\n        width=\"${width}\"\n        height=\"${height}\"\n        frameborder=\"0\"\n        allowfullscreen\n        ${autoplay ? 'autoplay' : ''}\n        ${muted ? 'muted' : ''}\n        ${controls ? '' : 'controls=\"false\"'}\n        sandbox=\"${sandbox}\"\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\n        referrerpolicy=\"strict-origin-when-cross-origin\"\n        loading=\"lazy\"\n      ></iframe>`,\n      url: embedUrl,\n      type: streamData.type,\n      provider: streamData.provider,\n      security: {\n        sandbox,\n        referrerPolicy: 'strict-origin-when-cross-origin',\n        cspCompliant: true\n      }\n    };\n  }\n};\n\n// Helper function to create iframe embed code\nexport const createEmbedCode = (streamData, options = {}) => {\n  const {\n    width = '100%',\n    height = '500',\n    autoplay = false,\n    muted = false,\n    controls = true\n  } = options;\n  const embedUrl = streamData.url;\n  return {\n    iframe: `<iframe\n      src=\"${embedUrl}\"\n      width=\"${width}\"\n      height=\"${height}\"\n      frameborder=\"0\"\n      allowfullscreen\n      ${autoplay ? 'autoplay' : ''}\n      ${muted ? 'muted' : ''}\n      ${controls ? '' : 'controls=\"false\"'}\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\n    ></iframe>`,\n    url: embedUrl,\n    type: streamData.type,\n    provider: streamData.provider\n  };\n};\n\n// Error handling for streaming\nexport const handleStreamError = (error, fallbackSources = []) => {\n  console.error('Streaming error:', error);\n  if (fallbackSources.length > 0) {\n    return {\n      success: false,\n      error: error.message,\n      fallback: fallbackSources[0],\n      hasFallback: true\n    };\n  }\n  return {\n    success: false,\n    error: error.message,\n    hasFallback: false\n  };\n};\nexport default vidsrcApi;","map":{"version":3,"names":["VIDSRC_DOMAINS","primary","fallbacks","QualityOptions","AUTO","Q4K","Q1080P","Q720P","Q480P","Q360P","StreamErrorTypes","NETWORK_ERROR","TIMEOUT_ERROR","PLAYER_ERROR","CONTENT_NOT_FOUND","GEO_BLOCKED","QUALITY_UNAVAILABLE","vidsrcApi","getMovieStream","tmdbId","options","quality","url","type","provider","embeddable","getTVStream","season","episode","getErrorStream","id","error","message","checkAvailability","available","getQualityInfo","default","note","getSupportedRegions","regions","getQualityOptions","contentType","baseQualities","unshift","createSecureEmbed","streamData","width","height","autoplay","muted","controls","sandbox","embedUrl","iframe","security","referrerPolicy","cspCompliant","createEmbedCode","handleStreamError","fallbackSources","console","length","success","fallback","hasFallback"],"sources":["C:/Users/VASU/Desktop/task/src/services/vidsrcApi.js"],"sourcesContent":["// VidSrc API service for streaming integration\r\n// No API key required - uses TMDB IDs directly\r\n\r\n// Simplified domain configuration - vidsrc.net as primary source\r\nconst VIDSRC_DOMAINS = {\r\n  primary: 'https://vidsrc.net/embed',\r\n  fallbacks: [\r\n    'https://vidsrc.to/embed',\r\n    'https://vidsrc.cc/embed'\r\n  ]\r\n};\r\n\r\n// Quality options for streaming\r\nconst QualityOptions = {\r\n  AUTO: 'auto',\r\n  Q4K: '4k',\r\n  Q1080P: '1080p',\r\n  Q720P: '720p',\r\n  Q480P: '480p',\r\n  Q360P: '360p'\r\n};\r\n\r\n// Error types for better error handling\r\nconst StreamErrorTypes = {\r\n  NETWORK_ERROR: 'NETWORK_ERROR',\r\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\r\n  PLAYER_ERROR: 'PLAYER_ERROR',\r\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\r\n  GEO_BLOCKED: 'GEO_BLOCKED',\r\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const vidsrcApi = {\r\n  // Simple streaming URL generation using vidsrc.net\r\n  getMovieStream: (tmdbId, options = {}) => {\r\n    const { quality = 'auto' } = options;\r\n\r\n    const url = `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n    return {\r\n      url,\r\n      type: 'movie',\r\n      provider: 'vidsrc',\r\n      embeddable: true,\r\n      quality\r\n    };\r\n  },\r\n\r\n  // Simple TV streaming using vidsrc.net\r\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\r\n    const { quality = 'auto' } = options;\r\n\r\n    const url = `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n    return {\r\n      url,\r\n      type: 'tv',\r\n      provider: 'vidsrc',\r\n      embeddable: true,\r\n      season,\r\n      episode,\r\n      quality\r\n    };\r\n  },\r\n\r\n  // Get error stream for failed requests\r\n  getErrorStream: (type, id, error, season = null, episode = null) => {\r\n    return {\r\n      url: '',\r\n      type,\r\n      provider: 'error',\r\n      embeddable: false,\r\n      error: error.message,\r\n      season,\r\n      episode\r\n    };\r\n  },\r\n\r\n  // Check if streaming is available for a movie\r\n  checkAvailability: async (tmdbId, type = 'movie') => {\r\n    try {\r\n      // VidSrc doesn't have a formal availability check API\r\n      // We assume content is available if it has a valid TMDB ID\r\n      return {\r\n        available: true,\r\n        provider: 'vidsrc',\r\n        embeddable: true,\r\n        message: 'Streaming available via VidSrc'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        available: false,\r\n        provider: 'vidsrc',\r\n        embeddable: false,\r\n        message: 'Streaming temporarily unavailable'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get streaming quality information\r\n  getQualityInfo: () => {\r\n    return {\r\n      default: '1080p',\r\n      available: ['720p', '1080p', '4K'],\r\n      note: 'Quality automatically adjusts based on connection speed'\r\n    };\r\n  },\r\n\r\n  // Get supported regions\r\n  getSupportedRegions: () => {\r\n    return {\r\n      regionsr\n      note: 'VidSrc works globally with no regional restrictions'\r\n    };\r\n  },\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Get available quality options\r\n  getQualityOptions: (contentType = 'movie') => {\r\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\r\n\r\n    if (contentType === 'movie') {\r\n      baseQualities.unshift(QualityOptions.Q4K);\r\n    }\r\n\r\n    return baseQualities;\r\n  },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Create secure iframe embed\r\n  createSecureEmbed: (streamData, options = {}) => {\r\n    const {\r\n      width = '100%',\r\n      height = '500',\r\n      autoplay = false,\r\n      muted = false,\r\n      controls = true,\r\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\r\n    } = options;\r\n\r\n    const embedUrl = streamData.url;\r\n\r\n    return {\r\n      iframe: `<iframe\r\n        src=\"${embedUrl}\"\r\n        width=\"${width}\"\r\n        height=\"${height}\"\r\n        frameborder=\"0\"\r\n        allowfullscreen\r\n        ${autoplay ? 'autoplay' : ''}\r\n        ${muted ? 'muted' : ''}\r\n        ${controls ? '' : 'controls=\"false\"'}\r\n        sandbox=\"${sandbox}\"\r\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\r\n        referrerpolicy=\"strict-origin-when-cross-origin\"\r\n        loading=\"lazy\"\r\n      ></iframe>`,\r\n      url: embedUrl,\r\n      type: streamData.type,\r\n      provider: streamData.provider,\r\n      security: {\r\n        sandbox,\r\n        referrerPolicy: 'strict-origin-when-cross-origin',\r\n        cspCompliant: true\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to create iframe embed code\r\nexport const createEmbedCode = (streamData, options = {}) => {\r\n  const {\r\n    width = '100%',\r\n    height = '500',\r\n    autoplay = false,\r\n    muted = false,\r\n    controls = true\r\n  } = options;\r\n\r\n  const embedUrl = streamData.url;\r\n\r\n  return {\r\n    iframe: `<iframe\r\n      src=\"${embedUrl}\"\r\n      width=\"${width}\"\r\n      height=\"${height}\"\r\n      frameborder=\"0\"\r\n      allowfullscreen\r\n      ${autoplay ? 'autoplay' : ''}\r\n      ${muted ? 'muted' : ''}\r\n      ${controls ? '' : 'controls=\"false\"'}\r\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\r\n    ></iframe>`,\r\n    url: embedUrl,\r\n    type: streamData.type,\r\n    provider: streamData.provider\r\n  };\r\n};\r\n\r\n// Error handling for streaming\r\nexport const handleStreamError = (error, fallbackSources = []) => {\r\n  console.error('Streaming error:', error);\r\n\r\n  if (fallbackSources.length > 0) {\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      fallback: fallbackSources[0],\r\n      hasFallback: true\r\n    };\r\n  }\r\n\r\n  return {\r\n    success: false,\r\n    error: error.message,\r\n    hasFallback: false\r\n  };\r\n};\r\n\r\nexport default vidsrcApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}