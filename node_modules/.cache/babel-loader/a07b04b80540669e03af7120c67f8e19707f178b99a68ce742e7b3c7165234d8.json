{"ast":null,"code":"// VidSrc API service for streaming integration\n// No API key required - uses TMDB IDs directly\n\n// Simplified domain configuration - vidsrc.net as primary source\nconst VIDSRC_DOMAINS = {\n  primary: 'https://vidsrc.net/embed',\n  fallbacks: ['https://vidsrc.to/embed', 'https://vidsrc.cc/embed']\n};\n\n// Quality options for streaming\nconst QualityOptions = {\n  AUTO: 'auto',\n  Q4K: '4k',\n  Q1080P: '1080p',\n  Q720P: '720p',\n  Q480P: '480p',\n  Q360P: '360p'\n};\n\n// Error types for better error handling\nconst StreamErrorTypes = {\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  PLAYER_ERROR: 'PLAYER_ERROR',\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\n  GEO_BLOCKED: 'GEO_BLOCKED',\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\n};\nexport const vidsrcApi = {\n  // Simple streaming URL generation using vidsrc.net\n  getMovieStream: (tmdbId, options = {}) => {\n    const {\n      quality = 'auto'\n    } = options;\n    const url = `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n  // Simple TV streaming using vidsrc.net\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      quality = 'auto'\n    } = options;\n    const url = `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n    return {\n      url,\n      type: 'tv',\n      provider: 'vidsrc',\n      embeddable: true,\n      season,\n      episode,\n      quality\n    };\n  },\n  // Get error stream for failed requests\n  getErrorStream: (type, id, error, season = null, episode = null) => {\n    return {\n      url: '',\n      type,\n      provider: 'error',\n      embeddable: false,\n      error: error.message,\n      season,\n      episode\n    };\n  },\n  // Get available quality options\n  getQualityOptions: (contentType = 'movie') => {\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    if (contentType === 'movie') {\n      baseQualities.unshift(QualityOptions.Q4K);\n    }\n    return baseQualities;\n  },\n  // Create secure iframe embed\n  createSecureEmbed: (streamData, options = {}) => {\n    const {\n      width = '100%',\n      height = '500',\n      autoplay = false,\n      muted = false,\n      controls = true,\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\n    } = options;\n    const embedUrl = streamData.url;\n    return {\n      iframe: `<iframe\n        src=\"${embedUrl}\"\n        width=\"${width}\"\n        height=\"${height}\"\n        frameborder=\"0\"\n        allowfullscreen\n        ${autoplay ? 'autoplay' : ''}\n        ${muted ? 'muted' : ''}\n        ${controls ? '' : 'controls=\"false\"'}\n        sandbox=\"${sandbox}\"\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\n        referrerpolicy=\"strict-origin-when-cross-origin\"\n        loading=\"lazy\"\n      ></iframe>`,\n      url: embedUrl,\n      type: streamData.type,\n      provider: streamData.provider,\n      security: {\n        sandbox,\n        referrerPolicy: 'strict-origin-when-cross-origin',\n        cspCompliant: true\n      }\n    };\n  }\n};\n\n// Helper function to create iframe embed code\nexport const createEmbedCode = (streamData, options = {}) => {\n  const {\n    width = '100%',\n    height = '500',\n    autoplay = false,\n    muted = false,\n    controls = true\n  } = options;\n  const embedUrl = streamData.url;\n  return {\n    iframe: `<iframe\n      src=\"${embedUrl}\"\n      width=\"${width}\"\n      height=\"${height}\"\n      frameborder=\"0\"\n      allowfullscreen\n      ${autoplay ? 'autoplay' : ''}\n      ${muted ? 'muted' : ''}\n      ${controls ? '' : 'controls=\"false\"'}\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\n    ></iframe>`,\n    url: embedUrl,\n    type: streamData.type,\n    provider: streamData.provider\n  };\n};\n\n// Error handling for streaming\nexport const handleStreamError = (error, fallbackSources = []) => {\n  console.error('Streaming error:', error);\n  if (fallbackSources.length > 0) {\n    return {\n      success: false,\n      error: error.message,\n      fallback: fallbackSources[0],\n      hasFallback: true\n    };\n  }\n  return {\n    success: false,\n    error: error.message,\n    hasFallback: false\n  };\n};\nexport default vidsrcApi;\n\n// Test function to verify video streaming functionality\nexport const testVideoStreaming = async () => {\n  console.log('üß™ Testing Video Streaming Functionality...');\n\n  // Test data - specific movies mentioned by user\n  const testMovies = [{\n    id: '278',\n    name: 'Shawshank Redemption'\n  }, {\n    id: '155',\n    name: 'The Dark Knight'\n  }, {\n    id: '550',\n    name: 'Fight Club'\n  }];\n  const testTVId = '1399'; // Game of Thrones\n\n  try {\n    // Test 1: Get movie sources for each test movie\n    console.log('\\nüìΩÔ∏è Testing Movie Sources...');\n    for (const movie of testMovies) {\n      const movieSources = vidsrcApi.getMovieSources(movie.id, {\n        includeAlternatives: true\n      });\n      console.log(`Found ${movieSources.length} sources for ${movie.name} (${movie.id})`);\n    }\n\n    // Test 2: Get TV sources\n    console.log('\\nüì∫ Testing TV Sources...');\n    const tvSources = vidsrcApi.getTVSources(testTVId, 1, 1, {\n      includeAlternatives: true\n    });\n    console.log(`Found ${tvSources.length} TV sources`);\n\n    // Test 3: Test specific movies for availability\n    console.log('\\nüîç Testing Specific Movie Availability...');\n    for (const movie of testMovies) {\n      console.log(`\\n--- Testing ${movie.name} (${movie.id}) ---`);\n\n      // Test the primary source\n      const primaryStream = vidsrcApi.getMovieStream(movie.id, {\n        quality: '1080p'\n      });\n      console.log(`Primary URL: ${primaryStream.url}`);\n      try {\n        const result = await vidsrcApi.testStream(primaryStream.url, 5000);\n        console.log(`‚úÖ Primary: ${result.available ? 'Available' : 'Failed'} (${result.loadTime}ms)`);\n        if (result.available) {\n          console.log(`üéâ SUCCESS: ${movie.name} is working!`);\n        } else {\n          console.log(`‚ùå Primary failed, trying alternatives...`);\n\n          // Try alternative sources\n          const altUrls = vidsrcApi.tryAlternativeUrls(movie.id, 'movie');\n          console.log(`Found ${altUrls.length} alternative URLs`);\n          for (let i = 0; i < Math.min(3, altUrls.length); i++) {\n            try {\n              const altResult = await vidsrcApi.testStream(altUrls[i], 3000);\n              console.log(`  Alt ${i + 1}: ${altResult.available ? 'Available' : 'Failed'} (${altResult.loadTime}ms)`);\n              if (altResult.available) {\n                console.log(`  üéâ Alternative ${i + 1} works!`);\n                break;\n              }\n            } catch (altError) {\n              console.log(`  Alt ${i + 1}: Error - ${altError.message}`);\n            }\n          }\n        }\n      } catch (error) {\n        console.log(`‚ùå Error testing ${movie.name}: ${error.message}`);\n      }\n    }\n\n    // Test 4: Test fallback system\n    console.log('\\nüîÑ Testing Fallback System...');\n    const fallbackStatus = vidsrcApi.getFallbackStatus();\n    console.log('Fallback Status:', fallbackStatus);\n    console.log('\\n‚úÖ Video streaming test completed!');\n    return {\n      success: true,\n      testedMovies: testMovies.length,\n      tvSources: tvSources.length\n    };\n  } catch (error) {\n    console.error('‚ùå Video streaming test failed:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["VIDSRC_DOMAINS","primary","fallbacks","QualityOptions","AUTO","Q4K","Q1080P","Q720P","Q480P","Q360P","StreamErrorTypes","NETWORK_ERROR","TIMEOUT_ERROR","PLAYER_ERROR","CONTENT_NOT_FOUND","GEO_BLOCKED","QUALITY_UNAVAILABLE","vidsrcApi","getMovieStream","tmdbId","options","quality","url","type","provider","embeddable","getTVStream","season","episode","getErrorStream","id","error","message","getQualityOptions","contentType","baseQualities","unshift","createSecureEmbed","streamData","width","height","autoplay","muted","controls","sandbox","embedUrl","iframe","security","referrerPolicy","cspCompliant","createEmbedCode","handleStreamError","fallbackSources","console","length","success","fallback","hasFallback","testVideoStreaming","log","testMovies","name","testTVId","movie","movieSources","getMovieSources","includeAlternatives","tvSources","getTVSources","primaryStream","result","testStream","available","loadTime","altUrls","tryAlternativeUrls","i","Math","min","altResult","altError","fallbackStatus","getFallbackStatus","testedMovies"],"sources":["c:/Users/VASU/Desktop/task/src/services/vidsrcApi.js"],"sourcesContent":["// VidSrc API service for streaming integration\r\n// No API key required - uses TMDB IDs directly\r\n\r\n// Simplified domain configuration - vidsrc.net as primary source\r\nconst VIDSRC_DOMAINS = {\r\n  primary: 'https://vidsrc.net/embed',\r\n  fallbacks: [\r\n    'https://vidsrc.to/embed',\r\n    'https://vidsrc.cc/embed'\r\n  ]\r\n};\r\n\r\n// Quality options for streaming\r\nconst QualityOptions = {\r\n  AUTO: 'auto',\r\n  Q4K: '4k',\r\n  Q1080P: '1080p',\r\n  Q720P: '720p',\r\n  Q480P: '480p',\r\n  Q360P: '360p'\r\n};\r\n\r\n// Error types for better error handling\r\nconst StreamErrorTypes = {\r\n  NETWORK_ERROR: 'NETWORK_ERROR',\r\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\r\n  PLAYER_ERROR: 'PLAYER_ERROR',\r\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\r\n  GEO_BLOCKED: 'GEO_BLOCKED',\r\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const vidsrcApi = {\r\n  // Simple streaming URL generation using vidsrc.net\r\n  getMovieStream: (tmdbId, options = {}) => {\r\n    const { quality = 'auto' } = options;\r\n\r\n    const url = `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n    return {\r\n      url,\r\n      type: 'movie',\r\n      provider: 'vidsrc',\r\n      embeddable: true,\r\n      quality\r\n    };\r\n  },\r\n\r\n  // Simple TV streaming using vidsrc.net\r\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\r\n    const { quality = 'auto' } = options;\r\n\r\n    const url = `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n    return {\r\n      url,\r\n      type: 'tv',\r\n      provider: 'vidsrc',\r\n      embeddable: true,\r\n      season,\r\n      episode,\r\n      quality\r\n    };\r\n  },\r\n\r\n  // Get error stream for failed requests\r\n  getErrorStream: (type, id, error, season = null, episode = null) => {\r\n    return {\r\n      url: '',\r\n      type,\r\n      provider: 'error',\r\n      embeddable: false,\r\n      error: error.message,\r\n      season,\r\n      episode\r\n    };\r\n  },\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Get available quality options\r\n  getQualityOptions: (contentType = 'movie') => {\r\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\r\n\r\n    if (contentType === 'movie') {\r\n      baseQualities.unshift(QualityOptions.Q4K);\r\n    }\r\n\r\n    return baseQualities;\r\n  },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Create secure iframe embed\r\n  createSecureEmbed: (streamData, options = {}) => {\r\n    const {\r\n      width = '100%',\r\n      height = '500',\r\n      autoplay = false,\r\n      muted = false,\r\n      controls = true,\r\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\r\n    } = options;\r\n\r\n    const embedUrl = streamData.url;\r\n\r\n    return {\r\n      iframe: `<iframe\r\n        src=\"${embedUrl}\"\r\n        width=\"${width}\"\r\n        height=\"${height}\"\r\n        frameborder=\"0\"\r\n        allowfullscreen\r\n        ${autoplay ? 'autoplay' : ''}\r\n        ${muted ? 'muted' : ''}\r\n        ${controls ? '' : 'controls=\"false\"'}\r\n        sandbox=\"${sandbox}\"\r\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\r\n        referrerpolicy=\"strict-origin-when-cross-origin\"\r\n        loading=\"lazy\"\r\n      ></iframe>`,\r\n      url: embedUrl,\r\n      type: streamData.type,\r\n      provider: streamData.provider,\r\n      security: {\r\n        sandbox,\r\n        referrerPolicy: 'strict-origin-when-cross-origin',\r\n        cspCompliant: true\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to create iframe embed code\r\nexport const createEmbedCode = (streamData, options = {}) => {\r\n  const {\r\n    width = '100%',\r\n    height = '500',\r\n    autoplay = false,\r\n    muted = false,\r\n    controls = true\r\n  } = options;\r\n\r\n  const embedUrl = streamData.url;\r\n\r\n  return {\r\n    iframe: `<iframe\r\n      src=\"${embedUrl}\"\r\n      width=\"${width}\"\r\n      height=\"${height}\"\r\n      frameborder=\"0\"\r\n      allowfullscreen\r\n      ${autoplay ? 'autoplay' : ''}\r\n      ${muted ? 'muted' : ''}\r\n      ${controls ? '' : 'controls=\"false\"'}\r\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\r\n    ></iframe>`,\r\n    url: embedUrl,\r\n    type: streamData.type,\r\n    provider: streamData.provider\r\n  };\r\n};\r\n\r\n// Error handling for streaming\r\nexport const handleStreamError = (error, fallbackSources = []) => {\r\n  console.error('Streaming error:', error);\r\n\r\n  if (fallbackSources.length > 0) {\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      fallback: fallbackSources[0],\r\n      hasFallback: true\r\n    };\r\n  }\r\n\r\n  return {\r\n    success: false,\r\n    error: error.message,\r\n    hasFallback: false\r\n  };\r\n};\r\n\r\nexport default vidsrcApi;\r\n\r\n// Test function to verify video streaming functionality\r\nexport const testVideoStreaming = async () => {\r\n  console.log('üß™ Testing Video Streaming Functionality...');\r\n\r\n  // Test data - specific movies mentioned by user\r\n  const testMovies = [\r\n    { id: '278', name: 'Shawshank Redemption' },\r\n    { id: '155', name: 'The Dark Knight' },\r\n    { id: '550', name: 'Fight Club' }\r\n  ];\r\n  const testTVId = '1399'; // Game of Thrones\r\n\r\n  try {\r\n    // Test 1: Get movie sources for each test movie\r\n    console.log('\\nüìΩÔ∏è Testing Movie Sources...');\r\n    for (const movie of testMovies) {\r\n      const movieSources = vidsrcApi.getMovieSources(movie.id, { includeAlternatives: true });\r\n      console.log(`Found ${movieSources.length} sources for ${movie.name} (${movie.id})`);\r\n    }\r\n\r\n    // Test 2: Get TV sources\r\n    console.log('\\nüì∫ Testing TV Sources...');\r\n    const tvSources = vidsrcApi.getTVSources(testTVId, 1, 1, { includeAlternatives: true });\r\n    console.log(`Found ${tvSources.length} TV sources`);\r\n\r\n    // Test 3: Test specific movies for availability\r\n    console.log('\\nüîç Testing Specific Movie Availability...');\r\n    for (const movie of testMovies) {\r\n      console.log(`\\n--- Testing ${movie.name} (${movie.id}) ---`);\r\n\r\n      // Test the primary source\r\n      const primaryStream = vidsrcApi.getMovieStream(movie.id, { quality: '1080p' });\r\n      console.log(`Primary URL: ${primaryStream.url}`);\r\n\r\n      try {\r\n        const result = await vidsrcApi.testStream(primaryStream.url, 5000);\r\n        console.log(`‚úÖ Primary: ${result.available ? 'Available' : 'Failed'} (${result.loadTime}ms)`);\r\n\r\n        if (result.available) {\r\n          console.log(`üéâ SUCCESS: ${movie.name} is working!`);\r\n        } else {\r\n          console.log(`‚ùå Primary failed, trying alternatives...`);\r\n\r\n          // Try alternative sources\r\n          const altUrls = vidsrcApi.tryAlternativeUrls(movie.id, 'movie');\r\n          console.log(`Found ${altUrls.length} alternative URLs`);\r\n\r\n          for (let i = 0; i < Math.min(3, altUrls.length); i++) {\r\n            try {\r\n              const altResult = await vidsrcApi.testStream(altUrls[i], 3000);\r\n              console.log(`  Alt ${i + 1}: ${altResult.available ? 'Available' : 'Failed'} (${altResult.loadTime}ms)`);\r\n              if (altResult.available) {\r\n                console.log(`  üéâ Alternative ${i + 1} works!`);\r\n                break;\r\n              }\r\n            } catch (altError) {\r\n              console.log(`  Alt ${i + 1}: Error - ${altError.message}`);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(`‚ùå Error testing ${movie.name}: ${error.message}`);\r\n      }\r\n    }\r\n\r\n    // Test 4: Test fallback system\r\n    console.log('\\nüîÑ Testing Fallback System...');\r\n    const fallbackStatus = vidsrcApi.getFallbackStatus();\r\n    console.log('Fallback Status:', fallbackStatus);\r\n\r\n    console.log('\\n‚úÖ Video streaming test completed!');\r\n    return {\r\n      success: true,\r\n      testedMovies: testMovies.length,\r\n      tvSources: tvSources.length\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Video streaming test failed:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}