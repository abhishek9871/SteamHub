{"ast":null,"code":"/**\n * GoDrivePlayer API service for streaming embeds\n * Based on deep research response (2025-09-23)\n * Primarily uses IMDB IDs, supports movies and TV shows\n */\nimport axios from 'axios';\nconst BASE_URL = 'https://godriveplayer.com';\nexport const godrivePlayerApi = {\n  // Get movie embed URL\n  getMovieStreamFromDomain: (imdbId, domain = 'godriveplayer.com') => {\n    if (!imdbId.startsWith('tt')) imdbId = `tt${imdbId}`;\n    const baseUrl = `https://${domain}/player.php?imdb=${imdbId}`;\n    return baseUrl;\n  },\n  // Get TV episode embed URL (inferred from response)\n  getTvStreamFromDomain: (imdbId, season, episode, domain = 'godriveplayer.com') => {\n    if (!imdbId.startsWith('tt')) imdbId = `tt${imdbId}`;\n    const baseUrl = `https://${domain}/player.php?imdb=${imdbId}&s=${season}&e=${episode}`;\n    return baseUrl;\n  },\n  // Fetch M3U8 URL for quality selection (unofficial, from grok.md)\n  getM3u8Url: async (imdbId, season = null, episode = null) => {\n    // No official API; use embed URL and scrape for M3U8 (placeholder)\n    const embedUrl = season && episode ? godrivePlayerApi.getTvStreamFromDomain(imdbId, season, episode) : godrivePlayerApi.getMovieStreamFromDomain(imdbId);\n    try {\n      // This is a placeholder; in practice, you'd scrape the embed page\n      // For now, return null to fall back\n      console.log(`GoDrivePlayer M3U8 fetch not implemented; using embed: ${embedUrl}`);\n      return null; // Implement scraping if needed\n    } catch (error) {\n      console.error('GoDrivePlayer M3U8 fetch error:', error);\n      return null;\n    }\n  },\n  // No formal API; direct embed only\n  getEmbedFromApi: async (imdbId, season = null, episode = null) => {\n    // Fallback to direct embed since no API is mentioned\n    return season && episode ? godrivePlayerApi.getTvStreamFromDomain(imdbId, season, episode) : godrivePlayerApi.getMovieStreamFromDomain(imdbId);\n  },\n  // List of domains for rotation\n  domains: ['godriveplayer.com'] // Limited to main domain\n};","map":{"version":3,"names":["axios","BASE_URL","godrivePlayerApi","getMovieStreamFromDomain","imdbId","domain","startsWith","baseUrl","getTvStreamFromDomain","season","episode","getM3u8Url","embedUrl","console","log","error","getEmbedFromApi","domains"],"sources":["C:/Users/VASU/Desktop/task/src/services/godrivePlayerApi.js"],"sourcesContent":["/**\n * GoDrivePlayer API service for streaming embeds\n * Based on deep research response (2025-09-23)\n * Primarily uses IMDB IDs, supports movies and TV shows\n */\nimport axios from 'axios';\n\nconst BASE_URL = 'https://godriveplayer.com';\n\nexport const godrivePlayerApi = {\n  // Get movie embed URL\n  getMovieStreamFromDomain: (imdbId, domain = 'godriveplayer.com') => {\n    if (!imdbId.startsWith('tt')) imdbId = `tt${imdbId}`;\n    const baseUrl = `https://${domain}/player.php?imdb=${imdbId}`;\n    return baseUrl;\n  },\n\n  // Get TV episode embed URL (inferred from response)\n  getTvStreamFromDomain: (imdbId, season, episode, domain = 'godriveplayer.com') => {\n    if (!imdbId.startsWith('tt')) imdbId = `tt${imdbId}`;\n    const baseUrl = `https://${domain}/player.php?imdb=${imdbId}&s=${season}&e=${episode}`;\n    return baseUrl;\n  },\n\n  // Fetch M3U8 URL for quality selection (unofficial, from grok.md)\n  getM3u8Url: async (imdbId, season = null, episode = null) => {\n    // No official API; use embed URL and scrape for M3U8 (placeholder)\n    const embedUrl = season && episode\n      ? godrivePlayerApi.getTvStreamFromDomain(imdbId, season, episode)\n      : godrivePlayerApi.getMovieStreamFromDomain(imdbId);\n    try {\n      // This is a placeholder; in practice, you'd scrape the embed page\n      // For now, return null to fall back\n      console.log(`GoDrivePlayer M3U8 fetch not implemented; using embed: ${embedUrl}`);\n      return null; // Implement scraping if needed\n    } catch (error) {\n      console.error('GoDrivePlayer M3U8 fetch error:', error);\n      return null;\n    }\n  },\n\n  // No formal API; direct embed only\n  getEmbedFromApi: async (imdbId, season = null, episode = null) => {\n    // Fallback to direct embed since no API is mentioned\n    return season && episode\n      ? godrivePlayerApi.getTvStreamFromDomain(imdbId, season, episode)\n      : godrivePlayerApi.getMovieStreamFromDomain(imdbId);\n  },\n\n  // List of domains for rotation\n  domains: ['godriveplayer.com'], // Limited to main domain\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,2BAA2B;AAE5C,OAAO,MAAMC,gBAAgB,GAAG;EAC9B;EACAC,wBAAwB,EAAEA,CAACC,MAAM,EAAEC,MAAM,GAAG,mBAAmB,KAAK;IAClE,IAAI,CAACD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC,EAAEF,MAAM,GAAG,KAAKA,MAAM,EAAE;IACpD,MAAMG,OAAO,GAAG,WAAWF,MAAM,oBAAoBD,MAAM,EAAE;IAC7D,OAAOG,OAAO;EAChB,CAAC;EAED;EACAC,qBAAqB,EAAEA,CAACJ,MAAM,EAAEK,MAAM,EAAEC,OAAO,EAAEL,MAAM,GAAG,mBAAmB,KAAK;IAChF,IAAI,CAACD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC,EAAEF,MAAM,GAAG,KAAKA,MAAM,EAAE;IACpD,MAAMG,OAAO,GAAG,WAAWF,MAAM,oBAAoBD,MAAM,MAAMK,MAAM,MAAMC,OAAO,EAAE;IACtF,OAAOH,OAAO;EAChB,CAAC;EAED;EACAI,UAAU,EAAE,MAAAA,CAAOP,MAAM,EAAEK,MAAM,GAAG,IAAI,EAAEC,OAAO,GAAG,IAAI,KAAK;IAC3D;IACA,MAAME,QAAQ,GAAGH,MAAM,IAAIC,OAAO,GAC9BR,gBAAgB,CAACM,qBAAqB,CAACJ,MAAM,EAAEK,MAAM,EAAEC,OAAO,CAAC,GAC/DR,gBAAgB,CAACC,wBAAwB,CAACC,MAAM,CAAC;IACrD,IAAI;MACF;MACA;MACAS,OAAO,CAACC,GAAG,CAAC,0DAA0DF,QAAQ,EAAE,CAAC;MACjF,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,IAAI;IACb;EACF,CAAC;EAED;EACAC,eAAe,EAAE,MAAAA,CAAOZ,MAAM,EAAEK,MAAM,GAAG,IAAI,EAAEC,OAAO,GAAG,IAAI,KAAK;IAChE;IACA,OAAOD,MAAM,IAAIC,OAAO,GACpBR,gBAAgB,CAACM,qBAAqB,CAACJ,MAAM,EAAEK,MAAM,EAAEC,OAAO,CAAC,GAC/DR,gBAAgB,CAACC,wBAAwB,CAACC,MAAM,CAAC;EACvD,CAAC;EAED;EACAa,OAAO,EAAE,CAAC,mBAAmB,CAAC,CAAE;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}