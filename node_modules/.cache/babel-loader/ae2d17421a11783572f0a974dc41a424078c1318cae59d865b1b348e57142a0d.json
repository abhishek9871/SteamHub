{"ast":null,"code":"/**\n * VidSrc.cc API service for streaming embeds\n * Based on deep research response (2025-09-23)\n * Supports TMDB/IMDB IDs, movies, and TV shows\n */\nconst BASE_URL = 'https://vidsrc.cc';\nexport const vidsrcCcApi = {\n  // Get movie embed URL\n  getMovieStreamFromDomain: (tmdbId, imdbId, domain = 'vidsrc.cc') => {\n    const id = tmdbId || imdbId;\n    const baseUrl = `https://${domain}/v2/embed/movie/${id}`;\n    const params = new URLSearchParams({\n      autoplay: '1',\n      autonext: '1'\n    });\n    return `${baseUrl}?${params.toString()}`;\n  },\n  // Get TV episode embed URL\n  getTvStreamFromDomain: (tmdbId, imdbId, season, episode, domain = 'vidsrc.cc') => {\n    const id = tmdbId || imdbId;\n    const baseUrl = `https://${domain}/v2/embed/tv/${id}/${season}/${episode}`;\n    const params = new URLSearchParams({\n      autoplay: '1',\n      autonext: '1'\n    });\n    return `${baseUrl}?${params.toString()}`;\n  },\n  // API endpoint for generating embed URLs (from response)\n  getEmbedFromApi: async (imdbId, season = null, episode = null) => {\n    const endpoint = season && episode ? `https://vidsrc.xyz/embed/tv?imdb=${imdbId}&season=${season}&episode=${episode}` : `https://vidsrc.xyz/embed/movie?imdb=${imdbId}`;\n    try {\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      return data.embedUrl || endpoint;\n    } catch (error) {\n      console.error('VidSrc.cc API error:', error);\n      return null;\n    }\n  },\n  // List of domains for rotation\n  domains: ['vidsrc.cc', 'vidsrc.xyz'] // Add more if needed\n};","map":{"version":3,"names":["BASE_URL","vidsrcCcApi","getMovieStreamFromDomain","tmdbId","imdbId","domain","id","baseUrl","params","URLSearchParams","autoplay","autonext","toString","getTvStreamFromDomain","season","episode","getEmbedFromApi","endpoint","response","fetch","data","json","embedUrl","error","console","domains"],"sources":["C:/Users/VASU/Desktop/task/src/services/vidsrcCcApi.js"],"sourcesContent":["/**\n * VidSrc.cc API service for streaming embeds\n * Based on deep research response (2025-09-23)\n * Supports TMDB/IMDB IDs, movies, and TV shows\n */\nconst BASE_URL = 'https://vidsrc.cc';\n\nexport const vidsrcCcApi = {\n  // Get movie embed URL\n  getMovieStreamFromDomain: (tmdbId, imdbId, domain = 'vidsrc.cc') => {\n    const id = tmdbId || imdbId;\n    const baseUrl = `https://${domain}/v2/embed/movie/${id}`;\n    const params = new URLSearchParams({\n      autoplay: '1',\n      autonext: '1',\n    });\n    return `${baseUrl}?${params.toString()}`;\n  },\n\n  // Get TV episode embed URL\n  getTvStreamFromDomain: (tmdbId, imdbId, season, episode, domain = 'vidsrc.cc') => {\n    const id = tmdbId || imdbId;\n    const baseUrl = `https://${domain}/v2/embed/tv/${id}/${season}/${episode}`;\n    const params = new URLSearchParams({\n      autoplay: '1',\n      autonext: '1',\n    });\n    return `${baseUrl}?${params.toString()}`;\n  },\n\n  // API endpoint for generating embed URLs (from response)\n  getEmbedFromApi: async (imdbId, season = null, episode = null) => {\n    const endpoint = season && episode\n      ? `https://vidsrc.xyz/embed/tv?imdb=${imdbId}&season=${season}&episode=${episode}`\n      : `https://vidsrc.xyz/embed/movie?imdb=${imdbId}`;\n    try {\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      return data.embedUrl || endpoint;\n    } catch (error) {\n      console.error('VidSrc.cc API error:', error);\n      return null;\n    }\n  },\n\n  // List of domains for rotation\n  domains: ['vidsrc.cc', 'vidsrc.xyz'], // Add more if needed\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAG,mBAAmB;AAEpC,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,wBAAwB,EAAEA,CAACC,MAAM,EAAEC,MAAM,EAAEC,MAAM,GAAG,WAAW,KAAK;IAClE,MAAMC,EAAE,GAAGH,MAAM,IAAIC,MAAM;IAC3B,MAAMG,OAAO,GAAG,WAAWF,MAAM,mBAAmBC,EAAE,EAAE;IACxD,MAAME,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE;IACZ,CAAC,CAAC;IACF,OAAO,GAAGJ,OAAO,IAAIC,MAAM,CAACI,QAAQ,CAAC,CAAC,EAAE;EAC1C,CAAC;EAED;EACAC,qBAAqB,EAAEA,CAACV,MAAM,EAAEC,MAAM,EAAEU,MAAM,EAAEC,OAAO,EAAEV,MAAM,GAAG,WAAW,KAAK;IAChF,MAAMC,EAAE,GAAGH,MAAM,IAAIC,MAAM;IAC3B,MAAMG,OAAO,GAAG,WAAWF,MAAM,gBAAgBC,EAAE,IAAIQ,MAAM,IAAIC,OAAO,EAAE;IAC1E,MAAMP,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE;IACZ,CAAC,CAAC;IACF,OAAO,GAAGJ,OAAO,IAAIC,MAAM,CAACI,QAAQ,CAAC,CAAC,EAAE;EAC1C,CAAC;EAED;EACAI,eAAe,EAAE,MAAAA,CAAOZ,MAAM,EAAEU,MAAM,GAAG,IAAI,EAAEC,OAAO,GAAG,IAAI,KAAK;IAChE,MAAME,QAAQ,GAAGH,MAAM,IAAIC,OAAO,GAC9B,oCAAoCX,MAAM,WAAWU,MAAM,YAAYC,OAAO,EAAE,GAChF,uCAAuCX,MAAM,EAAE;IACnD,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,CAAC;MACtC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACE,QAAQ,IAAIL,QAAQ;IAClC,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI;IACb;EACF,CAAC;EAED;EACAE,OAAO,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC,CAAE;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}