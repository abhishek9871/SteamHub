{"ast":null,"code":"// VidSrc API service for streaming integration\n// No API key required - uses TMDB IDs directly\n\n// Simplified domain configuration - vidsrc.net as primary source\nconst VIDSRC_DOMAINS = {\n  primary: 'https://vidsrc.net/embed',\n  fallbacks: ['https://vidsrc.to/embed', 'https://vidsrc.cc/embed']\n};\n\n// Quality options for streaming\nconst QualityOptions = {\n  AUTO: 'auto',\n  Q4K: '4k',\n  Q1080P: '1080p',\n  Q720P: '720p',\n  Q480P: '480p',\n  Q360P: '360p'\n};\n\n// Error types for better error handling\nconst StreamErrorTypes = {\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  PLAYER_ERROR: 'PLAYER_ERROR',\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\n  GEO_BLOCKED: 'GEO_BLOCKED',\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\n};\nexport const vidsrcApi = {\n  // Simple streaming URL generation using vidsrc.net\n  getMovieStream: (tmdbId, options = {}) => {\n    const {\n      quality = 'auto'\n    } = options;\n    const url = `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n  // Simple TV streaming using vidsrc.net\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      quality = 'auto'\n    } = options;\n    const url = `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n    return {\n      url,\n      type: 'tv',\n      provider: 'vidsrc',\n      embeddable: true,\n      season,\n      episode,\n      quality\n    };\n  },\n  // Get error stream for failed requests\n  getErrorStream: (type, id, error, season = null, episode = null) => {\n    return {\n      url: '',\n      type,\n      provider: 'error',\n      embeddable: false,\n      error: error.message,\n      season,\n      episode\n    };\n  },\n  // Enhanced TV sources with quality options\n  getTVSources: (tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      includeAlternatives = true,\n      quality = 'auto'\n    } = options;\n    const sources = [];\n\n    // Primary VidSrc sources with different qualities\n    const qualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    qualities.forEach((q, index) => {\n      sources.push({\n        id: `vidsrc-${q}`,\n        name: `VidSrc ${q.toUpperCase()}`,\n        url: fallbackManager.getNextUrl('tv', tmdbId, season, episode, q),\n        embeddable: true,\n        quality: q,\n        provider: 'vidsrc',\n        season,\n        episode,\n        primary: index === 0\n      });\n    });\n\n    // Backup domains for primary quality\n    if (includeAlternatives) {\n      VIDSRC_DOMAINS.fallbacks.forEach((domain, index) => {\n        sources.push({\n          id: `vidsrc-backup-${index}`,\n          name: `VidSrc Backup ${index + 1}`,\n          url: `${domain}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`,\n          embeddable: true,\n          quality: quality,\n          provider: 'vidsrc',\n          season,\n          episode,\n          backup: true\n        });\n      });\n    }\n    return sources;\n  },\n  // Check if streaming is available for a movie\n  checkAvailability: async (tmdbId, type = 'movie') => {\n    try {\n      // VidSrc doesn't have a formal availability check API\n      // We assume content is available if it has a valid TMDB ID\n      return {\n        available: true,\n        provider: 'vidsrc',\n        embeddable: true,\n        message: 'Streaming available via VidSrc'\n      };\n    } catch (error) {\n      return {\n        available: false,\n        provider: 'vidsrc',\n        embeddable: false,\n        message: 'Streaming temporarily unavailable'\n      };\n    }\n  },\n  // Get streaming quality information\n  getQualityInfo: () => {\n    return {\n      default: '1080p',\n      available: ['720p', '1080p', '4K'],\n      note: 'Quality automatically adjusts based on connection speed'\n    };\n  },\n  // Get supported regions\n  getSupportedRegions: () => {\n    return {\n      regionsn      note: 'VidSrc works globally with no regional restrictions'\n    };\n  },\n  // Enhanced error handling with recovery\n  handleStreamError: async (error, context) => {\n    performanceMonitor.trackError(error);\n    try {\n      const recoveredUrl = await errorRecoveryManager.recover(error, context);\n      fallbackManager.recordSuccess();\n      return {\n        success: true,\n        url: recoveredUrl,\n        recovered: true\n      };\n    } catch (recoveryError) {\n      fallbackManager.recordFailure();\n      return {\n        success: false,\n        error: recoveryError.message,\n        fallbackExhausted: true\n      };\n    }\n  },\n  // Get available quality options\n  getQualityOptions: (contentType = 'movie') => {\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    if (contentType === 'movie') {\n      baseQualities.unshift(QualityOptions.Q4K);\n    }\n    return baseQualities;\n  },\n  // Test stream availability with enhanced error handling (November 2025)\n  testStream: async (url, timeout = 8000) => {\n    const startTime = Date.now();\n\n    // Create a timeout promise with AbortController for better control\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    try {\n      // Try HEAD request first (more efficient)\n      const response = await fetch(url, {\n        method: 'HEAD',\n        signal: controller.signal,\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        }\n      });\n      clearTimeout(timeoutId);\n      const loadTime = Date.now() - startTime;\n      performanceMonitor.trackStreamLoadTime(Date.now());\n\n      // Check if response is successful and content exists\n      if (response.ok && response.status < 400) {\n        return {\n          available: true,\n          loadTime,\n          url,\n          responseTime: loadTime,\n          method: 'HEAD',\n          status: response.status\n        };\n      } else {\n        return {\n          available: false,\n          loadTime,\n          error: `HTTP ${response.status}: ${response.statusText}`,\n          errorType: response.status === 404 ? StreamErrorTypes.CONTENT_NOT_FOUND : StreamErrorTypes.PLAYER_ERROR,\n          url,\n          responseTime: loadTime,\n          method: 'HEAD',\n          status: response.status,\n          retryable: response.status !== 404\n        };\n      }\n    } catch (headError) {\n      try {\n        // If HEAD fails, try GET request to actually check content\n        const getResponse = await fetch(url, {\n          method: 'GET',\n          signal: controller.signal,\n          headers: {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n          }\n        });\n        clearTimeout(timeoutId);\n        const loadTime = Date.now() - startTime;\n        performanceMonitor.trackStreamLoadTime(Date.now());\n\n        // Check if response is successful\n        if (getResponse.ok && getResponse.status < 400) {\n          // Try to read response text to verify it's not an error page\n          const responseText = await getResponse.text();\n          const contentLength = responseText.length;\n\n          // Basic checks for video availability\n          const hasVideoContent = contentLength > 1000; // Minimum content length\n          const isErrorPage = responseText.includes('not found') || responseText.includes('video not available') || responseText.includes('error') || responseText.includes('404') || responseText.includes('Video not found');\n          if (hasVideoContent && !isErrorPage) {\n            return {\n              available: true,\n              loadTime,\n              url,\n              responseTime: loadTime,\n              method: 'GET',\n              status: getResponse.status,\n              contentLength\n            };\n          } else {\n            return {\n              available: false,\n              loadTime,\n              error: isErrorPage ? 'Video not found on server' : 'Insufficient content or error page detected',\n              errorType: StreamErrorTypes.CONTENT_NOT_FOUND,\n              url,\n              responseTime: loadTime,\n              method: 'GET',\n              status: getResponse.status,\n              contentLength,\n              retryable: false\n            };\n          }\n        } else {\n          return {\n            available: false,\n            loadTime,\n            error: `HTTP ${getResponse.status}: ${getResponse.statusText}`,\n            errorType: getResponse.status === 404 ? StreamErrorTypes.CONTENT_NOT_FOUND : StreamErrorTypes.PLAYER_ERROR,\n            url,\n            responseTime: loadTime,\n            method: 'GET',\n            status: getResponse.status,\n            retryable: getResponse.status !== 404\n          };\n        }\n      } catch (getError) {\n        clearTimeout(timeoutId);\n        const loadTime = Date.now() - startTime;\n        performanceMonitor.trackStreamLoadTime(Date.now());\n\n        // Enhanced error classification based on November 2025 standards\n        let errorType = StreamErrorTypes.NETWORK_ERROR;\n        let errorMessage = getError.message;\n        if (getError.name === 'AbortError' || getError.message.includes('timeout') || getError.message.includes('aborted')) {\n          errorType = StreamErrorTypes.TIMEOUT_ERROR;\n          errorMessage = 'Request timeout - server took too long to respond';\n        } else if (getError.message.includes('404') || getError.message.includes('Not Found')) {\n          errorType = StreamErrorTypes.CONTENT_NOT_FOUND;\n          errorMessage = 'Video not found on this server';\n        } else if (getError.message.includes('403') || getError.message.includes('Forbidden')) {\n          errorType = StreamErrorTypes.GEO_BLOCKED;\n          errorMessage = 'Content blocked in your region';\n        } else if (getError.message.includes('NetworkError') || getError.message.includes('Failed to fetch')) {\n          errorType = StreamErrorTypes.NETWORK_ERROR;\n          errorMessage = 'Network connection failed';\n        }\n        return {\n          available: false,\n          loadTime,\n          error: errorMessage,\n          errorType,\n          url,\n          responseTime: loadTime,\n          retryable: errorType !== StreamErrorTypes.CONTENT_NOT_FOUND\n        };\n      }\n    }\n  },\n  // Get performance metrics\n  getPerformanceReport: () => {\n    return performanceMonitor.generateReport();\n  },\n  // Test multiple sources and return the first working one\n  testMultipleSources: async (sources, options = {}) => {\n    const {\n      timeout = 8000,\n      maxConcurrent = 3\n    } = options;\n    const workingSources = [];\n    const failedSources = [];\n    console.log(`🔍 [DEBUG] Starting comprehensive source testing`);\n    console.log(`🔍 [DEBUG] Total sources: ${sources.length}, Timeout: ${timeout}ms, Max concurrent: ${maxConcurrent}`);\n\n    // Test sources in batches to avoid overwhelming servers\n    for (let i = 0; i < sources.length; i += maxConcurrent) {\n      const batch = sources.slice(i, i + maxConcurrent);\n      console.log(`🔍 [DEBUG] Testing batch ${Math.floor(i / maxConcurrent) + 1}/${Math.ceil(sources.length / maxConcurrent)}`);\n      const batchPromises = batch.map(async source => {\n        const startTime = Date.now();\n        try {\n          console.log(`🔍 [DEBUG] Testing: ${source.name || source.id} (${source.provider})`);\n          const result = await vidsrcApi.testStream(source.url, timeout);\n          const testTime = Date.now() - startTime;\n          console.log(`🔍 [DEBUG] Result: ${result.available ? '✅' : '❌'} ${source.name || source.id} (${testTime}ms)`);\n          return {\n            source,\n            result\n          };\n        } catch (error) {\n          const testTime = Date.now() - startTime;\n          console.log(`🔍 [DEBUG] Error: ❌ ${source.name || source.id} - ${error.message} (${testTime}ms)`);\n          return {\n            source,\n            result: {\n              available: false,\n              error: error.message,\n              errorType: 'TEST_ERROR'\n            }\n          };\n        }\n      });\n      const batchResults = await Promise.all(batchPromises);\n      batchResults.forEach(({\n        source,\n        result\n      }) => {\n        if (result.available) {\n          workingSources.push({\n            ...source,\n            testResult: result\n          });\n          console.log(`✅ [DEBUG] Working source found: ${source.name || source.id}`);\n        } else {\n          failedSources.push({\n            ...source,\n            testResult: result\n          });\n          console.log(`❌ [DEBUG] Failed source: ${source.name || source.id} - ${result.error || 'Unknown error'}`);\n        }\n      });\n    }\n    const successRate = sources.length > 0 ? workingSources.length / sources.length * 100 : 0;\n    console.log(`📊 [DEBUG] Testing complete: ${workingSources.length}/${sources.length} working (${successRate.toFixed(1)}%)`);\n    return {\n      working: workingSources,\n      failed: failedSources,\n      total: sources.length,\n      successRate\n    };\n  },\n  // Enhanced method to find the first working source quickly\n  findFirstWorkingSource: async (sources, options = {}) => {\n    const {\n      timeout = 5000,\n      maxConcurrent = 5\n    } = options;\n    console.log(`🔍 [DEBUG] Starting source testing for ${sources.length} sources`);\n    console.log(`🔍 [DEBUG] Timeout: ${timeout}ms, Max concurrent: ${maxConcurrent}`);\n\n    // Test sources in parallel batches\n    for (let i = 0; i < sources.length; i += maxConcurrent) {\n      const batch = sources.slice(i, i + maxConcurrent);\n      console.log(`🔍 [DEBUG] Testing batch ${Math.floor(i / maxConcurrent) + 1}: ${batch.map(s => s.name || s.id).join(', ')}`);\n      const batchPromises = batch.map(async source => {\n        const startTime = Date.now();\n        try {\n          console.log(`🔍 [DEBUG] Testing source: ${source.name || source.id} - ${source.url}`);\n          const result = await vidsrcApi.testStream(source.url, timeout);\n          const testTime = Date.now() - startTime;\n          console.log(`🔍 [DEBUG] Source ${source.name || source.id}: ${result.available ? '✅ AVAILABLE' : '❌ FAILED'} (${testTime}ms)`);\n          if (!result.available) {\n            console.log(`🔍 [DEBUG] Source ${source.name || source.id} failed: ${result.error || 'Unknown error'}`);\n          }\n          if (result.available) {\n            return {\n              source,\n              result,\n              success: true\n            };\n          }\n          return {\n            source,\n            result,\n            success: false\n          };\n        } catch (error) {\n          const testTime = Date.now() - startTime;\n          console.log(`🔍 [DEBUG] Source ${source.name || source.id} error: ${error.message} (${testTime}ms)`);\n          return {\n            source,\n            result: {\n              available: false,\n              error: error.message\n            },\n            success: false\n          };\n        }\n      });\n      const batchResults = await Promise.all(batchPromises);\n\n      // Return the first working source found\n      const workingSource = batchResults.find(result => result.success);\n      if (workingSource) {\n        console.log(`🎉 [DEBUG] Found working source: ${workingSource.source.name || workingSource.source.id}`);\n        console.log(`🎉 [DEBUG] URL: ${workingSource.source.url}`);\n        console.log(`🎉 [DEBUG] Provider: ${workingSource.source.provider}`);\n        return workingSource;\n      }\n    }\n    console.log(`❌ [DEBUG] No working sources found after testing all ${sources.length} sources`);\n    return null; // No working sources found\n  },\n  // Get best available source with automatic testing\n  getBestAvailableSource: async (tmdbId, type, season = null, episode = null, options = {}) => {\n    const {\n      testSources = true,\n      quality = 'auto'\n    } = options;\n\n    // Get all available sources\n    const sources = type === 'movie' ? vidsrcApi.getMovieSources(tmdbId, {\n      includeAlternatives: true,\n      quality\n    }) : vidsrcApi.getTVSources(tmdbId, season, episode, {\n      includeAlternatives: true,\n      quality\n    });\n    if (!testSources) {\n      return sources[0]; // Return first source without testing\n    }\n\n    // Test sources and return the first working one\n    const testResult = await vidsrcApi.testMultipleSources(sources);\n    if (testResult.working.length > 0) {\n      return testResult.working[0];\n    }\n\n    // If no sources work, return the primary source with error info\n    return {\n      ...sources[0],\n      testResult: {\n        available: false,\n        error: 'No working sources found',\n        errorType: 'ALL_SOURCES_FAILED'\n      }\n    };\n  },\n  // Reset fallback manager\n  resetFallbackManager: () => {\n    fallbackManager.reset();\n    performanceMonitor.startTracking();\n  },\n  // Get current fallback status\n  getFallbackStatus: () => {\n    return {\n      currentDomain: fallbackManager.getCurrentDomain(),\n      retryCount: fallbackManager.retryCount,\n      domainLevel: fallbackManager.domainLevel,\n      maxRetries: fallbackManager.maxRetries\n    };\n  },\n  // Manual source verification as backup when automatic testing fails\n  verifySourceManually: async (url, timeout = 10000) => {\n    console.log(`🔍 [Manual] Starting manual verification for: ${url}`);\n    return new Promise(resolve => {\n      const iframe = document.createElement('iframe');\n      iframe.src = url;\n      iframe.style.display = 'none';\n      iframe.sandbox = 'allow-same-origin allow-scripts allow-presentation';\n      const startTime = Date.now();\n      let hasLoaded = false;\n      let hasError = false;\n      const cleanup = () => {\n        if (iframe.parentNode) {\n          iframe.parentNode.removeChild(iframe);\n        }\n        clearTimeout(timeoutId);\n      };\n      const timeoutId = setTimeout(() => {\n        if (!hasLoaded && !hasError) {\n          console.log(`⏱️ [Manual] Manual verification timeout for: ${url}`);\n          cleanup();\n          resolve({\n            available: false,\n            error: 'Manual verification timeout',\n            errorType: 'TIMEOUT_ERROR',\n            method: 'manual-iframe',\n            loadTime: Date.now() - startTime\n          });\n        }\n      }, timeout);\n      iframe.onload = () => {\n        hasLoaded = true;\n        const loadTime = Date.now() - startTime;\n        console.log(`✅ [Manual] Manual verification success for: ${url} (${loadTime}ms)`);\n\n        // Additional check: try to access iframe content\n        try {\n          const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n          const hasVideoElement = iframeDoc.querySelector('video') !== null;\n          const hasPlayerContainer = iframeDoc.querySelector('.player, #player, [class*=\"player\"]') !== null;\n          const isErrorPage = iframeDoc.body && iframeDoc.body.textContent.includes('not found');\n          if (isErrorPage) {\n            cleanup();\n            resolve({\n              available: false,\n              error: 'Video not found (detected error page)',\n              errorType: 'CONTENT_NOT_FOUND',\n              method: 'manual-iframe',\n              loadTime,\n              hasVideoElement,\n              hasPlayerContainer\n            });\n          } else if (hasVideoElement || hasPlayerContainer) {\n            cleanup();\n            resolve({\n              available: true,\n              loadTime,\n              method: 'manual-iframe',\n              hasVideoElement,\n              hasPlayerContainer\n            });\n          } else {\n            // Give it a bit more time to load video content\n            setTimeout(() => {\n              try {\n                const finalDoc = iframe.contentDocument || iframe.contentWindow.document;\n                const finalVideoElement = finalDoc.querySelector('video') !== null;\n                const finalPlayerContainer = finalDoc.querySelector('.player, #player, [class*=\"player\"]') !== null;\n                cleanup();\n                resolve({\n                  available: finalVideoElement || finalPlayerContainer,\n                  loadTime: Date.now() - startTime,\n                  method: 'manual-iframe',\n                  hasVideoElement: finalVideoElement,\n                  hasPlayerContainer: finalPlayerContainer\n                });\n              } catch (e) {\n                cleanup();\n                resolve({\n                  available: true,\n                  // Assume it's working if we can't check content\n                  loadTime: Date.now() - startTime,\n                  method: 'manual-iframe',\n                  note: 'Could not verify content due to CORS, assuming available'\n                });\n              }\n            }, 2000);\n          }\n        } catch (e) {\n          // CORS restriction - assume it's working if it loaded\n          cleanup();\n          resolve({\n            available: true,\n            loadTime,\n            method: 'manual-iframe',\n            note: 'Could not verify content due to CORS, assuming available'\n          });\n        }\n      };\n      iframe.onerror = () => {\n        hasError = true;\n        const loadTime = Date.now() - startTime;\n        console.log(`❌ [Manual] Manual verification failed for: ${url} (${loadTime}ms)`);\n        cleanup();\n        resolve({\n          available: false,\n          error: 'Failed to load iframe',\n          errorType: 'NETWORK_ERROR',\n          method: 'manual-iframe',\n          loadTime\n        });\n      };\n      document.body.appendChild(iframe);\n    });\n  },\n  // Create secure iframe embed\n  createSecureEmbed: (streamData, options = {}) => {\n    const {\n      width = '100%',\n      height = '500',\n      autoplay = false,\n      muted = false,\n      controls = true,\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\n    } = options;\n    const embedUrl = streamData.url;\n    return {\n      iframe: `<iframe\n        src=\"${embedUrl}\"\n        width=\"${width}\"\n        height=\"${height}\"\n        frameborder=\"0\"\n        allowfullscreen\n        ${autoplay ? 'autoplay' : ''}\n        ${muted ? 'muted' : ''}\n        ${controls ? '' : 'controls=\"false\"'}\n        sandbox=\"${sandbox}\"\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\n        referrerpolicy=\"strict-origin-when-cross-origin\"\n        loading=\"lazy\"\n      ></iframe>`,\n      url: embedUrl,\n      type: streamData.type,\n      provider: streamData.provider,\n      security: {\n        sandbox,\n        referrerPolicy: 'strict-origin-when-cross-origin',\n        cspCompliant: true\n      }\n    };\n  }\n};\n\n// Helper function to create iframe embed code\nexport const createEmbedCode = (streamData, options = {}) => {\n  const {\n    width = '100%',\n    height = '500',\n    autoplay = false,\n    muted = false,\n    controls = true\n  } = options;\n  const embedUrl = streamData.url;\n  return {\n    iframe: `<iframe\n      src=\"${embedUrl}\"\n      width=\"${width}\"\n      height=\"${height}\"\n      frameborder=\"0\"\n      allowfullscreen\n      ${autoplay ? 'autoplay' : ''}\n      ${muted ? 'muted' : ''}\n      ${controls ? '' : 'controls=\"false\"'}\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\n    ></iframe>`,\n    url: embedUrl,\n    type: streamData.type,\n    provider: streamData.provider\n  };\n};\n\n// Error handling for streaming\nexport const handleStreamError = (error, fallbackSources = []) => {\n  console.error('Streaming error:', error);\n  if (fallbackSources.length > 0) {\n    return {\n      success: false,\n      error: error.message,\n      fallback: fallbackSources[0],\n      hasFallback: true\n    };\n  }\n  return {\n    success: false,\n    error: error.message,\n    hasFallback: false\n  };\n};\nexport default vidsrcApi;\n\n// Test function to verify video streaming functionality\nexport const testVideoStreaming = async () => {\n  console.log('🧪 Testing Video Streaming Functionality...');\n\n  // Test data - specific movies mentioned by user\n  const testMovies = [{\n    id: '278',\n    name: 'Shawshank Redemption'\n  }, {\n    id: '155',\n    name: 'The Dark Knight'\n  }, {\n    id: '550',\n    name: 'Fight Club'\n  }];\n  const testTVId = '1399'; // Game of Thrones\n\n  try {\n    // Test 1: Get movie sources for each test movie\n    console.log('\\n📽️ Testing Movie Sources...');\n    for (const movie of testMovies) {\n      const movieSources = vidsrcApi.getMovieSources(movie.id, {\n        includeAlternatives: true\n      });\n      console.log(`Found ${movieSources.length} sources for ${movie.name} (${movie.id})`);\n    }\n\n    // Test 2: Get TV sources\n    console.log('\\n📺 Testing TV Sources...');\n    const tvSources = vidsrcApi.getTVSources(testTVId, 1, 1, {\n      includeAlternatives: true\n    });\n    console.log(`Found ${tvSources.length} TV sources`);\n\n    // Test 3: Test specific movies for availability\n    console.log('\\n🔍 Testing Specific Movie Availability...');\n    for (const movie of testMovies) {\n      console.log(`\\n--- Testing ${movie.name} (${movie.id}) ---`);\n\n      // Test the primary source\n      const primaryStream = vidsrcApi.getMovieStream(movie.id, {\n        quality: '1080p'\n      });\n      console.log(`Primary URL: ${primaryStream.url}`);\n      try {\n        const result = await vidsrcApi.testStream(primaryStream.url, 5000);\n        console.log(`✅ Primary: ${result.available ? 'Available' : 'Failed'} (${result.loadTime}ms)`);\n        if (result.available) {\n          console.log(`🎉 SUCCESS: ${movie.name} is working!`);\n        } else {\n          console.log(`❌ Primary failed, trying alternatives...`);\n\n          // Try alternative sources\n          const altUrls = vidsrcApi.tryAlternativeUrls(movie.id, 'movie');\n          console.log(`Found ${altUrls.length} alternative URLs`);\n          for (let i = 0; i < Math.min(3, altUrls.length); i++) {\n            try {\n              const altResult = await vidsrcApi.testStream(altUrls[i], 3000);\n              console.log(`  Alt ${i + 1}: ${altResult.available ? 'Available' : 'Failed'} (${altResult.loadTime}ms)`);\n              if (altResult.available) {\n                console.log(`  🎉 Alternative ${i + 1} works!`);\n                break;\n              }\n            } catch (altError) {\n              console.log(`  Alt ${i + 1}: Error - ${altError.message}`);\n            }\n          }\n        }\n      } catch (error) {\n        console.log(`❌ Error testing ${movie.name}: ${error.message}`);\n      }\n    }\n\n    // Test 4: Test fallback system\n    console.log('\\n🔄 Testing Fallback System...');\n    const fallbackStatus = vidsrcApi.getFallbackStatus();\n    console.log('Fallback Status:', fallbackStatus);\n    console.log('\\n✅ Video streaming test completed!');\n    return {\n      success: true,\n      testedMovies: testMovies.length,\n      tvSources: tvSources.length\n    };\n  } catch (error) {\n    console.error('❌ Video streaming test failed:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["VIDSRC_DOMAINS","primary","fallbacks","QualityOptions","AUTO","Q4K","Q1080P","Q720P","Q480P","Q360P","StreamErrorTypes","NETWORK_ERROR","TIMEOUT_ERROR","PLAYER_ERROR","CONTENT_NOT_FOUND","GEO_BLOCKED","QUALITY_UNAVAILABLE","vidsrcApi","getMovieStream","tmdbId","options","quality","url","type","provider","embeddable","getTVStream","season","episode","getErrorStream","id","error","message","getTVSources","includeAlternatives","sources","qualities","forEach","q","index","push","name","toUpperCase","fallbackManager","getNextUrl","domain","backup","checkAvailability","available","getQualityInfo","default","note","getSupportedRegions","regions","handleStreamError","context","performanceMonitor","trackError","recoveredUrl","errorRecoveryManager","recover","recordSuccess","success","recovered","recoveryError","recordFailure","fallbackExhausted","getQualityOptions","contentType","baseQualities","unshift","testStream","timeout","startTime","Date","now","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","signal","headers","clearTimeout","loadTime","trackStreamLoadTime","ok","status","responseTime","statusText","errorType","retryable","headError","getResponse","responseText","text","contentLength","length","hasVideoContent","isErrorPage","includes","getError","errorMessage","getPerformanceReport","generateReport","testMultipleSources","maxConcurrent","workingSources","failedSources","console","log","i","batch","slice","Math","floor","ceil","batchPromises","map","source","result","testTime","batchResults","Promise","all","testResult","successRate","toFixed","working","failed","total","findFirstWorkingSource","s","join","workingSource","find","getBestAvailableSource","testSources","getMovieSources","resetFallbackManager","reset","startTracking","getFallbackStatus","currentDomain","getCurrentDomain","retryCount","domainLevel","maxRetries","verifySourceManually","resolve","iframe","document","createElement","src","style","display","sandbox","hasLoaded","hasError","cleanup","parentNode","removeChild","onload","iframeDoc","contentDocument","contentWindow","hasVideoElement","querySelector","hasPlayerContainer","body","textContent","finalDoc","finalVideoElement","finalPlayerContainer","e","onerror","appendChild","createSecureEmbed","streamData","width","height","autoplay","muted","controls","embedUrl","security","referrerPolicy","cspCompliant","createEmbedCode","fallbackSources","fallback","hasFallback","testVideoStreaming","testMovies","testTVId","movie","movieSources","tvSources","primaryStream","altUrls","tryAlternativeUrls","min","altResult","altError","fallbackStatus","testedMovies"],"sources":["c:/Users/VASU/Desktop/task/src/services/vidsrcApi.js"],"sourcesContent":["// VidSrc API service for streaming integration\r\n// No API key required - uses TMDB IDs directly\r\n\r\n// Simplified domain configuration - vidsrc.net as primary source\r\nconst VIDSRC_DOMAINS = {\r\n  primary: 'https://vidsrc.net/embed',\r\n  fallbacks: [\r\n    'https://vidsrc.to/embed',\r\n    'https://vidsrc.cc/embed'\r\n  ]\r\n};\r\n\r\n// Quality options for streaming\r\nconst QualityOptions = {\r\n  AUTO: 'auto',\r\n  Q4K: '4k',\r\n  Q1080P: '1080p',\r\n  Q720P: '720p',\r\n  Q480P: '480p',\r\n  Q360P: '360p'\r\n};\r\n\r\n// Error types for better error handling\r\nconst StreamErrorTypes = {\r\n  NETWORK_ERROR: 'NETWORK_ERROR',\r\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\r\n  PLAYER_ERROR: 'PLAYER_ERROR',\r\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\r\n  GEO_BLOCKED: 'GEO_BLOCKED',\r\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const vidsrcApi = {\r\n  // Simple streaming URL generation using vidsrc.net\r\n  getMovieStream: (tmdbId, options = {}) => {\r\n    const { quality = 'auto' } = options;\r\n\r\n    const url = `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n    return {\r\n      url,\r\n      type: 'movie',\r\n      provider: 'vidsrc',\r\n      embeddable: true,\r\n      quality\r\n    };\r\n  },\r\n\r\n  // Simple TV streaming using vidsrc.net\r\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\r\n    const { quality = 'auto' } = options;\r\n\r\n    const url = `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n    return {\r\n      url,\r\n      type: 'tv',\r\n      provider: 'vidsrc',\r\n      embeddable: true,\r\n      season,\r\n      episode,\r\n      quality\r\n    };\r\n  },\r\n\r\n  // Get error stream for failed requests\r\n  getErrorStream: (type, id, error, season = null, episode = null) => {\r\n    return {\r\n      url: '',\r\n      type,\r\n      provider: 'error',\r\n      embeddable: false,\r\n      error: error.message,\r\n      season,\r\n      episode\r\n    };\r\n  },\r\n\r\n\r\n\r\n  // Enhanced TV sources with quality options\r\n  getTVSources: (tmdbId, season = 1, episode = 1, options = {}) => {\r\n    const { includeAlternatives = true, quality = 'auto' } = options;\r\n    const sources = [];\r\n\r\n    // Primary VidSrc sources with different qualities\r\n    const qualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\r\n\r\n    qualities.forEach((q, index) => {\r\n      sources.push({\r\n        id: `vidsrc-${q}`,\r\n        name: `VidSrc ${q.toUpperCase()}`,\r\n        url: fallbackManager.getNextUrl('tv', tmdbId, season, episode, q),\r\n        embeddable: true,\r\n        quality: q,\r\n        provider: 'vidsrc',\r\n        season,\r\n        episode,\r\n        primary: index === 0\r\n      });\r\n    });\r\n\r\n    // Backup domains for primary quality\r\n    if (includeAlternatives) {\r\n      VIDSRC_DOMAINS.fallbacks.forEach((domain, index) => {\r\n        sources.push({\r\n          id: `vidsrc-backup-${index}`,\r\n          name: `VidSrc Backup ${index + 1}`,\r\n          url: `${domain}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`,\r\n          embeddable: true,\r\n          quality: quality,\r\n          provider: 'vidsrc',\r\n          season,\r\n          episode,\r\n          backup: true\r\n        });\r\n      });\r\n    }\r\n\r\n    return sources;\r\n  },\r\n\r\n  // Check if streaming is available for a movie\r\n  checkAvailability: async (tmdbId, type = 'movie') => {\r\n    try {\r\n      // VidSrc doesn't have a formal availability check API\r\n      // We assume content is available if it has a valid TMDB ID\r\n      return {\r\n        available: true,\r\n        provider: 'vidsrc',\r\n        embeddable: true,\r\n        message: 'Streaming available via VidSrc'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        available: false,\r\n        provider: 'vidsrc',\r\n        embeddable: false,\r\n        message: 'Streaming temporarily unavailable'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get streaming quality information\r\n  getQualityInfo: () => {\r\n    return {\r\n      default: '1080p',\r\n      available: ['720p', '1080p', '4K'],\r\n      note: 'Quality automatically adjusts based on connection speed'\r\n    };\r\n  },\r\n\r\n  // Get supported regions\r\n  getSupportedRegions: () => {\r\n    return {\r\n      regionsr\n      note: 'VidSrc works globally with no regional restrictions'\r\n    };\r\n  },\r\n\r\n  // Enhanced error handling with recovery\r\n  handleStreamError: async (error, context) => {\r\n    performanceMonitor.trackError(error);\r\n\r\n    try {\r\n      const recoveredUrl = await errorRecoveryManager.recover(error, context);\r\n      fallbackManager.recordSuccess();\r\n      return {\r\n        success: true,\r\n        url: recoveredUrl,\r\n        recovered: true\r\n      };\r\n    } catch (recoveryError) {\r\n      fallbackManager.recordFailure();\r\n      return {\r\n        success: false,\r\n        error: recoveryError.message,\r\n        fallbackExhausted: true\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get available quality options\r\n  getQualityOptions: (contentType = 'movie') => {\r\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\r\n\r\n    if (contentType === 'movie') {\r\n      baseQualities.unshift(QualityOptions.Q4K);\r\n    }\r\n\r\n    return baseQualities;\r\n  },\r\n\r\n  // Test stream availability with enhanced error handling (November 2025)\r\n  testStream: async (url, timeout = 8000) => {\r\n    const startTime = Date.now();\r\n\r\n    // Create a timeout promise with AbortController for better control\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n\r\n    try {\r\n      // Try HEAD request first (more efficient)\r\n      const response = await fetch(url, {\r\n        method: 'HEAD',\r\n        signal: controller.signal,\r\n        headers: {\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n        }\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n      const loadTime = Date.now() - startTime;\r\n      performanceMonitor.trackStreamLoadTime(Date.now());\r\n\r\n      // Check if response is successful and content exists\r\n      if (response.ok && response.status < 400) {\r\n        return {\r\n          available: true,\r\n          loadTime,\r\n          url,\r\n          responseTime: loadTime,\r\n          method: 'HEAD',\r\n          status: response.status\r\n        };\r\n      } else {\r\n        return {\r\n          available: false,\r\n          loadTime,\r\n          error: `HTTP ${response.status}: ${response.statusText}`,\r\n          errorType: response.status === 404 ? StreamErrorTypes.CONTENT_NOT_FOUND : StreamErrorTypes.PLAYER_ERROR,\r\n          url,\r\n          responseTime: loadTime,\r\n          method: 'HEAD',\r\n          status: response.status,\r\n          retryable: response.status !== 404\r\n        };\r\n      }\r\n    } catch (headError) {\r\n      try {\r\n        // If HEAD fails, try GET request to actually check content\r\n        const getResponse = await fetch(url, {\r\n          method: 'GET',\r\n          signal: controller.signal,\r\n          headers: {\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n          }\r\n        });\r\n\r\n        clearTimeout(timeoutId);\r\n        const loadTime = Date.now() - startTime;\r\n        performanceMonitor.trackStreamLoadTime(Date.now());\r\n\r\n        // Check if response is successful\r\n        if (getResponse.ok && getResponse.status < 400) {\r\n          // Try to read response text to verify it's not an error page\r\n          const responseText = await getResponse.text();\r\n          const contentLength = responseText.length;\r\n\r\n          // Basic checks for video availability\r\n          const hasVideoContent = contentLength > 1000; // Minimum content length\r\n          const isErrorPage = responseText.includes('not found') ||\r\n                             responseText.includes('video not available') ||\r\n                             responseText.includes('error') ||\r\n                             responseText.includes('404') ||\r\n                             responseText.includes('Video not found');\r\n\r\n          if (hasVideoContent && !isErrorPage) {\r\n            return {\r\n              available: true,\r\n              loadTime,\r\n              url,\r\n              responseTime: loadTime,\r\n              method: 'GET',\r\n              status: getResponse.status,\r\n              contentLength\r\n            };\r\n          } else {\r\n            return {\r\n              available: false,\r\n              loadTime,\r\n              error: isErrorPage ? 'Video not found on server' : 'Insufficient content or error page detected',\r\n              errorType: StreamErrorTypes.CONTENT_NOT_FOUND,\r\n              url,\r\n              responseTime: loadTime,\r\n              method: 'GET',\r\n              status: getResponse.status,\r\n              contentLength,\r\n              retryable: false\r\n            };\r\n          }\r\n        } else {\r\n          return {\r\n            available: false,\r\n            loadTime,\r\n            error: `HTTP ${getResponse.status}: ${getResponse.statusText}`,\r\n            errorType: getResponse.status === 404 ? StreamErrorTypes.CONTENT_NOT_FOUND : StreamErrorTypes.PLAYER_ERROR,\r\n            url,\r\n            responseTime: loadTime,\r\n            method: 'GET',\r\n            status: getResponse.status,\r\n            retryable: getResponse.status !== 404\r\n          };\r\n        }\r\n      } catch (getError) {\r\n        clearTimeout(timeoutId);\r\n        const loadTime = Date.now() - startTime;\r\n        performanceMonitor.trackStreamLoadTime(Date.now());\r\n\r\n        // Enhanced error classification based on November 2025 standards\r\n        let errorType = StreamErrorTypes.NETWORK_ERROR;\r\n        let errorMessage = getError.message;\r\n\r\n        if (getError.name === 'AbortError' || getError.message.includes('timeout') || getError.message.includes('aborted')) {\r\n          errorType = StreamErrorTypes.TIMEOUT_ERROR;\r\n          errorMessage = 'Request timeout - server took too long to respond';\r\n        } else if (getError.message.includes('404') || getError.message.includes('Not Found')) {\r\n          errorType = StreamErrorTypes.CONTENT_NOT_FOUND;\r\n          errorMessage = 'Video not found on this server';\r\n        } else if (getError.message.includes('403') || getError.message.includes('Forbidden')) {\r\n          errorType = StreamErrorTypes.GEO_BLOCKED;\r\n          errorMessage = 'Content blocked in your region';\r\n        } else if (getError.message.includes('NetworkError') || getError.message.includes('Failed to fetch')) {\r\n          errorType = StreamErrorTypes.NETWORK_ERROR;\r\n          errorMessage = 'Network connection failed';\r\n        }\r\n\r\n        return {\r\n          available: false,\r\n          loadTime,\r\n          error: errorMessage,\r\n          errorType,\r\n          url,\r\n          responseTime: loadTime,\r\n          retryable: errorType !== StreamErrorTypes.CONTENT_NOT_FOUND\r\n        };\r\n      }\r\n    }\r\n  },\r\n\r\n  // Get performance metrics\r\n  getPerformanceReport: () => {\r\n    return performanceMonitor.generateReport();\r\n  },\r\n\r\n  // Test multiple sources and return the first working one\r\n  testMultipleSources: async (sources, options = {}) => {\r\n    const { timeout = 8000, maxConcurrent = 3 } = options;\r\n    const workingSources = [];\r\n    const failedSources = [];\r\n\r\n    console.log(`🔍 [DEBUG] Starting comprehensive source testing`);\r\n    console.log(`🔍 [DEBUG] Total sources: ${sources.length}, Timeout: ${timeout}ms, Max concurrent: ${maxConcurrent}`);\r\n\r\n    // Test sources in batches to avoid overwhelming servers\r\n    for (let i = 0; i < sources.length; i += maxConcurrent) {\r\n      const batch = sources.slice(i, i + maxConcurrent);\r\n      console.log(`🔍 [DEBUG] Testing batch ${Math.floor(i/maxConcurrent) + 1}/${Math.ceil(sources.length/maxConcurrent)}`);\r\n\r\n      const batchPromises = batch.map(async (source) => {\r\n        const startTime = Date.now();\r\n        try {\r\n          console.log(`🔍 [DEBUG] Testing: ${source.name || source.id} (${source.provider})`);\r\n          const result = await vidsrcApi.testStream(source.url, timeout);\r\n          const testTime = Date.now() - startTime;\r\n\r\n          console.log(`🔍 [DEBUG] Result: ${result.available ? '✅' : '❌'} ${source.name || source.id} (${testTime}ms)`);\r\n\r\n          return { source, result };\r\n        } catch (error) {\r\n          const testTime = Date.now() - startTime;\r\n          console.log(`🔍 [DEBUG] Error: ❌ ${source.name || source.id} - ${error.message} (${testTime}ms)`);\r\n          return {\r\n            source,\r\n            result: {\r\n              available: false,\r\n              error: error.message,\r\n              errorType: 'TEST_ERROR'\r\n            }\r\n          };\r\n        }\r\n      });\r\n\r\n      const batchResults = await Promise.all(batchPromises);\r\n\r\n      batchResults.forEach(({ source, result }) => {\r\n        if (result.available) {\r\n          workingSources.push({ ...source, testResult: result });\r\n          console.log(`✅ [DEBUG] Working source found: ${source.name || source.id}`);\r\n        } else {\r\n          failedSources.push({ ...source, testResult: result });\r\n          console.log(`❌ [DEBUG] Failed source: ${source.name || source.id} - ${result.error || 'Unknown error'}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    const successRate = sources.length > 0 ? (workingSources.length / sources.length) * 100 : 0;\r\n    console.log(`📊 [DEBUG] Testing complete: ${workingSources.length}/${sources.length} working (${successRate.toFixed(1)}%)`);\r\n\r\n    return {\r\n      working: workingSources,\r\n      failed: failedSources,\r\n      total: sources.length,\r\n      successRate\r\n    };\r\n  },\r\n\r\n  // Enhanced method to find the first working source quickly\r\n  findFirstWorkingSource: async (sources, options = {}) => {\r\n    const { timeout = 5000, maxConcurrent = 5 } = options;\r\n\r\n    console.log(`🔍 [DEBUG] Starting source testing for ${sources.length} sources`);\r\n    console.log(`🔍 [DEBUG] Timeout: ${timeout}ms, Max concurrent: ${maxConcurrent}`);\r\n\r\n    // Test sources in parallel batches\r\n    for (let i = 0; i < sources.length; i += maxConcurrent) {\r\n      const batch = sources.slice(i, i + maxConcurrent);\r\n      console.log(`🔍 [DEBUG] Testing batch ${Math.floor(i/maxConcurrent) + 1}: ${batch.map(s => s.name || s.id).join(', ')}`);\r\n\r\n      const batchPromises = batch.map(async (source) => {\r\n        const startTime = Date.now();\r\n        try {\r\n          console.log(`🔍 [DEBUG] Testing source: ${source.name || source.id} - ${source.url}`);\r\n          const result = await vidsrcApi.testStream(source.url, timeout);\r\n\r\n          const testTime = Date.now() - startTime;\r\n          console.log(`🔍 [DEBUG] Source ${source.name || source.id}: ${result.available ? '✅ AVAILABLE' : '❌ FAILED'} (${testTime}ms)`);\r\n\r\n          if (!result.available) {\r\n            console.log(`🔍 [DEBUG] Source ${source.name || source.id} failed: ${result.error || 'Unknown error'}`);\r\n          }\r\n\r\n          if (result.available) {\r\n            return { source, result, success: true };\r\n          }\r\n          return { source, result, success: false };\r\n        } catch (error) {\r\n          const testTime = Date.now() - startTime;\r\n          console.log(`🔍 [DEBUG] Source ${source.name || source.id} error: ${error.message} (${testTime}ms)`);\r\n          return { source, result: { available: false, error: error.message }, success: false };\r\n        }\r\n      });\r\n\r\n      const batchResults = await Promise.all(batchPromises);\r\n\r\n      // Return the first working source found\r\n      const workingSource = batchResults.find(result => result.success);\r\n      if (workingSource) {\r\n        console.log(`🎉 [DEBUG] Found working source: ${workingSource.source.name || workingSource.source.id}`);\r\n        console.log(`🎉 [DEBUG] URL: ${workingSource.source.url}`);\r\n        console.log(`🎉 [DEBUG] Provider: ${workingSource.source.provider}`);\r\n        return workingSource;\r\n      }\r\n    }\r\n\r\n    console.log(`❌ [DEBUG] No working sources found after testing all ${sources.length} sources`);\r\n    return null; // No working sources found\r\n  },\r\n\r\n  // Get best available source with automatic testing\r\n  getBestAvailableSource: async (tmdbId, type, season = null, episode = null, options = {}) => {\r\n    const { testSources = true, quality = 'auto' } = options;\r\n\r\n    // Get all available sources\r\n    const sources = type === 'movie'\r\n      ? vidsrcApi.getMovieSources(tmdbId, { includeAlternatives: true, quality })\r\n      : vidsrcApi.getTVSources(tmdbId, season, episode, { includeAlternatives: true, quality });\r\n\r\n    if (!testSources) {\r\n      return sources[0]; // Return first source without testing\r\n    }\r\n\r\n    // Test sources and return the first working one\r\n    const testResult = await vidsrcApi.testMultipleSources(sources);\r\n\r\n    if (testResult.working.length > 0) {\r\n      return testResult.working[0];\r\n    }\r\n\r\n    // If no sources work, return the primary source with error info\r\n    return {\r\n      ...sources[0],\r\n      testResult: {\r\n        available: false,\r\n        error: 'No working sources found',\r\n        errorType: 'ALL_SOURCES_FAILED'\r\n      }\r\n    };\r\n  },\r\n\r\n  // Reset fallback manager\r\n  resetFallbackManager: () => {\r\n    fallbackManager.reset();\r\n    performanceMonitor.startTracking();\r\n  },\r\n\r\n  // Get current fallback status\r\n  getFallbackStatus: () => {\r\n    return {\r\n      currentDomain: fallbackManager.getCurrentDomain(),\r\n      retryCount: fallbackManager.retryCount,\r\n      domainLevel: fallbackManager.domainLevel,\r\n      maxRetries: fallbackManager.maxRetries\r\n    };\r\n  },\r\n\r\n  // Manual source verification as backup when automatic testing fails\r\n  verifySourceManually: async (url, timeout = 10000) => {\r\n    console.log(`🔍 [Manual] Starting manual verification for: ${url}`);\r\n\r\n    return new Promise((resolve) => {\r\n      const iframe = document.createElement('iframe');\r\n      iframe.src = url;\r\n      iframe.style.display = 'none';\r\n      iframe.sandbox = 'allow-same-origin allow-scripts allow-presentation';\r\n\r\n      const startTime = Date.now();\r\n      let hasLoaded = false;\r\n      let hasError = false;\r\n\r\n      const cleanup = () => {\r\n        if (iframe.parentNode) {\r\n          iframe.parentNode.removeChild(iframe);\r\n        }\r\n        clearTimeout(timeoutId);\r\n      };\r\n\r\n      const timeoutId = setTimeout(() => {\r\n        if (!hasLoaded && !hasError) {\r\n          console.log(`⏱️ [Manual] Manual verification timeout for: ${url}`);\r\n          cleanup();\r\n          resolve({\r\n            available: false,\r\n            error: 'Manual verification timeout',\r\n            errorType: 'TIMEOUT_ERROR',\r\n            method: 'manual-iframe',\r\n            loadTime: Date.now() - startTime\r\n          });\r\n        }\r\n      }, timeout);\r\n\r\n      iframe.onload = () => {\r\n        hasLoaded = true;\r\n        const loadTime = Date.now() - startTime;\r\n        console.log(`✅ [Manual] Manual verification success for: ${url} (${loadTime}ms)`);\r\n\r\n        // Additional check: try to access iframe content\r\n        try {\r\n          const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\r\n          const hasVideoElement = iframeDoc.querySelector('video') !== null;\r\n          const hasPlayerContainer = iframeDoc.querySelector('.player, #player, [class*=\"player\"]') !== null;\r\n          const isErrorPage = iframeDoc.body && iframeDoc.body.textContent.includes('not found');\r\n\r\n          if (isErrorPage) {\r\n            cleanup();\r\n            resolve({\r\n              available: false,\r\n              error: 'Video not found (detected error page)',\r\n              errorType: 'CONTENT_NOT_FOUND',\r\n              method: 'manual-iframe',\r\n              loadTime,\r\n              hasVideoElement,\r\n              hasPlayerContainer\r\n            });\r\n          } else if (hasVideoElement || hasPlayerContainer) {\r\n            cleanup();\r\n            resolve({\r\n              available: true,\r\n              loadTime,\r\n              method: 'manual-iframe',\r\n              hasVideoElement,\r\n              hasPlayerContainer\r\n            });\r\n          } else {\r\n            // Give it a bit more time to load video content\r\n            setTimeout(() => {\r\n              try {\r\n                const finalDoc = iframe.contentDocument || iframe.contentWindow.document;\r\n                const finalVideoElement = finalDoc.querySelector('video') !== null;\r\n                const finalPlayerContainer = finalDoc.querySelector('.player, #player, [class*=\"player\"]') !== null;\r\n\r\n                cleanup();\r\n                resolve({\r\n                  available: finalVideoElement || finalPlayerContainer,\r\n                  loadTime: Date.now() - startTime,\r\n                  method: 'manual-iframe',\r\n                  hasVideoElement: finalVideoElement,\r\n                  hasPlayerContainer: finalPlayerContainer\r\n                });\r\n              } catch (e) {\r\n                cleanup();\r\n                resolve({\r\n                  available: true, // Assume it's working if we can't check content\r\n                  loadTime: Date.now() - startTime,\r\n                  method: 'manual-iframe',\r\n                  note: 'Could not verify content due to CORS, assuming available'\r\n                });\r\n              }\r\n            }, 2000);\r\n          }\r\n        } catch (e) {\r\n          // CORS restriction - assume it's working if it loaded\r\n          cleanup();\r\n          resolve({\r\n            available: true,\r\n            loadTime,\r\n            method: 'manual-iframe',\r\n            note: 'Could not verify content due to CORS, assuming available'\r\n          });\r\n        }\r\n      };\r\n\r\n      iframe.onerror = () => {\r\n        hasError = true;\r\n        const loadTime = Date.now() - startTime;\r\n        console.log(`❌ [Manual] Manual verification failed for: ${url} (${loadTime}ms)`);\r\n        cleanup();\r\n        resolve({\r\n          available: false,\r\n          error: 'Failed to load iframe',\r\n          errorType: 'NETWORK_ERROR',\r\n          method: 'manual-iframe',\r\n          loadTime\r\n        });\r\n      };\r\n\r\n      document.body.appendChild(iframe);\r\n    });\r\n  },\r\n\r\n  // Create secure iframe embed\r\n  createSecureEmbed: (streamData, options = {}) => {\r\n    const {\r\n      width = '100%',\r\n      height = '500',\r\n      autoplay = false,\r\n      muted = false,\r\n      controls = true,\r\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\r\n    } = options;\r\n\r\n    const embedUrl = streamData.url;\r\n\r\n    return {\r\n      iframe: `<iframe\r\n        src=\"${embedUrl}\"\r\n        width=\"${width}\"\r\n        height=\"${height}\"\r\n        frameborder=\"0\"\r\n        allowfullscreen\r\n        ${autoplay ? 'autoplay' : ''}\r\n        ${muted ? 'muted' : ''}\r\n        ${controls ? '' : 'controls=\"false\"'}\r\n        sandbox=\"${sandbox}\"\r\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\r\n        referrerpolicy=\"strict-origin-when-cross-origin\"\r\n        loading=\"lazy\"\r\n      ></iframe>`,\r\n      url: embedUrl,\r\n      type: streamData.type,\r\n      provider: streamData.provider,\r\n      security: {\r\n        sandbox,\r\n        referrerPolicy: 'strict-origin-when-cross-origin',\r\n        cspCompliant: true\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to create iframe embed code\r\nexport const createEmbedCode = (streamData, options = {}) => {\r\n  const {\r\n    width = '100%',\r\n    height = '500',\r\n    autoplay = false,\r\n    muted = false,\r\n    controls = true\r\n  } = options;\r\n\r\n  const embedUrl = streamData.url;\r\n\r\n  return {\r\n    iframe: `<iframe\r\n      src=\"${embedUrl}\"\r\n      width=\"${width}\"\r\n      height=\"${height}\"\r\n      frameborder=\"0\"\r\n      allowfullscreen\r\n      ${autoplay ? 'autoplay' : ''}\r\n      ${muted ? 'muted' : ''}\r\n      ${controls ? '' : 'controls=\"false\"'}\r\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\r\n    ></iframe>`,\r\n    url: embedUrl,\r\n    type: streamData.type,\r\n    provider: streamData.provider\r\n  };\r\n};\r\n\r\n// Error handling for streaming\r\nexport const handleStreamError = (error, fallbackSources = []) => {\r\n  console.error('Streaming error:', error);\r\n\r\n  if (fallbackSources.length > 0) {\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      fallback: fallbackSources[0],\r\n      hasFallback: true\r\n    };\r\n  }\r\n\r\n  return {\r\n    success: false,\r\n    error: error.message,\r\n    hasFallback: false\r\n  };\r\n};\r\n\r\nexport default vidsrcApi;\r\n\r\n// Test function to verify video streaming functionality\r\nexport const testVideoStreaming = async () => {\r\n  console.log('🧪 Testing Video Streaming Functionality...');\r\n\r\n  // Test data - specific movies mentioned by user\r\n  const testMovies = [\r\n    { id: '278', name: 'Shawshank Redemption' },\r\n    { id: '155', name: 'The Dark Knight' },\r\n    { id: '550', name: 'Fight Club' }\r\n  ];\r\n  const testTVId = '1399'; // Game of Thrones\r\n\r\n  try {\r\n    // Test 1: Get movie sources for each test movie\r\n    console.log('\\n📽️ Testing Movie Sources...');\r\n    for (const movie of testMovies) {\r\n      const movieSources = vidsrcApi.getMovieSources(movie.id, { includeAlternatives: true });\r\n      console.log(`Found ${movieSources.length} sources for ${movie.name} (${movie.id})`);\r\n    }\r\n\r\n    // Test 2: Get TV sources\r\n    console.log('\\n📺 Testing TV Sources...');\r\n    const tvSources = vidsrcApi.getTVSources(testTVId, 1, 1, { includeAlternatives: true });\r\n    console.log(`Found ${tvSources.length} TV sources`);\r\n\r\n    // Test 3: Test specific movies for availability\r\n    console.log('\\n🔍 Testing Specific Movie Availability...');\r\n    for (const movie of testMovies) {\r\n      console.log(`\\n--- Testing ${movie.name} (${movie.id}) ---`);\r\n\r\n      // Test the primary source\r\n      const primaryStream = vidsrcApi.getMovieStream(movie.id, { quality: '1080p' });\r\n      console.log(`Primary URL: ${primaryStream.url}`);\r\n\r\n      try {\r\n        const result = await vidsrcApi.testStream(primaryStream.url, 5000);\r\n        console.log(`✅ Primary: ${result.available ? 'Available' : 'Failed'} (${result.loadTime}ms)`);\r\n\r\n        if (result.available) {\r\n          console.log(`🎉 SUCCESS: ${movie.name} is working!`);\r\n        } else {\r\n          console.log(`❌ Primary failed, trying alternatives...`);\r\n\r\n          // Try alternative sources\r\n          const altUrls = vidsrcApi.tryAlternativeUrls(movie.id, 'movie');\r\n          console.log(`Found ${altUrls.length} alternative URLs`);\r\n\r\n          for (let i = 0; i < Math.min(3, altUrls.length); i++) {\r\n            try {\r\n              const altResult = await vidsrcApi.testStream(altUrls[i], 3000);\r\n              console.log(`  Alt ${i + 1}: ${altResult.available ? 'Available' : 'Failed'} (${altResult.loadTime}ms)`);\r\n              if (altResult.available) {\r\n                console.log(`  🎉 Alternative ${i + 1} works!`);\r\n                break;\r\n              }\r\n            } catch (altError) {\r\n              console.log(`  Alt ${i + 1}: Error - ${altError.message}`);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(`❌ Error testing ${movie.name}: ${error.message}`);\r\n      }\r\n    }\r\n\r\n    // Test 4: Test fallback system\r\n    console.log('\\n🔄 Testing Fallback System...');\r\n    const fallbackStatus = vidsrcApi.getFallbackStatus();\r\n    console.log('Fallback Status:', fallbackStatus);\r\n\r\n    console.log('\\n✅ Video streaming test completed!');\r\n    return {\r\n      success: true,\r\n      testedMovies: testMovies.length,\r\n      tvSources: tvSources.length\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('❌ Video streaming test failed:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}