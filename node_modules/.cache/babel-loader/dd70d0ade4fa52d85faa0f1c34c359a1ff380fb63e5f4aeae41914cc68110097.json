{"ast":null,"code":"// VidSrc API service for streaming integration\n// No API key required - uses TMDB IDs directly\n\n// Enhanced domain configuration with multiple fallback levels (November 2025)\nconst VIDSRC_DOMAINS = {\n  primary: 'https://vidsrc.me/embed',\n  fallbacks: ['https://vidsrc.in/embed', 'https://vidsrc.net/embed', 'https://vidsrc.xyz/embed', 'https://vidsrc.io/embed', 'https://vidsrc.vc/embed', 'https://vidsrc.bz/embed', 'https://vidsrc.gd/embed', 'https://vidsrc.do/embed', 'https://vidsrc.mn/embed', 'https://vidsrc.tw/embed'],\n  alternative: ['https://embedsu.com/embed', 'https://2embed.cc/embed', 'https://autoembed.cc/embed', 'https://vidsrcsu.com/embed', 'https://vidsrc.pk/embed']\n};\n\n// Quality options for streaming\nconst QualityOptions = {\n  AUTO: 'auto',\n  Q4K: '4k',\n  Q1080P: '1080p',\n  Q720P: '720p',\n  Q480P: '480p',\n  Q360P: '360p'\n};\n\n// Error types for better error handling\nconst StreamErrorTypes = {\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  PLAYER_ERROR: 'PLAYER_ERROR',\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\n  GEO_BLOCKED: 'GEO_BLOCKED',\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\n};\n\n// Alternative streaming sources for fallback (November 2025)\nconst EMBED_SOURCES = {\n  vidsrc: {\n    name: 'VidSrc',\n    baseUrl: 'https://vidsrc.me/embed',\n    supports: ['movie', 'tv']\n  },\n  vidsrcdomains: {\n    name: 'VidSrc Domains',\n    baseUrl: 'https://vidsrc.domains/embed/',\n    supports: ['movie', 'tv']\n  },\n  embedsu: {\n    name: 'EmbedSu',\n    baseUrl: 'https://embedsu.com/embed/',\n    supports: ['movie', 'tv']\n  },\n  embed2: {\n    name: '2Embed',\n    baseUrl: 'https://2embed.cc/embed/',\n    supports: ['movie', 'tv']\n  },\n  autoembed: {\n    name: 'AutoEmbed',\n    baseUrl: 'https://autoembed.cc/embed/',\n    supports: ['movie', 'tv']\n  },\n  vidsrcsu: {\n    name: 'VidSrcSu',\n    baseUrl: 'https://vidsrcsu.com/embed/',\n    supports: ['movie', 'tv']\n  },\n  vidsrcpk: {\n    name: 'VidSrcPK',\n    baseUrl: 'https://vidsrc.pk/embed/',\n    supports: ['movie', 'tv']\n  },\n  embedsoap: {\n    name: 'EmbedSoap',\n    baseUrl: 'https://www.embedsoap.com/embed/movie/',\n    supports: ['movie']\n  },\n  smashystream: {\n    name: 'SmashyStream',\n    baseUrl: 'https://player.smashystream.com/movie/',\n    supports: ['movie']\n  },\n  multiembed: {\n    name: 'MultiEmbed',\n    baseUrl: 'https://multiembed.mov/directstream.php?video_id=',\n    supports: ['movie', 'tv']\n  },\n  vidplay: {\n    name: 'VidPlay',\n    baseUrl: 'https://vidplay.online/embed/',\n    supports: ['movie', 'tv']\n  },\n  solarmovie: {\n    name: 'SolarMovie',\n    baseUrl: 'https://www.solarmovie.pe/embed/',\n    supports: ['movie', 'tv']\n  },\n  flixhq: {\n    name: 'FlixHQ',\n    baseUrl: 'https://flixhq.to/embed/',\n    supports: ['movie', 'tv']\n  },\n  solarmovie: {\n    name: 'SolarMovie',\n    baseUrl: 'https://www.solarmovie.pe/embed/',\n    supports: ['movie', 'tv']\n  },\n  fmovies: {\n    name: 'FMovies',\n    baseUrl: 'https://fmovies.to/embed/',\n    supports: ['movie', 'tv']\n  },\n  lookmovie: {\n    name: 'LookMovie',\n    baseUrl: 'https://lookmovie.io/embed/',\n    supports: ['movie', 'tv']\n  },\n  sflix: {\n    name: 'SFlix',\n    baseUrl: 'https://sflix.to/embed/',\n    supports: ['movie', 'tv']\n  }\n};\n\n// Fallback Manager Class\nclass FallbackManager {\n  constructor() {\n    this.currentIndex = 0;\n    this.retryCount = 0;\n    this.maxRetries = 3;\n    this.domainLevel = 0; // 0 = primary, 1 = fallbacks, 2 = alternative\n  }\n  getDomainsForCurrentLevel() {\n    switch (this.domainLevel) {\n      case 0:\n        return [VIDSRC_DOMAINS.primary];\n      case 1:\n        return VIDSRC_DOMAINS.fallbacks;\n      case 2:\n        return VIDSRC_DOMAINS.alternative;\n      default:\n        return [VIDSRC_DOMAINS.primary];\n    }\n  }\n  getNextUrl(type, id, season = null, episode = null, quality = 'auto') {\n    const domains = this.getDomainsForCurrentLevel();\n    const domain = domains[this.currentIndex % domains.length];\n    this.currentIndex++;\n\n    // Move to next domain level if we've tried all domains in current level\n    if (this.currentIndex >= domains.length) {\n      this.currentIndex = 0;\n      this.domainLevel = Math.min(this.domainLevel + 1, 2);\n    }\n    const baseUrl = type === 'movie' ? `${domain}/movie/${id}` : `${domain}/tv/${id}/${season}/${episode}`;\n    return quality !== 'auto' ? `${baseUrl}?q=${quality}` : baseUrl;\n  }\n  recordFailure() {\n    this.retryCount++;\n    if (this.retryCount >= this.maxRetries) {\n      this.reset();\n      throw new Error('All streaming sources failed');\n    }\n  }\n  recordSuccess() {\n    this.retryCount = 0;\n    this.currentIndex = 0;\n    this.domainLevel = 0;\n  }\n  reset() {\n    this.currentIndex = 0;\n    this.retryCount = 0;\n    this.domainLevel = 0;\n  }\n  getCurrentDomain() {\n    const domains = this.getDomainsForCurrentLevel();\n    return domains[this.currentIndex % domains.length];\n  }\n}\n\n// Error Recovery Manager Class\nclass ErrorRecoveryManager {\n  constructor(fallbackManager) {\n    this.fallbackManager = fallbackManager;\n    this.recoveryStrategies = new Map();\n    this.initializeStrategies();\n  }\n  initializeStrategies() {\n    this.recoveryStrategies.set(StreamErrorTypes.NETWORK_ERROR, this.handleNetworkError.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.TIMEOUT_ERROR, this.handleTimeoutError.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.PLAYER_ERROR, this.handlePlayerError.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.CONTENT_NOT_FOUND, this.handleContentNotFound.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.QUALITY_UNAVAILABLE, this.handleQualityError.bind(this));\n  }\n  async recover(error, context) {\n    const strategy = this.recoveryStrategies.get(error.type);\n    if (strategy) {\n      return await strategy(error, context);\n    }\n    throw error;\n  }\n  async handleNetworkError(error, context) {\n    // Wait with exponential backoff\n    const delay = this.calculateBackoffDelay(context.retryCount);\n    await this.delay(delay);\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, context.quality);\n  }\n  async handleTimeoutError(error, context) {\n    // Reduce quality and retry\n    const newQuality = this.reduceQuality(context.quality);\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, newQuality);\n  }\n  async handlePlayerError(error, context) {\n    // Try different domain\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, context.quality);\n  }\n  async handleContentNotFound(error, context) {\n    // Try alternative sources\n    this.fallbackManager.domainLevel = 2; // Use alternative domains\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, context.quality);\n  }\n  async handleQualityError(error, context) {\n    // Reduce quality and retry\n    const newQuality = this.reduceQuality(context.quality);\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, newQuality);\n  }\n  calculateBackoffDelay(retryCount) {\n    return Math.min(1000 * Math.pow(2, retryCount), 10000);\n  }\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  reduceQuality(currentQuality) {\n    const qualityHierarchy = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P, QualityOptions.Q360P];\n    const currentIndex = qualityHierarchy.indexOf(currentQuality);\n    if (currentIndex < qualityHierarchy.length - 1) {\n      return qualityHierarchy[currentIndex + 1];\n    }\n    return QualityOptions.Q360P;\n  }\n}\n\n// Performance Monitor Class\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = {\n      streamLoadTime: [],\n      bufferingEvents: [],\n      qualitySwitches: [],\n      errorRates: [],\n      userEngagement: []\n    };\n    this.startTime = null;\n  }\n  startTracking() {\n    this.startTime = Date.now();\n  }\n  trackStreamLoadTime(endTime) {\n    if (!this.startTime) return;\n    const loadTime = endTime - this.startTime;\n    this.metrics.streamLoadTime.push(loadTime);\n    if (loadTime > 10000) {\n      // 10 seconds\n      console.warn('Slow stream loading detected:', loadTime);\n    }\n  }\n  trackBufferingEvent(duration) {\n    this.metrics.bufferingEvents.push({\n      timestamp: Date.now(),\n      duration\n    });\n  }\n  trackQualitySwitch(from, to) {\n    this.metrics.qualitySwitches.push({\n      timestamp: Date.now(),\n      from,\n      to\n    });\n  }\n  trackError(error) {\n    this.metrics.errorRates.push({\n      timestamp: Date.now(),\n      error: error.message\n    });\n  }\n  generateReport() {\n    const loadTimes = this.metrics.streamLoadTime;\n    return {\n      averageLoadTime: loadTimes.length > 0 ? loadTimes.reduce((a, b) => a + b, 0) / loadTimes.length : 0,\n      bufferingFrequency: this.metrics.bufferingEvents.length,\n      qualitySwitchCount: this.metrics.qualitySwitches.length,\n      errorCount: this.metrics.errorRates.length,\n      successRate: this.calculateSuccessRate()\n    };\n  }\n  calculateSuccessRate() {\n    const totalAttempts = this.metrics.streamLoadTime.length + this.metrics.errorRates.length;\n    return totalAttempts > 0 ? this.metrics.streamLoadTime.length / totalAttempts * 100 : 0;\n  }\n}\n\n// Global instances\nconst fallbackManager = new FallbackManager();\nconst errorRecoveryManager = new ErrorRecoveryManager(fallbackManager);\nconst performanceMonitor = new PerformanceMonitor();\nexport const vidsrcApi = {\n  // Enhanced streaming URL generation with fallback support\n  getMovieStream: (tmdbId, options = {}) => {\n    const {\n      quality = 'auto',\n      useFallback = true\n    } = options;\n    try {\n      const url = useFallback ? fallbackManager.getNextUrl('movie', tmdbId, null, null, quality) : `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n      return {\n        url,\n        type: 'movie',\n        provider: 'vidsrc',\n        embeddable: true,\n        quality,\n        fallbackSupported: useFallback\n      };\n    } catch (error) {\n      return this.getErrorStream('movie', tmdbId, error);\n    }\n  },\n  // Enhanced TV streaming with fallback support\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      quality = 'auto',\n      useFallback = true\n    } = options;\n    try {\n      const url = useFallback ? fallbackManager.getNextUrl('tv', tmdbId, season, episode, quality) : `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n      return {\n        url,\n        type: 'tv',\n        provider: 'vidsrc',\n        embeddable: true,\n        season,\n        episode,\n        quality,\n        fallbackSupported: useFallback\n      };\n    } catch (error) {\n      return this.getErrorStream('tv', tmdbId, error, season, episode);\n    }\n  },\n  // Get error stream for failed requests\n  getErrorStream: (type, id, error, season = null, episode = null) => {\n    return {\n      url: '',\n      type,\n      provider: 'error',\n      embeddable: false,\n      error: error.message,\n      season,\n      episode\n    };\n  },\n  // Try alternative URL patterns for better compatibility\n  tryAlternativeUrls: (tmdbId, type, season = null, episode = null) => {\n    const alternatives = [];\n\n    // Try different VidSrc domains\n    const domains = ['https://vidsrc.to/embed', 'https://vidsrc.me/embed', 'https://vidsrc.cc/embed', 'https://vidsrc.org/embed'];\n    domains.forEach(domain => {\n      if (type === 'movie') {\n        alternatives.push(`${domain}/movie/${tmdbId}`);\n      } else {\n        alternatives.push(`${domain}/tv/${tmdbId}/${season || 1}/${episode || 1}`);\n      }\n    });\n\n    // Try IMDb ID format (if we had IMDb ID)\n    // alternatives.push(`https://vidsrc.to/embed/tt${imdbId}`);\n\n    return alternatives;\n  },\n  // Enhanced multiple streaming sources with quality options\n  getMovieSources: (tmdbId, options = {}) => {\n    const {\n      includeAlternatives = true,\n      quality = 'auto'\n    } = options;\n    const sources = [];\n\n    // Primary VidSrc sources with different qualities\n    const qualities = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    qualities.forEach((q, index) => {\n      sources.push({\n        id: `vidsrc-${q}`,\n        name: `VidSrc ${q.toUpperCase()}`,\n        url: fallbackManager.getNextUrl('movie', tmdbId, null, null, q),\n        embeddable: true,\n        quality: q,\n        provider: 'vidsrc',\n        primary: index === 0\n      });\n    });\n\n    // Backup domains for primary quality\n    if (includeAlternatives) {\n      VIDSRC_DOMAINS.fallbacks.forEach((domain, index) => {\n        sources.push({\n          id: `vidsrc-backup-${index}`,\n          name: `VidSrc Backup ${index + 1}`,\n          url: `${domain}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`,\n          embeddable: true,\n          quality: quality,\n          provider: 'vidsrc',\n          backup: true\n        });\n      });\n\n      // Alternative sources\n      sources.push({\n        id: 'vidsrcdomains',\n        name: 'VidSrc Domains',\n        url: `${EMBED_SOURCES.vidsrcdomains.baseUrl}movie/${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'vidsrcdomains'\n      });\n      sources.push({\n        id: 'embedsu',\n        name: 'EmbedSu',\n        url: `${EMBED_SOURCES.embedsu.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'embedsu'\n      });\n      sources.push({\n        id: 'embed2',\n        name: '2Embed',\n        url: `${EMBED_SOURCES.embed2.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'embed2'\n      });\n      sources.push({\n        id: 'autoembed',\n        name: 'AutoEmbed',\n        url: `${EMBED_SOURCES.autoembed.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'autoembed'\n      });\n      sources.push({\n        id: 'vidsrcsu',\n        name: 'VidSrcSu',\n        url: `${EMBED_SOURCES.vidsrcsu.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'vidsrcsu'\n      });\n      sources.push({\n        id: 'vidsrcpk',\n        name: 'VidSrcPK',\n        url: `${EMBED_SOURCES.vidsrcpk.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'vidsrcpk'\n      });\n      sources.push({\n        id: 'embedsoap',\n        name: 'EmbedSoap',\n        url: `${EMBED_SOURCES.embedsoap.baseUrl}?id=${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'embedsoap'\n      });\n      sources.push({\n        id: 'smashystream',\n        name: 'SmashyStream',\n        url: `${EMBED_SOURCES.smashystream.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'smashystream'\n      });\n      sources.push({\n        id: 'multiembed',\n        name: 'MultiEmbed',\n        url: `${EMBED_SOURCES.multiembed.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'multiembed'\n      });\n      sources.push({\n        id: 'vidplay',\n        name: 'VidPlay',\n        url: `${EMBED_SOURCES.vidplay.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'vidplay'\n      });\n      sources.push({\n        id: 'solarmovie',\n        name: 'SolarMovie',\n        url: `${EMBED_SOURCES.solarmovie.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'solarmovie'\n      });\n      sources.push({\n        id: 'flixhq',\n        name: 'FlixHQ',\n        url: `${EMBED_SOURCES.flixhq.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'flixhq'\n      });\n    }\n    return sources;\n  },\n  // Enhanced TV sources with quality options\n  getTVSources: (tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      includeAlternatives = true,\n      quality = 'auto'\n    } = options;\n    const sources = [];\n\n    // Primary VidSrc sources with different qualities\n    const qualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    qualities.forEach((q, index) => {\n      sources.push({\n        id: `vidsrc-${q}`,\n        name: `VidSrc ${q.toUpperCase()}`,\n        url: fallbackManager.getNextUrl('tv', tmdbId, season, episode, q),\n        embeddable: true,\n        quality: q,\n        provider: 'vidsrc',\n        season,\n        episode,\n        primary: index === 0\n      });\n    });\n\n    // Backup domains for primary quality\n    if (includeAlternatives) {\n      VIDSRC_DOMAINS.fallbacks.forEach((domain, index) => {\n        sources.push({\n          id: `vidsrc-backup-${index}`,\n          name: `VidSrc Backup ${index + 1}`,\n          url: `${domain}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`,\n          embeddable: true,\n          quality: quality,\n          provider: 'vidsrc',\n          season,\n          episode,\n          backup: true\n        });\n      });\n    }\n    return sources;\n  },\n  // Check if streaming is available for a movie\n  checkAvailability: async (tmdbId, type = 'movie') => {\n    try {\n      // VidSrc doesn't have a formal availability check API\n      // We assume content is available if it has a valid TMDB ID\n      return {\n        available: true,\n        provider: 'vidsrc',\n        embeddable: true,\n        message: 'Streaming available via VidSrc'\n      };\n    } catch (error) {\n      return {\n        available: false,\n        provider: 'vidsrc',\n        embeddable: false,\n        message: 'Streaming temporarily unavailable'\n      };\n    }\n  },\n  // Get streaming quality information\n  getQualityInfo: () => {\n    return {\n      default: '1080p',\n      available: ['720p', '1080p', '4K'],\n      note: 'Quality automatically adjusts based on connection speed'\n    };\n  },\n  // Get supported regions\n  getSupportedRegions: () => {\n    return {\n      regions: ['IN', 'US', 'UK', 'CA', 'AU', 'DE', 'FR', 'JP', 'KR', 'BR', 'MX', 'ES', 'IT', 'NL', 'SE', 'NO', 'DK', 'FI', 'PL', 'RU', 'CN', 'HK', 'TW', 'SG', 'MY', 'TH', 'VN', 'PH', 'ID', 'AE', 'SA', 'EG', 'ZA', 'NG', 'KE', 'MA', 'TN', 'DZ', 'AR', 'CL', 'CO', 'PE', 'VE', 'EC', 'UY', 'PY', 'BO', 'GT', 'CR', 'PA', 'DO', 'JM', 'TT', 'BB', 'LC', 'VC', 'GD', 'AG', 'DM', 'KN', 'MS', 'VG', 'AI', 'BM', 'KY', 'TC', 'FK', 'GS', 'SH', 'IO', 'AC', 'TA', 'PN', 'WF', 'PF', 'NC', 'VU', 'FJ', 'PG', 'SB', 'KI', 'NR', 'TV', 'TO', 'WS', 'CK', 'NU', 'TK', 'AS', 'GU', 'MP', 'FM', 'MH', 'PW', 'UM', 'VI', 'PR'],\n      note: 'VidSrc works globally with no regional restrictions'\n    };\n  },\n  // Enhanced error handling with recovery\n  handleStreamError: async (error, context) => {\n    performanceMonitor.trackError(error);\n    try {\n      const recoveredUrl = await errorRecoveryManager.recover(error, context);\n      fallbackManager.recordSuccess();\n      return {\n        success: true,\n        url: recoveredUrl,\n        recovered: true\n      };\n    } catch (recoveryError) {\n      fallbackManager.recordFailure();\n      return {\n        success: false,\n        error: recoveryError.message,\n        fallbackExhausted: true\n      };\n    }\n  },\n  // Get available quality options\n  getQualityOptions: (contentType = 'movie') => {\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    if (contentType === 'movie') {\n      baseQualities.unshift(QualityOptions.Q4K);\n    }\n    return baseQualities;\n  },\n  // Test stream availability with enhanced error handling\n  testStream: async (url, timeout = 5000) => {\n    const startTime = Date.now();\n\n    // Create a timeout promise\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Connection timeout')), timeout);\n    });\n    try {\n      // Race between fetch and timeout\n      const response = await Promise.race([fetch(url, {\n        method: 'HEAD',\n        mode: 'no-cors',\n        signal: AbortSignal.timeout(timeout)\n      }), timeoutPromise]);\n      const loadTime = Date.now() - startTime;\n      performanceMonitor.trackStreamLoadTime(Date.now());\n      return {\n        available: true,\n        loadTime,\n        url,\n        responseTime: loadTime\n      };\n    } catch (error) {\n      // If HEAD fails, try GET request with timeout\n      try {\n        const getResponse = await Promise.race([fetch(url, {\n          method: 'GET',\n          mode: 'no-cors',\n          signal: AbortSignal.timeout(timeout)\n        }), timeoutPromise]);\n        const loadTime = Date.now() - startTime;\n        performanceMonitor.trackStreamLoadTime(Date.now());\n        return {\n          available: true,\n          loadTime,\n          url,\n          responseTime: loadTime\n        };\n      } catch (getError) {\n        const loadTime = Date.now() - startTime;\n        performanceMonitor.trackStreamLoadTime(Date.now());\n\n        // Enhanced error classification\n        let errorType = 'UNKNOWN_ERROR';\n        if (getError.name === 'TimeoutError' || getError.message.includes('timeout')) {\n          errorType = 'TIMEOUT_ERROR';\n        } else if (getError.message.includes('NetworkError') || getError.message.includes('Failed to fetch')) {\n          errorType = 'NETWORK_ERROR';\n        } else if (getError.message.includes('404') || getError.message.includes('Not Found')) {\n          errorType = 'CONTENT_NOT_FOUND';\n        }\n        return {\n          available: false,\n          loadTime,\n          error: getError.message,\n          errorType,\n          url,\n          responseTime: loadTime\n        };\n      }\n    }\n  },\n  // Get performance metrics\n  getPerformanceReport: () => {\n    return performanceMonitor.generateReport();\n  },\n  // Reset fallback manager\n  resetFallbackManager: () => {\n    fallbackManager.reset();\n    performanceMonitor.startTracking();\n  },\n  // Get current fallback status\n  getFallbackStatus: () => {\n    return {\n      currentDomain: fallbackManager.getCurrentDomain(),\n      retryCount: fallbackManager.retryCount,\n      domainLevel: fallbackManager.domainLevel,\n      maxRetries: fallbackManager.maxRetries\n    };\n  },\n  // Create secure iframe embed\n  createSecureEmbed: (streamData, options = {}) => {\n    const {\n      width = '100%',\n      height = '500',\n      autoplay = false,\n      muted = false,\n      controls = true,\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\n    } = options;\n    const embedUrl = streamData.url;\n    return {\n      iframe: `<iframe\n        src=\"${embedUrl}\"\n        width=\"${width}\"\n        height=\"${height}\"\n        frameborder=\"0\"\n        allowfullscreen\n        ${autoplay ? 'autoplay' : ''}\n        ${muted ? 'muted' : ''}\n        ${controls ? '' : 'controls=\"false\"'}\n        sandbox=\"${sandbox}\"\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\n        referrerpolicy=\"strict-origin-when-cross-origin\"\n        loading=\"lazy\"\n      ></iframe>`,\n      url: embedUrl,\n      type: streamData.type,\n      provider: streamData.provider,\n      security: {\n        sandbox,\n        referrerPolicy: 'strict-origin-when-cross-origin',\n        cspCompliant: true\n      }\n    };\n  }\n};\n\n// Helper function to create iframe embed code\nexport const createEmbedCode = (streamData, options = {}) => {\n  const {\n    width = '100%',\n    height = '500',\n    autoplay = false,\n    muted = false,\n    controls = true\n  } = options;\n  const embedUrl = streamData.url;\n  return {\n    iframe: `<iframe\n      src=\"${embedUrl}\"\n      width=\"${width}\"\n      height=\"${height}\"\n      frameborder=\"0\"\n      allowfullscreen\n      ${autoplay ? 'autoplay' : ''}\n      ${muted ? 'muted' : ''}\n      ${controls ? '' : 'controls=\"false\"'}\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\n    ></iframe>`,\n    url: embedUrl,\n    type: streamData.type,\n    provider: streamData.provider\n  };\n};\n\n// Error handling for streaming\nexport const handleStreamError = (error, fallbackSources = []) => {\n  console.error('Streaming error:', error);\n  if (fallbackSources.length > 0) {\n    return {\n      success: false,\n      error: error.message,\n      fallback: fallbackSources[0],\n      hasFallback: true\n    };\n  }\n  return {\n    success: false,\n    error: error.message,\n    hasFallback: false\n  };\n};\nexport default vidsrcApi;","map":{"version":3,"names":["VIDSRC_DOMAINS","primary","fallbacks","alternative","QualityOptions","AUTO","Q4K","Q1080P","Q720P","Q480P","Q360P","StreamErrorTypes","NETWORK_ERROR","TIMEOUT_ERROR","PLAYER_ERROR","CONTENT_NOT_FOUND","GEO_BLOCKED","QUALITY_UNAVAILABLE","EMBED_SOURCES","vidsrc","name","baseUrl","supports","vidsrcdomains","embedsu","embed2","autoembed","vidsrcsu","vidsrcpk","embedsoap","smashystream","multiembed","vidplay","solarmovie","flixhq","fmovies","lookmovie","sflix","FallbackManager","constructor","currentIndex","retryCount","maxRetries","domainLevel","getDomainsForCurrentLevel","getNextUrl","type","id","season","episode","quality","domains","domain","length","Math","min","recordFailure","reset","Error","recordSuccess","getCurrentDomain","ErrorRecoveryManager","fallbackManager","recoveryStrategies","Map","initializeStrategies","set","handleNetworkError","bind","handleTimeoutError","handlePlayerError","handleContentNotFound","handleQualityError","recover","error","context","strategy","get","delay","calculateBackoffDelay","newQuality","reduceQuality","pow","ms","Promise","resolve","setTimeout","currentQuality","qualityHierarchy","indexOf","PerformanceMonitor","metrics","streamLoadTime","bufferingEvents","qualitySwitches","errorRates","userEngagement","startTime","startTracking","Date","now","trackStreamLoadTime","endTime","loadTime","push","console","warn","trackBufferingEvent","duration","timestamp","trackQualitySwitch","from","to","trackError","message","generateReport","loadTimes","averageLoadTime","reduce","a","b","bufferingFrequency","qualitySwitchCount","errorCount","successRate","calculateSuccessRate","totalAttempts","errorRecoveryManager","performanceMonitor","vidsrcApi","getMovieStream","tmdbId","options","useFallback","url","provider","embeddable","fallbackSupported","getErrorStream","getTVStream","tryAlternativeUrls","alternatives","forEach","getMovieSources","includeAlternatives","sources","qualities","q","index","toUpperCase","backup","getTVSources","checkAvailability","available","getQualityInfo","default","note","getSupportedRegions","regions","handleStreamError","recoveredUrl","success","recovered","recoveryError","fallbackExhausted","getQualityOptions","contentType","baseQualities","unshift","testStream","timeout","timeoutPromise","_","reject","response","race","fetch","method","mode","signal","AbortSignal","responseTime","getResponse","getError","errorType","includes","getPerformanceReport","resetFallbackManager","getFallbackStatus","currentDomain","createSecureEmbed","streamData","width","height","autoplay","muted","controls","sandbox","embedUrl","iframe","security","referrerPolicy","cspCompliant","createEmbedCode","fallbackSources","fallback","hasFallback"],"sources":["C:/Users/VASU/Desktop/task/src/services/vidsrcApi.js"],"sourcesContent":["// VidSrc API service for streaming integration\r\n// No API key required - uses TMDB IDs directly\r\n\r\n// Enhanced domain configuration with multiple fallback levels (November 2025)\r\nconst VIDSRC_DOMAINS = {\r\n  primary: 'https://vidsrc.me/embed',\r\n  fallbacks: [\r\n    'https://vidsrc.in/embed',\r\n    'https://vidsrc.net/embed',\r\n    'https://vidsrc.xyz/embed',\r\n    'https://vidsrc.io/embed',\r\n    'https://vidsrc.vc/embed',\r\n    'https://vidsrc.bz/embed',\r\n    'https://vidsrc.gd/embed',\r\n    'https://vidsrc.do/embed',\r\n    'https://vidsrc.mn/embed',\r\n    'https://vidsrc.tw/embed'\r\n  ],\r\n  alternative: [\r\n    'https://embedsu.com/embed',\r\n    'https://2embed.cc/embed',\r\n    'https://autoembed.cc/embed',\r\n    'https://vidsrcsu.com/embed',\r\n    'https://vidsrc.pk/embed'\r\n  ]\r\n};\r\n\r\n// Quality options for streaming\r\nconst QualityOptions = {\r\n  AUTO: 'auto',\r\n  Q4K: '4k',\r\n  Q1080P: '1080p',\r\n  Q720P: '720p',\r\n  Q480P: '480p',\r\n  Q360P: '360p'\r\n};\r\n\r\n// Error types for better error handling\r\nconst StreamErrorTypes = {\r\n  NETWORK_ERROR: 'NETWORK_ERROR',\r\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\r\n  PLAYER_ERROR: 'PLAYER_ERROR',\r\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\r\n  GEO_BLOCKED: 'GEO_BLOCKED',\r\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\r\n};\r\n\r\n// Alternative streaming sources for fallback (November 2025)\r\nconst EMBED_SOURCES = {\r\n  vidsrc: {\r\n    name: 'VidSrc',\r\n    baseUrl: 'https://vidsrc.me/embed',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  vidsrcdomains: {\r\n    name: 'VidSrc Domains',\r\n    baseUrl: 'https://vidsrc.domains/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  embedsu: {\r\n    name: 'EmbedSu',\r\n    baseUrl: 'https://embedsu.com/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  embed2: {\r\n    name: '2Embed',\r\n    baseUrl: 'https://2embed.cc/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  autoembed: {\r\n    name: 'AutoEmbed',\r\n    baseUrl: 'https://autoembed.cc/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  vidsrcsu: {\r\n    name: 'VidSrcSu',\r\n    baseUrl: 'https://vidsrcsu.com/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  vidsrcpk: {\r\n    name: 'VidSrcPK',\r\n    baseUrl: 'https://vidsrc.pk/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  embedsoap: {\r\n    name: 'EmbedSoap',\r\n    baseUrl: 'https://www.embedsoap.com/embed/movie/',\r\n    supports: ['movie']\r\n  },\r\n  smashystream: {\r\n    name: 'SmashyStream',\r\n    baseUrl: 'https://player.smashystream.com/movie/',\r\n    supports: ['movie']\r\n  },\r\n  multiembed: {\r\n    name: 'MultiEmbed',\r\n    baseUrl: 'https://multiembed.mov/directstream.php?video_id=',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  vidplay: {\r\n    name: 'VidPlay',\r\n    baseUrl: 'https://vidplay.online/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  solarmovie: {\r\n    name: 'SolarMovie',\r\n    baseUrl: 'https://www.solarmovie.pe/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  flixhq: {\r\n    name: 'FlixHQ',\r\n    baseUrl: 'https://flixhq.to/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  solarmovie: {\r\n    name: 'SolarMovie',\r\n    baseUrl: 'https://www.solarmovie.pe/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  fmovies: {\r\n    name: 'FMovies',\r\n    baseUrl: 'https://fmovies.to/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  lookmovie: {\r\n    name: 'LookMovie',\r\n    baseUrl: 'https://lookmovie.io/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  sflix: {\r\n    name: 'SFlix',\r\n    baseUrl: 'https://sflix.to/embed/',\r\n    supports: ['movie', 'tv']\r\n  }\r\n};\r\n\r\n// Fallback Manager Class\r\nclass FallbackManager {\r\n  constructor() {\r\n    this.currentIndex = 0;\r\n    this.retryCount = 0;\r\n    this.maxRetries = 3;\r\n    this.domainLevel = 0; // 0 = primary, 1 = fallbacks, 2 = alternative\r\n  }\r\n\r\n  getDomainsForCurrentLevel() {\r\n    switch (this.domainLevel) {\r\n      case 0:\r\n        return [VIDSRC_DOMAINS.primary];\r\n      case 1:\r\n        return VIDSRC_DOMAINS.fallbacks;\r\n      case 2:\r\n        return VIDSRC_DOMAINS.alternative;\r\n      default:\r\n        return [VIDSRC_DOMAINS.primary];\r\n    }\r\n  }\r\n\r\n  getNextUrl(type, id, season = null, episode = null, quality = 'auto') {\r\n    const domains = this.getDomainsForCurrentLevel();\r\n    const domain = domains[this.currentIndex % domains.length];\r\n\r\n    this.currentIndex++;\r\n\r\n    // Move to next domain level if we've tried all domains in current level\r\n    if (this.currentIndex >= domains.length) {\r\n      this.currentIndex = 0;\r\n      this.domainLevel = Math.min(this.domainLevel + 1, 2);\r\n    }\r\n\r\n    const baseUrl = type === 'movie'\r\n      ? `${domain}/movie/${id}`\r\n      : `${domain}/tv/${id}/${season}/${episode}`;\r\n\r\n    return quality !== 'auto' ? `${baseUrl}?q=${quality}` : baseUrl;\r\n  }\r\n\r\n  recordFailure() {\r\n    this.retryCount++;\r\n    if (this.retryCount >= this.maxRetries) {\r\n      this.reset();\r\n      throw new Error('All streaming sources failed');\r\n    }\r\n  }\r\n\r\n  recordSuccess() {\r\n    this.retryCount = 0;\r\n    this.currentIndex = 0;\r\n    this.domainLevel = 0;\r\n  }\r\n\r\n  reset() {\r\n    this.currentIndex = 0;\r\n    this.retryCount = 0;\r\n    this.domainLevel = 0;\r\n  }\r\n\r\n  getCurrentDomain() {\r\n    const domains = this.getDomainsForCurrentLevel();\r\n    return domains[this.currentIndex % domains.length];\r\n  }\r\n}\r\n\r\n// Error Recovery Manager Class\r\nclass ErrorRecoveryManager {\r\n  constructor(fallbackManager) {\r\n    this.fallbackManager = fallbackManager;\r\n    this.recoveryStrategies = new Map();\r\n    this.initializeStrategies();\r\n  }\r\n\r\n  initializeStrategies() {\r\n    this.recoveryStrategies.set(StreamErrorTypes.NETWORK_ERROR, this.handleNetworkError.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.TIMEOUT_ERROR, this.handleTimeoutError.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.PLAYER_ERROR, this.handlePlayerError.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.CONTENT_NOT_FOUND, this.handleContentNotFound.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.QUALITY_UNAVAILABLE, this.handleQualityError.bind(this));\r\n  }\r\n\r\n  async recover(error, context) {\r\n    const strategy = this.recoveryStrategies.get(error.type);\r\n    if (strategy) {\r\n      return await strategy(error, context);\r\n    }\r\n    throw error;\r\n  }\r\n\r\n  async handleNetworkError(error, context) {\r\n    // Wait with exponential backoff\r\n    const delay = this.calculateBackoffDelay(context.retryCount);\r\n    await this.delay(delay);\r\n\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      context.quality\r\n    );\r\n  }\r\n\r\n  async handleTimeoutError(error, context) {\r\n    // Reduce quality and retry\r\n    const newQuality = this.reduceQuality(context.quality);\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      newQuality\r\n    );\r\n  }\r\n\r\n  async handlePlayerError(error, context) {\r\n    // Try different domain\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      context.quality\r\n    );\r\n  }\r\n\r\n  async handleContentNotFound(error, context) {\r\n    // Try alternative sources\r\n    this.fallbackManager.domainLevel = 2; // Use alternative domains\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      context.quality\r\n    );\r\n  }\r\n\r\n  async handleQualityError(error, context) {\r\n    // Reduce quality and retry\r\n    const newQuality = this.reduceQuality(context.quality);\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      newQuality\r\n    );\r\n  }\r\n\r\n  calculateBackoffDelay(retryCount) {\r\n    return Math.min(1000 * Math.pow(2, retryCount), 10000);\r\n  }\r\n\r\n  delay(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  reduceQuality(currentQuality) {\r\n    const qualityHierarchy = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P, QualityOptions.Q360P];\r\n    const currentIndex = qualityHierarchy.indexOf(currentQuality);\r\n\r\n    if (currentIndex < qualityHierarchy.length - 1) {\r\n      return qualityHierarchy[currentIndex + 1];\r\n    }\r\n\r\n    return QualityOptions.Q360P;\r\n  }\r\n}\r\n\r\n// Performance Monitor Class\r\nclass PerformanceMonitor {\r\n  constructor() {\r\n    this.metrics = {\r\n      streamLoadTime: [],\r\n      bufferingEvents: [],\r\n      qualitySwitches: [],\r\n      errorRates: [],\r\n      userEngagement: []\r\n    };\r\n    this.startTime = null;\r\n  }\r\n\r\n  startTracking() {\r\n    this.startTime = Date.now();\r\n  }\r\n\r\n  trackStreamLoadTime(endTime) {\r\n    if (!this.startTime) return;\r\n\r\n    const loadTime = endTime - this.startTime;\r\n    this.metrics.streamLoadTime.push(loadTime);\r\n\r\n    if (loadTime > 10000) { // 10 seconds\r\n      console.warn('Slow stream loading detected:', loadTime);\r\n    }\r\n  }\r\n\r\n  trackBufferingEvent(duration) {\r\n    this.metrics.bufferingEvents.push({\r\n      timestamp: Date.now(),\r\n      duration\r\n    });\r\n  }\r\n\r\n  trackQualitySwitch(from, to) {\r\n    this.metrics.qualitySwitches.push({\r\n      timestamp: Date.now(),\r\n      from,\r\n      to\r\n    });\r\n  }\r\n\r\n  trackError(error) {\r\n    this.metrics.errorRates.push({\r\n      timestamp: Date.now(),\r\n      error: error.message\r\n    });\r\n  }\r\n\r\n  generateReport() {\r\n    const loadTimes = this.metrics.streamLoadTime;\r\n    return {\r\n      averageLoadTime: loadTimes.length > 0 ? loadTimes.reduce((a, b) => a + b, 0) / loadTimes.length : 0,\r\n      bufferingFrequency: this.metrics.bufferingEvents.length,\r\n      qualitySwitchCount: this.metrics.qualitySwitches.length,\r\n      errorCount: this.metrics.errorRates.length,\r\n      successRate: this.calculateSuccessRate()\r\n    };\r\n  }\r\n\r\n  calculateSuccessRate() {\r\n    const totalAttempts = this.metrics.streamLoadTime.length + this.metrics.errorRates.length;\r\n    return totalAttempts > 0 ? (this.metrics.streamLoadTime.length / totalAttempts) * 100 : 0;\r\n  }\r\n}\r\n\r\n// Global instances\r\nconst fallbackManager = new FallbackManager();\r\nconst errorRecoveryManager = new ErrorRecoveryManager(fallbackManager);\r\nconst performanceMonitor = new PerformanceMonitor();\r\n\r\nexport const vidsrcApi = {\r\n  // Enhanced streaming URL generation with fallback support\r\n  getMovieStream: (tmdbId, options = {}) => {\r\n    const { quality = 'auto', useFallback = true } = options;\r\n\r\n    try {\r\n      const url = useFallback\r\n        ? fallbackManager.getNextUrl('movie', tmdbId, null, null, quality)\r\n        : `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n      return {\r\n        url,\r\n        type: 'movie',\r\n        provider: 'vidsrc',\r\n        embeddable: true,\r\n        quality,\r\n        fallbackSupported: useFallback\r\n      };\r\n    } catch (error) {\r\n      return this.getErrorStream('movie', tmdbId, error);\r\n    }\r\n  },\r\n\r\n  // Enhanced TV streaming with fallback support\r\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\r\n    const { quality = 'auto', useFallback = true } = options;\r\n\r\n    try {\r\n      const url = useFallback\r\n        ? fallbackManager.getNextUrl('tv', tmdbId, season, episode, quality)\r\n        : `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n      return {\r\n        url,\r\n        type: 'tv',\r\n        provider: 'vidsrc',\r\n        embeddable: true,\r\n        season,\r\n        episode,\r\n        quality,\r\n        fallbackSupported: useFallback\r\n      };\r\n    } catch (error) {\r\n      return this.getErrorStream('tv', tmdbId, error, season, episode);\r\n    }\r\n  },\r\n\r\n  // Get error stream for failed requests\r\n  getErrorStream: (type, id, error, season = null, episode = null) => {\r\n    return {\r\n      url: '',\r\n      type,\r\n      provider: 'error',\r\n      embeddable: false,\r\n      error: error.message,\r\n      season,\r\n      episode\r\n    };\r\n  },\r\n\r\n  // Try alternative URL patterns for better compatibility\r\n  tryAlternativeUrls: (tmdbId, type, season = null, episode = null) => {\r\n    const alternatives = [];\r\n\r\n    // Try different VidSrc domains\r\n    const domains = [\r\n      'https://vidsrc.to/embed',\r\n      'https://vidsrc.me/embed',\r\n      'https://vidsrc.cc/embed',\r\n      'https://vidsrc.org/embed'\r\n    ];\r\n\r\n    domains.forEach(domain => {\r\n      if (type === 'movie') {\r\n        alternatives.push(`${domain}/movie/${tmdbId}`);\r\n      } else {\r\n        alternatives.push(`${domain}/tv/${tmdbId}/${season || 1}/${episode || 1}`);\r\n      }\r\n    });\r\n\r\n    // Try IMDb ID format (if we had IMDb ID)\r\n    // alternatives.push(`https://vidsrc.to/embed/tt${imdbId}`);\r\n\r\n    return alternatives;\r\n  },\r\n\r\n  // Enhanced multiple streaming sources with quality options\r\n  getMovieSources: (tmdbId, options = {}) => {\r\n    const { includeAlternatives = true, quality = 'auto' } = options;\r\n    const sources = [];\r\n\r\n    // Primary VidSrc sources with different qualities\r\n    const qualities = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\r\n\r\n    qualities.forEach((q, index) => {\r\n      sources.push({\r\n        id: `vidsrc-${q}`,\r\n        name: `VidSrc ${q.toUpperCase()}`,\r\n        url: fallbackManager.getNextUrl('movie', tmdbId, null, null, q),\r\n        embeddable: true,\r\n        quality: q,\r\n        provider: 'vidsrc',\r\n        primary: index === 0\r\n      });\r\n    });\r\n\r\n    // Backup domains for primary quality\r\n    if (includeAlternatives) {\r\n      VIDSRC_DOMAINS.fallbacks.forEach((domain, index) => {\r\n        sources.push({\r\n          id: `vidsrc-backup-${index}`,\r\n          name: `VidSrc Backup ${index + 1}`,\r\n          url: `${domain}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`,\r\n          embeddable: true,\r\n          quality: quality,\r\n          provider: 'vidsrc',\r\n          backup: true\r\n        });\r\n      });\r\n\r\n      // Alternative sources\r\n      sources.push({\r\n        id: 'vidsrcdomains',\r\n        name: 'VidSrc Domains',\r\n        url: `${EMBED_SOURCES.vidsrcdomains.baseUrl}movie/${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'vidsrcdomains'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'embedsu',\r\n        name: 'EmbedSu',\r\n        url: `${EMBED_SOURCES.embedsu.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'embedsu'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'embed2',\r\n        name: '2Embed',\r\n        url: `${EMBED_SOURCES.embed2.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'embed2'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'autoembed',\r\n        name: 'AutoEmbed',\r\n        url: `${EMBED_SOURCES.autoembed.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'autoembed'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'vidsrcsu',\r\n        name: 'VidSrcSu',\r\n        url: `${EMBED_SOURCES.vidsrcsu.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'vidsrcsu'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'vidsrcpk',\r\n        name: 'VidSrcPK',\r\n        url: `${EMBED_SOURCES.vidsrcpk.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'vidsrcpk'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'embedsoap',\r\n        name: 'EmbedSoap',\r\n        url: `${EMBED_SOURCES.embedsoap.baseUrl}?id=${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'embedsoap'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'smashystream',\r\n        name: 'SmashyStream',\r\n        url: `${EMBED_SOURCES.smashystream.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'smashystream'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'multiembed',\r\n        name: 'MultiEmbed',\r\n        url: `${EMBED_SOURCES.multiembed.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'multiembed'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'vidplay',\r\n        name: 'VidPlay',\r\n        url: `${EMBED_SOURCES.vidplay.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'vidplay'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'solarmovie',\r\n        name: 'SolarMovie',\r\n        url: `${EMBED_SOURCES.solarmovie.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'solarmovie'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'flixhq',\r\n        name: 'FlixHQ',\r\n        url: `${EMBED_SOURCES.flixhq.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'flixhq'\r\n      });\r\n    }\r\n\r\n    return sources;\r\n  },\r\n\r\n  // Enhanced TV sources with quality options\r\n  getTVSources: (tmdbId, season = 1, episode = 1, options = {}) => {\r\n    const { includeAlternatives = true, quality = 'auto' } = options;\r\n    const sources = [];\r\n\r\n    // Primary VidSrc sources with different qualities\r\n    const qualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\r\n\r\n    qualities.forEach((q, index) => {\r\n      sources.push({\r\n        id: `vidsrc-${q}`,\r\n        name: `VidSrc ${q.toUpperCase()}`,\r\n        url: fallbackManager.getNextUrl('tv', tmdbId, season, episode, q),\r\n        embeddable: true,\r\n        quality: q,\r\n        provider: 'vidsrc',\r\n        season,\r\n        episode,\r\n        primary: index === 0\r\n      });\r\n    });\r\n\r\n    // Backup domains for primary quality\r\n    if (includeAlternatives) {\r\n      VIDSRC_DOMAINS.fallbacks.forEach((domain, index) => {\r\n        sources.push({\r\n          id: `vidsrc-backup-${index}`,\r\n          name: `VidSrc Backup ${index + 1}`,\r\n          url: `${domain}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`,\r\n          embeddable: true,\r\n          quality: quality,\r\n          provider: 'vidsrc',\r\n          season,\r\n          episode,\r\n          backup: true\r\n        });\r\n      });\r\n    }\r\n\r\n    return sources;\r\n  },\r\n\r\n  // Check if streaming is available for a movie\r\n  checkAvailability: async (tmdbId, type = 'movie') => {\r\n    try {\r\n      // VidSrc doesn't have a formal availability check API\r\n      // We assume content is available if it has a valid TMDB ID\r\n      return {\r\n        available: true,\r\n        provider: 'vidsrc',\r\n        embeddable: true,\r\n        message: 'Streaming available via VidSrc'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        available: false,\r\n        provider: 'vidsrc',\r\n        embeddable: false,\r\n        message: 'Streaming temporarily unavailable'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get streaming quality information\r\n  getQualityInfo: () => {\r\n    return {\r\n      default: '1080p',\r\n      available: ['720p', '1080p', '4K'],\r\n      note: 'Quality automatically adjusts based on connection speed'\r\n    };\r\n  },\r\n\r\n  // Get supported regions\r\n  getSupportedRegions: () => {\r\n    return {\r\n      regions: ['IN', 'US', 'UK', 'CA', 'AU', 'DE', 'FR', 'JP', 'KR', 'BR', 'MX', 'ES', 'IT', 'NL', 'SE', 'NO', 'DK', 'FI', 'PL', 'RU', 'CN', 'HK', 'TW', 'SG', 'MY', 'TH', 'VN', 'PH', 'ID', 'AE', 'SA', 'EG', 'ZA', 'NG', 'KE', 'MA', 'TN', 'DZ', 'AR', 'CL', 'CO', 'PE', 'VE', 'EC', 'UY', 'PY', 'BO', 'GT', 'CR', 'PA', 'DO', 'JM', 'TT', 'BB', 'LC', 'VC', 'GD', 'AG', 'DM', 'KN', 'MS', 'VG', 'AI', 'BM', 'KY', 'TC', 'FK', 'GS', 'SH', 'IO', 'AC', 'TA', 'PN', 'WF', 'PF', 'NC', 'VU', 'FJ', 'PG', 'SB', 'KI', 'NR', 'TV', 'TO', 'WS', 'CK', 'NU', 'TK', 'AS', 'GU', 'MP', 'FM', 'MH', 'PW', 'UM', 'VI', 'PR'],\r\n      note: 'VidSrc works globally with no regional restrictions'\r\n    };\r\n  },\r\n\r\n  // Enhanced error handling with recovery\r\n  handleStreamError: async (error, context) => {\r\n    performanceMonitor.trackError(error);\r\n\r\n    try {\r\n      const recoveredUrl = await errorRecoveryManager.recover(error, context);\r\n      fallbackManager.recordSuccess();\r\n      return {\r\n        success: true,\r\n        url: recoveredUrl,\r\n        recovered: true\r\n      };\r\n    } catch (recoveryError) {\r\n      fallbackManager.recordFailure();\r\n      return {\r\n        success: false,\r\n        error: recoveryError.message,\r\n        fallbackExhausted: true\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get available quality options\r\n  getQualityOptions: (contentType = 'movie') => {\r\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\r\n\r\n    if (contentType === 'movie') {\r\n      baseQualities.unshift(QualityOptions.Q4K);\r\n    }\r\n\r\n    return baseQualities;\r\n  },\r\n\r\n  // Test stream availability with enhanced error handling\r\n  testStream: async (url, timeout = 5000) => {\r\n    const startTime = Date.now();\r\n\r\n    // Create a timeout promise\r\n    const timeoutPromise = new Promise((_, reject) => {\r\n      setTimeout(() => reject(new Error('Connection timeout')), timeout);\r\n    });\r\n\r\n    try {\r\n      // Race between fetch and timeout\r\n      const response = await Promise.race([\r\n        fetch(url, {\r\n          method: 'HEAD',\r\n          mode: 'no-cors',\r\n          signal: AbortSignal.timeout(timeout)\r\n        }),\r\n        timeoutPromise\r\n      ]);\r\n\r\n      const loadTime = Date.now() - startTime;\r\n      performanceMonitor.trackStreamLoadTime(Date.now());\r\n\r\n      return {\r\n        available: true,\r\n        loadTime,\r\n        url,\r\n        responseTime: loadTime\r\n      };\r\n    } catch (error) {\r\n      // If HEAD fails, try GET request with timeout\r\n      try {\r\n        const getResponse = await Promise.race([\r\n          fetch(url, {\r\n            method: 'GET',\r\n            mode: 'no-cors',\r\n            signal: AbortSignal.timeout(timeout)\r\n          }),\r\n          timeoutPromise\r\n        ]);\r\n\r\n        const loadTime = Date.now() - startTime;\r\n        performanceMonitor.trackStreamLoadTime(Date.now());\r\n\r\n        return {\r\n          available: true,\r\n          loadTime,\r\n          url,\r\n          responseTime: loadTime\r\n        };\r\n      } catch (getError) {\r\n        const loadTime = Date.now() - startTime;\r\n        performanceMonitor.trackStreamLoadTime(Date.now());\r\n\r\n        // Enhanced error classification\r\n        let errorType = 'UNKNOWN_ERROR';\r\n        if (getError.name === 'TimeoutError' || getError.message.includes('timeout')) {\r\n          errorType = 'TIMEOUT_ERROR';\r\n        } else if (getError.message.includes('NetworkError') || getError.message.includes('Failed to fetch')) {\r\n          errorType = 'NETWORK_ERROR';\r\n        } else if (getError.message.includes('404') || getError.message.includes('Not Found')) {\r\n          errorType = 'CONTENT_NOT_FOUND';\r\n        }\r\n\r\n        return {\r\n          available: false,\r\n          loadTime,\r\n          error: getError.message,\r\n          errorType,\r\n          url,\r\n          responseTime: loadTime\r\n        };\r\n      }\r\n    }\r\n  },\r\n\r\n  // Get performance metrics\r\n  getPerformanceReport: () => {\r\n    return performanceMonitor.generateReport();\r\n  },\r\n\r\n  // Reset fallback manager\r\n  resetFallbackManager: () => {\r\n    fallbackManager.reset();\r\n    performanceMonitor.startTracking();\r\n  },\r\n\r\n  // Get current fallback status\r\n  getFallbackStatus: () => {\r\n    return {\r\n      currentDomain: fallbackManager.getCurrentDomain(),\r\n      retryCount: fallbackManager.retryCount,\r\n      domainLevel: fallbackManager.domainLevel,\r\n      maxRetries: fallbackManager.maxRetries\r\n    };\r\n  },\r\n\r\n  // Create secure iframe embed\r\n  createSecureEmbed: (streamData, options = {}) => {\r\n    const {\r\n      width = '100%',\r\n      height = '500',\r\n      autoplay = false,\r\n      muted = false,\r\n      controls = true,\r\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\r\n    } = options;\r\n\r\n    const embedUrl = streamData.url;\r\n\r\n    return {\r\n      iframe: `<iframe\r\n        src=\"${embedUrl}\"\r\n        width=\"${width}\"\r\n        height=\"${height}\"\r\n        frameborder=\"0\"\r\n        allowfullscreen\r\n        ${autoplay ? 'autoplay' : ''}\r\n        ${muted ? 'muted' : ''}\r\n        ${controls ? '' : 'controls=\"false\"'}\r\n        sandbox=\"${sandbox}\"\r\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\r\n        referrerpolicy=\"strict-origin-when-cross-origin\"\r\n        loading=\"lazy\"\r\n      ></iframe>`,\r\n      url: embedUrl,\r\n      type: streamData.type,\r\n      provider: streamData.provider,\r\n      security: {\r\n        sandbox,\r\n        referrerPolicy: 'strict-origin-when-cross-origin',\r\n        cspCompliant: true\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to create iframe embed code\r\nexport const createEmbedCode = (streamData, options = {}) => {\r\n  const {\r\n    width = '100%',\r\n    height = '500',\r\n    autoplay = false,\r\n    muted = false,\r\n    controls = true\r\n  } = options;\r\n\r\n  const embedUrl = streamData.url;\r\n\r\n  return {\r\n    iframe: `<iframe\r\n      src=\"${embedUrl}\"\r\n      width=\"${width}\"\r\n      height=\"${height}\"\r\n      frameborder=\"0\"\r\n      allowfullscreen\r\n      ${autoplay ? 'autoplay' : ''}\r\n      ${muted ? 'muted' : ''}\r\n      ${controls ? '' : 'controls=\"false\"'}\r\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\r\n    ></iframe>`,\r\n    url: embedUrl,\r\n    type: streamData.type,\r\n    provider: streamData.provider\r\n  };\r\n};\r\n\r\n// Error handling for streaming\r\nexport const handleStreamError = (error, fallbackSources = []) => {\r\n  console.error('Streaming error:', error);\r\n\r\n  if (fallbackSources.length > 0) {\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      fallback: fallbackSources[0],\r\n      hasFallback: true\r\n    };\r\n  }\r\n\r\n  return {\r\n    success: false,\r\n    error: error.message,\r\n    hasFallback: false\r\n  };\r\n};\r\n\r\nexport default vidsrcApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}