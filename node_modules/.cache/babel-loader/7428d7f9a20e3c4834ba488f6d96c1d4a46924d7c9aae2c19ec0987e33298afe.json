{"ast":null,"code":"// VidSrc API service for streaming integration\n// No API key required - uses TMDB IDs directly\n\n// Enhanced domain configuration with multiple fallback levels (November 2025)\nconst VIDSRC_DOMAINS = {\n  primary: 'https://vidsrc.to/embed',\n  fallbacks: ['https://vidsrc.cc/embed', 'https://vidsrc.org/embed', 'https://vidsrc.me/embed', 'https://vidsrc.net/embed', 'https://vidsrc.xyz/embed', 'https://vidsrc.io/embed', 'https://vidsrc.vc/embed', 'https://vidsrc.bz/embed', 'https://vidsrc.gd/embed'],\n  alternative: ['https://embedsu.com/embed', 'https://2embed.cc/embed', 'https://autoembed.cc/embed', 'https://vidsrcsu.com/embed', 'https://vidsrc.pk/embed', 'https://www.2embed.cc/embed', 'https://embed.su/embed', 'https://autoembed.cc/embed']\n};\n\n// Quality options for streaming\nconst QualityOptions = {\n  AUTO: 'auto',\n  Q4K: '4k',\n  Q1080P: '1080p',\n  Q720P: '720p',\n  Q480P: '480p',\n  Q360P: '360p'\n};\n\n// Error types for better error handling\nconst StreamErrorTypes = {\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  PLAYER_ERROR: 'PLAYER_ERROR',\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\n  GEO_BLOCKED: 'GEO_BLOCKED',\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\n};\n\n// Alternative streaming sources for fallback (November 2025)\nconst EMBED_SOURCES = {\n  vidsrc: {\n    name: 'VidSrc',\n    baseUrl: 'https://vidsrc.me/embed',\n    supports: ['movie', 'tv']\n  },\n  vidsrcdomains: {\n    name: 'VidSrc Domains',\n    baseUrl: 'https://vidsrc.domains/embed/',\n    supports: ['movie', 'tv']\n  },\n  embedsu: {\n    name: 'EmbedSu',\n    baseUrl: 'https://embedsu.com/embed/',\n    supports: ['movie', 'tv']\n  },\n  embed2: {\n    name: '2Embed',\n    baseUrl: 'https://2embed.cc/embed/',\n    supports: ['movie', 'tv']\n  },\n  autoembed: {\n    name: 'AutoEmbed',\n    baseUrl: 'https://autoembed.cc/embed/',\n    supports: ['movie', 'tv']\n  },\n  vidsrcsu: {\n    name: 'VidSrcSu',\n    baseUrl: 'https://vidsrcsu.com/embed/',\n    supports: ['movie', 'tv']\n  },\n  vidsrcpk: {\n    name: 'VidSrcPK',\n    baseUrl: 'https://vidsrc.pk/embed/',\n    supports: ['movie', 'tv']\n  },\n  embedsoap: {\n    name: 'EmbedSoap',\n    baseUrl: 'https://www.embedsoap.com/embed/movie/',\n    supports: ['movie']\n  },\n  smashystream: {\n    name: 'SmashyStream',\n    baseUrl: 'https://player.smashystream.com/movie/',\n    supports: ['movie']\n  },\n  multiembed: {\n    name: 'MultiEmbed',\n    baseUrl: 'https://multiembed.mov/directstream.php?video_id=',\n    supports: ['movie', 'tv']\n  },\n  vidplay: {\n    name: 'VidPlay',\n    baseUrl: 'https://vidplay.online/embed/',\n    supports: ['movie', 'tv']\n  },\n  solarmovie: {\n    name: 'SolarMovie',\n    baseUrl: 'https://www.solarmovie.pe/embed/',\n    supports: ['movie', 'tv']\n  },\n  flixhq: {\n    name: 'FlixHQ',\n    baseUrl: 'https://flixhq.to/embed/',\n    supports: ['movie', 'tv']\n  },\n  solarmovie: {\n    name: 'SolarMovie',\n    baseUrl: 'https://www.solarmovie.pe/embed/',\n    supports: ['movie', 'tv']\n  },\n  fmovies: {\n    name: 'FMovies',\n    baseUrl: 'https://fmovies.to/embed/',\n    supports: ['movie', 'tv']\n  },\n  lookmovie: {\n    name: 'LookMovie',\n    baseUrl: 'https://lookmovie.io/embed/',\n    supports: ['movie', 'tv']\n  },\n  sflix: {\n    name: 'SFlix',\n    baseUrl: 'https://sflix.to/embed/',\n    supports: ['movie', 'tv']\n  }\n};\n\n// Fallback Manager Class\nclass FallbackManager {\n  constructor() {\n    this.currentIndex = 0;\n    this.retryCount = 0;\n    this.maxRetries = 3;\n    this.domainLevel = 0; // 0 = primary, 1 = fallbacks, 2 = alternative\n  }\n  getDomainsForCurrentLevel() {\n    switch (this.domainLevel) {\n      case 0:\n        return [VIDSRC_DOMAINS.primary];\n      case 1:\n        return VIDSRC_DOMAINS.fallbacks;\n      case 2:\n        return VIDSRC_DOMAINS.alternative;\n      default:\n        return [VIDSRC_DOMAINS.primary];\n    }\n  }\n  getNextUrl(type, id, season = null, episode = null, quality = 'auto') {\n    const domains = this.getDomainsForCurrentLevel();\n    const domain = domains[this.currentIndex % domains.length];\n    this.currentIndex++;\n\n    // Move to next domain level if we've tried all domains in current level\n    if (this.currentIndex >= domains.length) {\n      this.currentIndex = 0;\n      this.domainLevel = Math.min(this.domainLevel + 1, 2);\n    }\n\n    // Use correct URL patterns based on research (November 2025)\n    let baseUrl;\n\n    // Different URL patterns for different domains\n    if (domain.includes('vidsrc.to') || domain.includes('vidsrc.cc') || domain.includes('vidsrc.org')) {\n      // These domains use the /embed/movie/ID pattern\n      baseUrl = type === 'movie' ? `${domain}/movie/${id}` : `${domain}/tv/${id}/${season}/${episode}`;\n    } else if (domain.includes('vidsrc.me')) {\n      // vidsrc.me uses direct embed pattern\n      baseUrl = type === 'movie' ? `${domain}/movie/${id}` : `${domain}/tv/${id}/${season}/${episode}`;\n    } else {\n      // Default pattern for other domains\n      baseUrl = type === 'movie' ? `${domain}/movie/${id}` : `${domain}/tv/${id}/${season}/${episode}`;\n    }\n    return quality !== 'auto' ? `${baseUrl}?q=${quality}` : baseUrl;\n  }\n  recordFailure() {\n    this.retryCount++;\n    if (this.retryCount >= this.maxRetries) {\n      this.reset();\n      throw new Error('All streaming sources failed');\n    }\n  }\n  recordSuccess() {\n    this.retryCount = 0;\n    this.currentIndex = 0;\n    this.domainLevel = 0;\n  }\n  reset() {\n    this.currentIndex = 0;\n    this.retryCount = 0;\n    this.domainLevel = 0;\n  }\n  getCurrentDomain() {\n    const domains = this.getDomainsForCurrentLevel();\n    return domains[this.currentIndex % domains.length];\n  }\n}\n\n// Error Recovery Manager Class\nclass ErrorRecoveryManager {\n  constructor(fallbackManager) {\n    this.fallbackManager = fallbackManager;\n    this.recoveryStrategies = new Map();\n    this.initializeStrategies();\n  }\n  initializeStrategies() {\n    this.recoveryStrategies.set(StreamErrorTypes.NETWORK_ERROR, this.handleNetworkError.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.TIMEOUT_ERROR, this.handleTimeoutError.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.PLAYER_ERROR, this.handlePlayerError.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.CONTENT_NOT_FOUND, this.handleContentNotFound.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.QUALITY_UNAVAILABLE, this.handleQualityError.bind(this));\n  }\n  async recover(error, context) {\n    const strategy = this.recoveryStrategies.get(error.type);\n    if (strategy) {\n      return await strategy(error, context);\n    }\n    throw error;\n  }\n  async handleNetworkError(error, context) {\n    // Wait with exponential backoff\n    const delay = this.calculateBackoffDelay(context.retryCount);\n    await this.delay(delay);\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, context.quality);\n  }\n  async handleTimeoutError(error, context) {\n    // Reduce quality and retry\n    const newQuality = this.reduceQuality(context.quality);\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, newQuality);\n  }\n  async handlePlayerError(error, context) {\n    // Try different domain\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, context.quality);\n  }\n  async handleContentNotFound(error, context) {\n    // Try alternative sources\n    this.fallbackManager.domainLevel = 2; // Use alternative domains\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, context.quality);\n  }\n  async handleQualityError(error, context) {\n    // Reduce quality and retry\n    const newQuality = this.reduceQuality(context.quality);\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, newQuality);\n  }\n  calculateBackoffDelay(retryCount) {\n    // Enhanced exponential backoff with jitter (November 2025)\n    const baseDelay = 1000 * Math.pow(2, retryCount);\n    const jitter = Math.random() * 1000; // Add random jitter up to 1 second\n    return Math.min(baseDelay + jitter, 15000); // Max 15 seconds\n  }\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Enhanced quality reduction strategy\n  reduceQuality(currentQuality) {\n    const qualityHierarchy = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P, QualityOptions.Q360P];\n    const currentIndex = qualityHierarchy.indexOf(currentQuality);\n    if (currentIndex < qualityHierarchy.length - 1) {\n      return qualityHierarchy[currentIndex + 1];\n    }\n    return QualityOptions.Q360P;\n  }\n  reduceQuality(currentQuality) {\n    const qualityHierarchy = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P, QualityOptions.Q360P];\n    const currentIndex = qualityHierarchy.indexOf(currentQuality);\n    if (currentIndex < qualityHierarchy.length - 1) {\n      return qualityHierarchy[currentIndex + 1];\n    }\n    return QualityOptions.Q360P;\n  }\n}\n\n// Performance Monitor Class\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = {\n      streamLoadTime: [],\n      bufferingEvents: [],\n      qualitySwitches: [],\n      errorRates: [],\n      userEngagement: []\n    };\n    this.startTime = null;\n  }\n  startTracking() {\n    this.startTime = Date.now();\n  }\n  trackStreamLoadTime(endTime) {\n    if (!this.startTime) return;\n    const loadTime = endTime - this.startTime;\n    this.metrics.streamLoadTime.push(loadTime);\n    if (loadTime > 10000) {\n      // 10 seconds\n      console.warn('Slow stream loading detected:', loadTime);\n    }\n  }\n  trackBufferingEvent(duration) {\n    this.metrics.bufferingEvents.push({\n      timestamp: Date.now(),\n      duration\n    });\n  }\n  trackQualitySwitch(from, to) {\n    this.metrics.qualitySwitches.push({\n      timestamp: Date.now(),\n      from,\n      to\n    });\n  }\n  trackError(error) {\n    this.metrics.errorRates.push({\n      timestamp: Date.now(),\n      error: error.message\n    });\n  }\n  generateReport() {\n    const loadTimes = this.metrics.streamLoadTime;\n    return {\n      averageLoadTime: loadTimes.length > 0 ? loadTimes.reduce((a, b) => a + b, 0) / loadTimes.length : 0,\n      bufferingFrequency: this.metrics.bufferingEvents.length,\n      qualitySwitchCount: this.metrics.qualitySwitches.length,\n      errorCount: this.metrics.errorRates.length,\n      successRate: this.calculateSuccessRate()\n    };\n  }\n  calculateSuccessRate() {\n    const totalAttempts = this.metrics.streamLoadTime.length + this.metrics.errorRates.length;\n    return totalAttempts > 0 ? this.metrics.streamLoadTime.length / totalAttempts * 100 : 0;\n  }\n}\n\n// Global instances\nconst fallbackManager = new FallbackManager();\nconst errorRecoveryManager = new ErrorRecoveryManager(fallbackManager);\nconst performanceMonitor = new PerformanceMonitor();\nexport const vidsrcApi = {\n  // Enhanced streaming URL generation with fallback support\n  getMovieStream: (tmdbId, options = {}) => {\n    const {\n      quality = 'auto',\n      useFallback = true\n    } = options;\n    try {\n      const url = useFallback ? fallbackManager.getNextUrl('movie', tmdbId, null, null, quality) : `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n      return {\n        url,\n        type: 'movie',\n        provider: 'vidsrc',\n        embeddable: true,\n        quality,\n        fallbackSupported: useFallback\n      };\n    } catch (error) {\n      return this.getErrorStream('movie', tmdbId, error);\n    }\n  },\n  // Enhanced TV streaming with fallback support\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      quality = 'auto',\n      useFallback = true\n    } = options;\n    try {\n      const url = useFallback ? fallbackManager.getNextUrl('tv', tmdbId, season, episode, quality) : `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n      return {\n        url,\n        type: 'tv',\n        provider: 'vidsrc',\n        embeddable: true,\n        season,\n        episode,\n        quality,\n        fallbackSupported: useFallback\n      };\n    } catch (error) {\n      return this.getErrorStream('tv', tmdbId, error, season, episode);\n    }\n  },\n  // Get error stream for failed requests\n  getErrorStream: (type, id, error, season = null, episode = null) => {\n    return {\n      url: '',\n      type,\n      provider: 'error',\n      embeddable: false,\n      error: error.message,\n      season,\n      episode\n    };\n  },\n  // Try alternative URL patterns for better compatibility (November 2025)\n  tryAlternativeUrls: (tmdbId, type, season = null, episode = null) => {\n    const alternatives = [];\n\n    // Try current working VidSrc domains from research\n    const domains = ['https://vidsrc.me/embed', 'https://vidsrc.in/embed', 'https://vidsrc.net/embed', 'https://vidsrc.xyz/embed', 'https://vidsrc.io/embed', 'https://vidsrc.vc/embed', 'https://vidsrc.bz/embed', 'https://vidsrc.gd/embed', 'https://vidsrc.do/embed', 'https://vidsrc.mn/embed', 'https://vidsrc.tw/embed'];\n    domains.forEach(domain => {\n      if (type === 'movie') {\n        alternatives.push(`${domain}/movie/${tmdbId}`);\n      } else {\n        alternatives.push(`${domain}/tv/${tmdbId}/${season || 1}/${episode || 1}`);\n      }\n    });\n\n    // Add alternative streaming sources\n    const altSources = [`https://embedsu.com/embed/${tmdbId}`, `https://2embed.cc/embed/${tmdbId}`, `https://autoembed.cc/embed/${tmdbId}`, `https://vidsrcsu.com/embed/${tmdbId}`];\n    alternatives.push(...altSources);\n    return alternatives;\n  },\n  // Enhanced multiple streaming sources with quality options\n  getMovieSources: (tmdbId, options = {}) => {\n    const {\n      includeAlternatives = true,\n      quality = 'auto'\n    } = options;\n    const sources = [];\n\n    // Primary VidSrc sources with different qualities\n    const qualities = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    qualities.forEach((q, index) => {\n      sources.push({\n        id: `vidsrc-${q}`,\n        name: `VidSrc ${q.toUpperCase()}`,\n        url: fallbackManager.getNextUrl('movie', tmdbId, null, null, q),\n        embeddable: true,\n        quality: q,\n        provider: 'vidsrc',\n        primary: index === 0\n      });\n    });\n\n    // Backup domains for primary quality\n    if (includeAlternatives) {\n      VIDSRC_DOMAINS.fallbacks.forEach((domain, index) => {\n        sources.push({\n          id: `vidsrc-backup-${index}`,\n          name: `VidSrc Backup ${index + 1}`,\n          url: `${domain}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`,\n          embeddable: true,\n          quality: quality,\n          provider: 'vidsrc',\n          backup: true\n        });\n      });\n\n      // Alternative sources\n      sources.push({\n        id: 'vidsrcdomains',\n        name: 'VidSrc Domains',\n        url: `${EMBED_SOURCES.vidsrcdomains.baseUrl}movie/${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'vidsrcdomains'\n      });\n      sources.push({\n        id: 'embedsu',\n        name: 'EmbedSu',\n        url: `${EMBED_SOURCES.embedsu.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'embedsu'\n      });\n      sources.push({\n        id: 'embed2',\n        name: '2Embed',\n        url: `${EMBED_SOURCES.embed2.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'embed2'\n      });\n      sources.push({\n        id: 'autoembed',\n        name: 'AutoEmbed',\n        url: `${EMBED_SOURCES.autoembed.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'autoembed'\n      });\n      sources.push({\n        id: 'vidsrcsu',\n        name: 'VidSrcSu',\n        url: `${EMBED_SOURCES.vidsrcsu.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'vidsrcsu'\n      });\n      sources.push({\n        id: 'vidsrcpk',\n        name: 'VidSrcPK',\n        url: `${EMBED_SOURCES.vidsrcpk.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'vidsrcpk'\n      });\n      sources.push({\n        id: 'embedsoap',\n        name: 'EmbedSoap',\n        url: `${EMBED_SOURCES.embedsoap.baseUrl}?id=${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'embedsoap'\n      });\n      sources.push({\n        id: 'smashystream',\n        name: 'SmashyStream',\n        url: `${EMBED_SOURCES.smashystream.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'smashystream'\n      });\n      sources.push({\n        id: 'multiembed',\n        name: 'MultiEmbed',\n        url: `${EMBED_SOURCES.multiembed.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'multiembed'\n      });\n      sources.push({\n        id: 'vidplay',\n        name: 'VidPlay',\n        url: `${EMBED_SOURCES.vidplay.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'vidplay'\n      });\n      sources.push({\n        id: 'solarmovie',\n        name: 'SolarMovie',\n        url: `${EMBED_SOURCES.solarmovie.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'solarmovie'\n      });\n      sources.push({\n        id: 'flixhq',\n        name: 'FlixHQ',\n        url: `${EMBED_SOURCES.flixhq.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'flixhq'\n      });\n      sources.push({\n        id: 'solarmovie',\n        name: 'SolarMovie',\n        url: `${EMBED_SOURCES.solarmovie.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'solarmovie'\n      });\n      sources.push({\n        id: 'fmovies',\n        name: 'FMovies',\n        url: `${EMBED_SOURCES.fmovies.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'fmovies'\n      });\n      sources.push({\n        id: 'lookmovie',\n        name: 'LookMovie',\n        url: `${EMBED_SOURCES.lookmovie.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'lookmovie'\n      });\n      sources.push({\n        id: 'sflix',\n        name: 'SFlix',\n        url: `${EMBED_SOURCES.sflix.baseUrl}${tmdbId}`,\n        embeddable: true,\n        quality: 'HD',\n        provider: 'sflix'\n      });\n    }\n    return sources;\n  },\n  // Enhanced TV sources with quality options\n  getTVSources: (tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      includeAlternatives = true,\n      quality = 'auto'\n    } = options;\n    const sources = [];\n\n    // Primary VidSrc sources with different qualities\n    const qualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    qualities.forEach((q, index) => {\n      sources.push({\n        id: `vidsrc-${q}`,\n        name: `VidSrc ${q.toUpperCase()}`,\n        url: fallbackManager.getNextUrl('tv', tmdbId, season, episode, q),\n        embeddable: true,\n        quality: q,\n        provider: 'vidsrc',\n        season,\n        episode,\n        primary: index === 0\n      });\n    });\n\n    // Backup domains for primary quality\n    if (includeAlternatives) {\n      VIDSRC_DOMAINS.fallbacks.forEach((domain, index) => {\n        sources.push({\n          id: `vidsrc-backup-${index}`,\n          name: `VidSrc Backup ${index + 1}`,\n          url: `${domain}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`,\n          embeddable: true,\n          quality: quality,\n          provider: 'vidsrc',\n          season,\n          episode,\n          backup: true\n        });\n      });\n    }\n    return sources;\n  },\n  // Check if streaming is available for a movie\n  checkAvailability: async (tmdbId, type = 'movie') => {\n    try {\n      // VidSrc doesn't have a formal availability check API\n      // We assume content is available if it has a valid TMDB ID\n      return {\n        available: true,\n        provider: 'vidsrc',\n        embeddable: true,\n        message: 'Streaming available via VidSrc'\n      };\n    } catch (error) {\n      return {\n        available: false,\n        provider: 'vidsrc',\n        embeddable: false,\n        message: 'Streaming temporarily unavailable'\n      };\n    }\n  },\n  // Get streaming quality information\n  getQualityInfo: () => {\n    return {\n      default: '1080p',\n      available: ['720p', '1080p', '4K'],\n      note: 'Quality automatically adjusts based on connection speed'\n    };\n  },\n  // Get supported regions\n  getSupportedRegions: () => {\n    return {\n      regionsn      note: 'VidSrc works globally with no regional restrictions'\n    };\n  },\n  // Enhanced error handling with recovery\n  handleStreamError: async (error, context) => {\n    performanceMonitor.trackError(error);\n    try {\n      const recoveredUrl = await errorRecoveryManager.recover(error, context);\n      fallbackManager.recordSuccess();\n      return {\n        success: true,\n        url: recoveredUrl,\n        recovered: true\n      };\n    } catch (recoveryError) {\n      fallbackManager.recordFailure();\n      return {\n        success: false,\n        error: recoveryError.message,\n        fallbackExhausted: true\n      };\n    }\n  },\n  // Get available quality options\n  getQualityOptions: (contentType = 'movie') => {\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    if (contentType === 'movie') {\n      baseQualities.unshift(QualityOptions.Q4K);\n    }\n    return baseQualities;\n  },\n  // Test stream availability with enhanced error handling (November 2025)\n  testStream: async (url, timeout = 8000) => {\n    const startTime = Date.now();\n\n    // Create a timeout promise with AbortController for better control\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    try {\n      // Try HEAD request first (more efficient)\n      const response = await fetch(url, {\n        method: 'HEAD',\n        mode: 'no-cors',\n        signal: controller.signal,\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        }\n      });\n      clearTimeout(timeoutId);\n      const loadTime = Date.now() - startTime;\n      performanceMonitor.trackStreamLoadTime(Date.now());\n      return {\n        available: true,\n        loadTime,\n        url,\n        responseTime: loadTime,\n        method: 'HEAD'\n      };\n    } catch (headError) {\n      try {\n        // If HEAD fails, try GET request\n        const getResponse = await fetch(url, {\n          method: 'GET',\n          mode: 'no-cors',\n          signal: controller.signal,\n          headers: {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n          }\n        });\n        clearTimeout(timeoutId);\n        const loadTime = Date.now() - startTime;\n        performanceMonitor.trackStreamLoadTime(Date.now());\n        return {\n          available: true,\n          loadTime,\n          url,\n          responseTime: loadTime,\n          method: 'GET'\n        };\n      } catch (getError) {\n        clearTimeout(timeoutId);\n        const loadTime = Date.now() - startTime;\n        performanceMonitor.trackStreamLoadTime(Date.now());\n\n        // Enhanced error classification based on November 2025 standards\n        let errorType = StreamErrorTypes.NETWORK_ERROR;\n        let errorMessage = getError.message;\n        if (getError.name === 'AbortError' || getError.message.includes('timeout') || getError.message.includes('aborted')) {\n          errorType = StreamErrorTypes.TIMEOUT_ERROR;\n          errorMessage = 'Request timeout - server took too long to respond';\n        } else if (getError.message.includes('404') || getError.message.includes('Not Found')) {\n          errorType = StreamErrorTypes.CONTENT_NOT_FOUND;\n          errorMessage = 'Video not found on this server';\n        } else if (getError.message.includes('403') || getError.message.includes('Forbidden')) {\n          errorType = StreamErrorTypes.GEO_BLOCKED;\n          errorMessage = 'Content blocked in your region';\n        } else if (getError.message.includes('NetworkError') || getError.message.includes('Failed to fetch')) {\n          errorType = StreamErrorTypes.NETWORK_ERROR;\n          errorMessage = 'Network connection failed';\n        }\n        return {\n          available: false,\n          loadTime,\n          error: errorMessage,\n          errorType,\n          url,\n          responseTime: loadTime,\n          retryable: errorType !== StreamErrorTypes.CONTENT_NOT_FOUND\n        };\n      }\n    }\n  },\n  // Get performance metrics\n  getPerformanceReport: () => {\n    return performanceMonitor.generateReport();\n  },\n  // Test multiple sources and return the first working one\n  testMultipleSources: async (sources, options = {}) => {\n    const {\n      timeout = 8000,\n      maxConcurrent = 3\n    } = options;\n    const workingSources = [];\n    const failedSources = [];\n\n    // Test sources in batches to avoid overwhelming servers\n    for (let i = 0; i < sources.length; i += maxConcurrent) {\n      const batch = sources.slice(i, i + maxConcurrent);\n      const batchPromises = batch.map(async source => {\n        try {\n          const result = await this.testStream(source.url, timeout);\n          return {\n            source,\n            result\n          };\n        } catch (error) {\n          return {\n            source,\n            result: {\n              available: false,\n              error: error.message,\n              errorType: 'TEST_ERROR'\n            }\n          };\n        }\n      });\n      const batchResults = await Promise.all(batchPromises);\n      batchResults.forEach(({\n        source,\n        result\n      }) => {\n        if (result.available) {\n          workingSources.push({\n            ...source,\n            testResult: result\n          });\n        } else {\n          failedSources.push({\n            ...source,\n            testResult: result\n          });\n        }\n      });\n    }\n    return {\n      working: workingSources,\n      failed: failedSources,\n      total: sources.length,\n      successRate: sources.length > 0 ? workingSources.length / sources.length * 100 : 0\n    };\n  },\n  // Get best available source with automatic testing\n  getBestAvailableSource: async (tmdbId, type, season = null, episode = null, options = {}) => {\n    const {\n      testSources = true,\n      quality = 'auto'\n    } = options;\n\n    // Get all available sources\n    const sources = type === 'movie' ? this.getMovieSources(tmdbId, {\n      includeAlternatives: true,\n      quality\n    }) : this.getTVSources(tmdbId, season, episode, {\n      includeAlternatives: true,\n      quality\n    });\n    if (!testSources) {\n      return sources[0]; // Return first source without testing\n    }\n\n    // Test sources and return the first working one\n    const testResult = await this.testMultipleSources(sources);\n    if (testResult.working.length > 0) {\n      return testResult.working[0];\n    }\n\n    // If no sources work, return the primary source with error info\n    return {\n      ...sources[0],\n      testResult: {\n        available: false,\n        error: 'No working sources found',\n        errorType: 'ALL_SOURCES_FAILED'\n      }\n    };\n  },\n  // Reset fallback manager\n  resetFallbackManager: () => {\n    fallbackManager.reset();\n    performanceMonitor.startTracking();\n  },\n  // Get current fallback status\n  getFallbackStatus: () => {\n    return {\n      currentDomain: fallbackManager.getCurrentDomain(),\n      retryCount: fallbackManager.retryCount,\n      domainLevel: fallbackManager.domainLevel,\n      maxRetries: fallbackManager.maxRetries\n    };\n  },\n  // Create secure iframe embed\n  createSecureEmbed: (streamData, options = {}) => {\n    const {\n      width = '100%',\n      height = '500',\n      autoplay = false,\n      muted = false,\n      controls = true,\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\n    } = options;\n    const embedUrl = streamData.url;\n    return {\n      iframe: `<iframe\n        src=\"${embedUrl}\"\n        width=\"${width}\"\n        height=\"${height}\"\n        frameborder=\"0\"\n        allowfullscreen\n        ${autoplay ? 'autoplay' : ''}\n        ${muted ? 'muted' : ''}\n        ${controls ? '' : 'controls=\"false\"'}\n        sandbox=\"${sandbox}\"\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\n        referrerpolicy=\"strict-origin-when-cross-origin\"\n        loading=\"lazy\"\n      ></iframe>`,\n      url: embedUrl,\n      type: streamData.type,\n      provider: streamData.provider,\n      security: {\n        sandbox,\n        referrerPolicy: 'strict-origin-when-cross-origin',\n        cspCompliant: true\n      }\n    };\n  }\n};\n\n// Helper function to create iframe embed code\nexport const createEmbedCode = (streamData, options = {}) => {\n  const {\n    width = '100%',\n    height = '500',\n    autoplay = false,\n    muted = false,\n    controls = true\n  } = options;\n  const embedUrl = streamData.url;\n  return {\n    iframe: `<iframe\n      src=\"${embedUrl}\"\n      width=\"${width}\"\n      height=\"${height}\"\n      frameborder=\"0\"\n      allowfullscreen\n      ${autoplay ? 'autoplay' : ''}\n      ${muted ? 'muted' : ''}\n      ${controls ? '' : 'controls=\"false\"'}\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\n    ></iframe>`,\n    url: embedUrl,\n    type: streamData.type,\n    provider: streamData.provider\n  };\n};\n\n// Error handling for streaming\nexport const handleStreamError = (error, fallbackSources = []) => {\n  console.error('Streaming error:', error);\n  if (fallbackSources.length > 0) {\n    return {\n      success: false,\n      error: error.message,\n      fallback: fallbackSources[0],\n      hasFallback: true\n    };\n  }\n  return {\n    success: false,\n    error: error.message,\n    hasFallback: false\n  };\n};\nexport default vidsrcApi;\n\n// Test function to verify video streaming functionality\nexport const testVideoStreaming = async () => {\n  console.log('🧪 Testing Video Streaming Functionality...');\n\n  // Test data\n  const testMovieId = '550'; // Fight Club\n  const testTVId = '1399'; // Game of Thrones\n\n  try {\n    // Test 1: Get movie sources\n    console.log('\\n📽️ Testing Movie Sources...');\n    const movieSources = vidsrcApi.getMovieSources(testMovieId, {\n      includeAlternatives: true\n    });\n    console.log(`Found ${movieSources.length} movie sources`);\n\n    // Test 2: Get TV sources\n    console.log('\\n📺 Testing TV Sources...');\n    const tvSources = vidsrcApi.getTVSources(testTVId, 1, 1, {\n      includeAlternatives: true\n    });\n    console.log(`Found ${tvSources.length} TV sources`);\n\n    // Test 3: Test a few sources\n    console.log('\\n🔍 Testing Source Availability...');\n    const testSources = movieSources.slice(0, 3); // Test first 3 sources\n\n    for (const source of testSources) {\n      try {\n        console.log(`Testing ${source.name}...`);\n        const result = await vidsrcApi.testStream(source.url, 5000);\n        console.log(`✅ ${source.name}: ${result.available ? 'Available' : 'Failed'} (${result.loadTime}ms)`);\n      } catch (error) {\n        console.log(`❌ ${source.name}: Error - ${error.message}`);\n      }\n    }\n\n    // Test 4: Test fallback system\n    console.log('\\n🔄 Testing Fallback System...');\n    const fallbackStatus = vidsrcApi.getFallbackStatus();\n    console.log('Fallback Status:', fallbackStatus);\n\n    // Test 5: Test alternative URLs\n    console.log('\\n🔗 Testing Alternative URLs...');\n    const altUrls = vidsrcApi.tryAlternativeUrls(testMovieId, 'movie');\n    console.log(`Found ${altUrls.length} alternative URLs`);\n    console.log('\\n✅ Video streaming test completed!');\n    return {\n      success: true,\n      movieSources: movieSources.length,\n      tvSources: tvSources.length,\n      alternativeUrls: altUrls.length\n    };\n  } catch (error) {\n    console.error('❌ Video streaming test failed:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["VIDSRC_DOMAINS","primary","fallbacks","alternative","QualityOptions","AUTO","Q4K","Q1080P","Q720P","Q480P","Q360P","StreamErrorTypes","NETWORK_ERROR","TIMEOUT_ERROR","PLAYER_ERROR","CONTENT_NOT_FOUND","GEO_BLOCKED","QUALITY_UNAVAILABLE","EMBED_SOURCES","vidsrc","name","baseUrl","supports","vidsrcdomains","embedsu","embed2","autoembed","vidsrcsu","vidsrcpk","embedsoap","smashystream","multiembed","vidplay","solarmovie","flixhq","fmovies","lookmovie","sflix","FallbackManager","constructor","currentIndex","retryCount","maxRetries","domainLevel","getDomainsForCurrentLevel","getNextUrl","type","id","season","episode","quality","domains","domain","length","Math","min","includes","recordFailure","reset","Error","recordSuccess","getCurrentDomain","ErrorRecoveryManager","fallbackManager","recoveryStrategies","Map","initializeStrategies","set","handleNetworkError","bind","handleTimeoutError","handlePlayerError","handleContentNotFound","handleQualityError","recover","error","context","strategy","get","delay","calculateBackoffDelay","newQuality","reduceQuality","baseDelay","pow","jitter","random","ms","Promise","resolve","setTimeout","currentQuality","qualityHierarchy","indexOf","PerformanceMonitor","metrics","streamLoadTime","bufferingEvents","qualitySwitches","errorRates","userEngagement","startTime","startTracking","Date","now","trackStreamLoadTime","endTime","loadTime","push","console","warn","trackBufferingEvent","duration","timestamp","trackQualitySwitch","from","to","trackError","message","generateReport","loadTimes","averageLoadTime","reduce","a","b","bufferingFrequency","qualitySwitchCount","errorCount","successRate","calculateSuccessRate","totalAttempts","errorRecoveryManager","performanceMonitor","vidsrcApi","getMovieStream","tmdbId","options","useFallback","url","provider","embeddable","fallbackSupported","getErrorStream","getTVStream","tryAlternativeUrls","alternatives","forEach","altSources","getMovieSources","includeAlternatives","sources","qualities","q","index","toUpperCase","backup","getTVSources","checkAvailability","available","getQualityInfo","default","note","getSupportedRegions","regions","handleStreamError","recoveredUrl","success","recovered","recoveryError","fallbackExhausted","getQualityOptions","contentType","baseQualities","unshift","testStream","timeout","controller","AbortController","timeoutId","abort","response","fetch","method","mode","signal","headers","clearTimeout","responseTime","headError","getResponse","getError","errorType","errorMessage","retryable","getPerformanceReport","testMultipleSources","maxConcurrent","workingSources","failedSources","i","batch","slice","batchPromises","map","source","result","batchResults","all","testResult","working","failed","total","getBestAvailableSource","testSources","resetFallbackManager","getFallbackStatus","currentDomain","createSecureEmbed","streamData","width","height","autoplay","muted","controls","sandbox","embedUrl","iframe","security","referrerPolicy","cspCompliant","createEmbedCode","fallbackSources","fallback","hasFallback","testVideoStreaming","log","testMovieId","testTVId","movieSources","tvSources","fallbackStatus","altUrls","alternativeUrls"],"sources":["c:/Users/VASU/Desktop/task/src/services/vidsrcApi.js"],"sourcesContent":["// VidSrc API service for streaming integration\r\n// No API key required - uses TMDB IDs directly\r\n\r\n// Enhanced domain configuration with multiple fallback levels (November 2025)\r\nconst VIDSRC_DOMAINS = {\r\n  primary: 'https://vidsrc.to/embed',\r\n  fallbacks: [\r\n    'https://vidsrc.cc/embed',\r\n    'https://vidsrc.org/embed',\r\n    'https://vidsrc.me/embed',\r\n    'https://vidsrc.net/embed',\r\n    'https://vidsrc.xyz/embed',\r\n    'https://vidsrc.io/embed',\r\n    'https://vidsrc.vc/embed',\r\n    'https://vidsrc.bz/embed',\r\n    'https://vidsrc.gd/embed'\r\n  ],\r\n  alternative: [\r\n    'https://embedsu.com/embed',\r\n    'https://2embed.cc/embed',\r\n    'https://autoembed.cc/embed',\r\n    'https://vidsrcsu.com/embed',\r\n    'https://vidsrc.pk/embed',\r\n    'https://www.2embed.cc/embed',\r\n    'https://embed.su/embed',\r\n    'https://autoembed.cc/embed'\r\n  ]\r\n};\r\n\r\n// Quality options for streaming\r\nconst QualityOptions = {\r\n  AUTO: 'auto',\r\n  Q4K: '4k',\r\n  Q1080P: '1080p',\r\n  Q720P: '720p',\r\n  Q480P: '480p',\r\n  Q360P: '360p'\r\n};\r\n\r\n// Error types for better error handling\r\nconst StreamErrorTypes = {\r\n  NETWORK_ERROR: 'NETWORK_ERROR',\r\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\r\n  PLAYER_ERROR: 'PLAYER_ERROR',\r\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\r\n  GEO_BLOCKED: 'GEO_BLOCKED',\r\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\r\n};\r\n\r\n// Alternative streaming sources for fallback (November 2025)\r\nconst EMBED_SOURCES = {\r\n  vidsrc: {\r\n    name: 'VidSrc',\r\n    baseUrl: 'https://vidsrc.me/embed',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  vidsrcdomains: {\r\n    name: 'VidSrc Domains',\r\n    baseUrl: 'https://vidsrc.domains/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  embedsu: {\r\n    name: 'EmbedSu',\r\n    baseUrl: 'https://embedsu.com/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  embed2: {\r\n    name: '2Embed',\r\n    baseUrl: 'https://2embed.cc/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  autoembed: {\r\n    name: 'AutoEmbed',\r\n    baseUrl: 'https://autoembed.cc/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  vidsrcsu: {\r\n    name: 'VidSrcSu',\r\n    baseUrl: 'https://vidsrcsu.com/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  vidsrcpk: {\r\n    name: 'VidSrcPK',\r\n    baseUrl: 'https://vidsrc.pk/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  embedsoap: {\r\n    name: 'EmbedSoap',\r\n    baseUrl: 'https://www.embedsoap.com/embed/movie/',\r\n    supports: ['movie']\r\n  },\r\n  smashystream: {\r\n    name: 'SmashyStream',\r\n    baseUrl: 'https://player.smashystream.com/movie/',\r\n    supports: ['movie']\r\n  },\r\n  multiembed: {\r\n    name: 'MultiEmbed',\r\n    baseUrl: 'https://multiembed.mov/directstream.php?video_id=',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  vidplay: {\r\n    name: 'VidPlay',\r\n    baseUrl: 'https://vidplay.online/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  solarmovie: {\r\n    name: 'SolarMovie',\r\n    baseUrl: 'https://www.solarmovie.pe/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  flixhq: {\r\n    name: 'FlixHQ',\r\n    baseUrl: 'https://flixhq.to/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  solarmovie: {\r\n    name: 'SolarMovie',\r\n    baseUrl: 'https://www.solarmovie.pe/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  fmovies: {\r\n    name: 'FMovies',\r\n    baseUrl: 'https://fmovies.to/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  lookmovie: {\r\n    name: 'LookMovie',\r\n    baseUrl: 'https://lookmovie.io/embed/',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  sflix: {\r\n    name: 'SFlix',\r\n    baseUrl: 'https://sflix.to/embed/',\r\n    supports: ['movie', 'tv']\r\n  }\r\n};\r\n\r\n// Fallback Manager Class\r\nclass FallbackManager {\r\n  constructor() {\r\n    this.currentIndex = 0;\r\n    this.retryCount = 0;\r\n    this.maxRetries = 3;\r\n    this.domainLevel = 0; // 0 = primary, 1 = fallbacks, 2 = alternative\r\n  }\r\n\r\n  getDomainsForCurrentLevel() {\r\n    switch (this.domainLevel) {\r\n      case 0:\r\n        return [VIDSRC_DOMAINS.primary];\r\n      case 1:\r\n        return VIDSRC_DOMAINS.fallbacks;\r\n      case 2:\r\n        return VIDSRC_DOMAINS.alternative;\r\n      default:\r\n        return [VIDSRC_DOMAINS.primary];\r\n    }\r\n  }\r\n\r\n  getNextUrl(type, id, season = null, episode = null, quality = 'auto') {\r\n    const domains = this.getDomainsForCurrentLevel();\r\n    const domain = domains[this.currentIndex % domains.length];\r\n\r\n    this.currentIndex++;\r\n\r\n    // Move to next domain level if we've tried all domains in current level\r\n    if (this.currentIndex >= domains.length) {\r\n      this.currentIndex = 0;\r\n      this.domainLevel = Math.min(this.domainLevel + 1, 2);\r\n    }\r\n\r\n    // Use correct URL patterns based on research (November 2025)\r\n    let baseUrl;\r\n\r\n    // Different URL patterns for different domains\r\n    if (domain.includes('vidsrc.to') || domain.includes('vidsrc.cc') || domain.includes('vidsrc.org')) {\r\n      // These domains use the /embed/movie/ID pattern\r\n      baseUrl = type === 'movie'\r\n        ? `${domain}/movie/${id}`\r\n        : `${domain}/tv/${id}/${season}/${episode}`;\r\n    } else if (domain.includes('vidsrc.me')) {\r\n      // vidsrc.me uses direct embed pattern\r\n      baseUrl = type === 'movie'\r\n        ? `${domain}/movie/${id}`\r\n        : `${domain}/tv/${id}/${season}/${episode}`;\r\n    } else {\r\n      // Default pattern for other domains\r\n      baseUrl = type === 'movie'\r\n        ? `${domain}/movie/${id}`\r\n        : `${domain}/tv/${id}/${season}/${episode}`;\r\n    }\r\n\r\n    return quality !== 'auto' ? `${baseUrl}?q=${quality}` : baseUrl;\r\n  }\r\n\r\n  recordFailure() {\r\n    this.retryCount++;\r\n    if (this.retryCount >= this.maxRetries) {\r\n      this.reset();\r\n      throw new Error('All streaming sources failed');\r\n    }\r\n  }\r\n\r\n  recordSuccess() {\r\n    this.retryCount = 0;\r\n    this.currentIndex = 0;\r\n    this.domainLevel = 0;\r\n  }\r\n\r\n  reset() {\r\n    this.currentIndex = 0;\r\n    this.retryCount = 0;\r\n    this.domainLevel = 0;\r\n  }\r\n\r\n  getCurrentDomain() {\r\n    const domains = this.getDomainsForCurrentLevel();\r\n    return domains[this.currentIndex % domains.length];\r\n  }\r\n}\r\n\r\n// Error Recovery Manager Class\r\nclass ErrorRecoveryManager {\r\n  constructor(fallbackManager) {\r\n    this.fallbackManager = fallbackManager;\r\n    this.recoveryStrategies = new Map();\r\n    this.initializeStrategies();\r\n  }\r\n\r\n  initializeStrategies() {\r\n    this.recoveryStrategies.set(StreamErrorTypes.NETWORK_ERROR, this.handleNetworkError.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.TIMEOUT_ERROR, this.handleTimeoutError.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.PLAYER_ERROR, this.handlePlayerError.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.CONTENT_NOT_FOUND, this.handleContentNotFound.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.QUALITY_UNAVAILABLE, this.handleQualityError.bind(this));\r\n  }\r\n\r\n  async recover(error, context) {\r\n    const strategy = this.recoveryStrategies.get(error.type);\r\n    if (strategy) {\r\n      return await strategy(error, context);\r\n    }\r\n    throw error;\r\n  }\r\n\r\n  async handleNetworkError(error, context) {\r\n    // Wait with exponential backoff\r\n    const delay = this.calculateBackoffDelay(context.retryCount);\r\n    await this.delay(delay);\r\n\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      context.quality\r\n    );\r\n  }\r\n\r\n  async handleTimeoutError(error, context) {\r\n    // Reduce quality and retry\r\n    const newQuality = this.reduceQuality(context.quality);\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      newQuality\r\n    );\r\n  }\r\n\r\n  async handlePlayerError(error, context) {\r\n    // Try different domain\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      context.quality\r\n    );\r\n  }\r\n\r\n  async handleContentNotFound(error, context) {\r\n    // Try alternative sources\r\n    this.fallbackManager.domainLevel = 2; // Use alternative domains\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      context.quality\r\n    );\r\n  }\r\n\r\n  async handleQualityError(error, context) {\r\n    // Reduce quality and retry\r\n    const newQuality = this.reduceQuality(context.quality);\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      newQuality\r\n    );\r\n  }\r\n\r\n  calculateBackoffDelay(retryCount) {\r\n    // Enhanced exponential backoff with jitter (November 2025)\r\n    const baseDelay = 1000 * Math.pow(2, retryCount);\r\n    const jitter = Math.random() * 1000; // Add random jitter up to 1 second\r\n    return Math.min(baseDelay + jitter, 15000); // Max 15 seconds\r\n  }\r\n\r\n  delay(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  // Enhanced quality reduction strategy\r\n  reduceQuality(currentQuality) {\r\n    const qualityHierarchy = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P, QualityOptions.Q360P];\r\n    const currentIndex = qualityHierarchy.indexOf(currentQuality);\r\n\r\n    if (currentIndex < qualityHierarchy.length - 1) {\r\n      return qualityHierarchy[currentIndex + 1];\r\n    }\r\n\r\n    return QualityOptions.Q360P;\r\n  }\r\n\r\n  reduceQuality(currentQuality) {\r\n    const qualityHierarchy = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P, QualityOptions.Q360P];\r\n    const currentIndex = qualityHierarchy.indexOf(currentQuality);\r\n\r\n    if (currentIndex < qualityHierarchy.length - 1) {\r\n      return qualityHierarchy[currentIndex + 1];\r\n    }\r\n\r\n    return QualityOptions.Q360P;\r\n  }\r\n}\r\n\r\n// Performance Monitor Class\r\nclass PerformanceMonitor {\r\n  constructor() {\r\n    this.metrics = {\r\n      streamLoadTime: [],\r\n      bufferingEvents: [],\r\n      qualitySwitches: [],\r\n      errorRates: [],\r\n      userEngagement: []\r\n    };\r\n    this.startTime = null;\r\n  }\r\n\r\n  startTracking() {\r\n    this.startTime = Date.now();\r\n  }\r\n\r\n  trackStreamLoadTime(endTime) {\r\n    if (!this.startTime) return;\r\n\r\n    const loadTime = endTime - this.startTime;\r\n    this.metrics.streamLoadTime.push(loadTime);\r\n\r\n    if (loadTime > 10000) { // 10 seconds\r\n      console.warn('Slow stream loading detected:', loadTime);\r\n    }\r\n  }\r\n\r\n  trackBufferingEvent(duration) {\r\n    this.metrics.bufferingEvents.push({\r\n      timestamp: Date.now(),\r\n      duration\r\n    });\r\n  }\r\n\r\n  trackQualitySwitch(from, to) {\r\n    this.metrics.qualitySwitches.push({\r\n      timestamp: Date.now(),\r\n      from,\r\n      to\r\n    });\r\n  }\r\n\r\n  trackError(error) {\r\n    this.metrics.errorRates.push({\r\n      timestamp: Date.now(),\r\n      error: error.message\r\n    });\r\n  }\r\n\r\n  generateReport() {\r\n    const loadTimes = this.metrics.streamLoadTime;\r\n    return {\r\n      averageLoadTime: loadTimes.length > 0 ? loadTimes.reduce((a, b) => a + b, 0) / loadTimes.length : 0,\r\n      bufferingFrequency: this.metrics.bufferingEvents.length,\r\n      qualitySwitchCount: this.metrics.qualitySwitches.length,\r\n      errorCount: this.metrics.errorRates.length,\r\n      successRate: this.calculateSuccessRate()\r\n    };\r\n  }\r\n\r\n  calculateSuccessRate() {\r\n    const totalAttempts = this.metrics.streamLoadTime.length + this.metrics.errorRates.length;\r\n    return totalAttempts > 0 ? (this.metrics.streamLoadTime.length / totalAttempts) * 100 : 0;\r\n  }\r\n}\r\n\r\n// Global instances\r\nconst fallbackManager = new FallbackManager();\r\nconst errorRecoveryManager = new ErrorRecoveryManager(fallbackManager);\r\nconst performanceMonitor = new PerformanceMonitor();\r\n\r\nexport const vidsrcApi = {\r\n  // Enhanced streaming URL generation with fallback support\r\n  getMovieStream: (tmdbId, options = {}) => {\r\n    const { quality = 'auto', useFallback = true } = options;\r\n\r\n    try {\r\n      const url = useFallback\r\n        ? fallbackManager.getNextUrl('movie', tmdbId, null, null, quality)\r\n        : `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n      return {\r\n        url,\r\n        type: 'movie',\r\n        provider: 'vidsrc',\r\n        embeddable: true,\r\n        quality,\r\n        fallbackSupported: useFallback\r\n      };\r\n    } catch (error) {\r\n      return this.getErrorStream('movie', tmdbId, error);\r\n    }\r\n  },\r\n\r\n  // Enhanced TV streaming with fallback support\r\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\r\n    const { quality = 'auto', useFallback = true } = options;\r\n\r\n    try {\r\n      const url = useFallback\r\n        ? fallbackManager.getNextUrl('tv', tmdbId, season, episode, quality)\r\n        : `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n      return {\r\n        url,\r\n        type: 'tv',\r\n        provider: 'vidsrc',\r\n        embeddable: true,\r\n        season,\r\n        episode,\r\n        quality,\r\n        fallbackSupported: useFallback\r\n      };\r\n    } catch (error) {\r\n      return this.getErrorStream('tv', tmdbId, error, season, episode);\r\n    }\r\n  },\r\n\r\n  // Get error stream for failed requests\r\n  getErrorStream: (type, id, error, season = null, episode = null) => {\r\n    return {\r\n      url: '',\r\n      type,\r\n      provider: 'error',\r\n      embeddable: false,\r\n      error: error.message,\r\n      season,\r\n      episode\r\n    };\r\n  },\r\n\r\n  // Try alternative URL patterns for better compatibility (November 2025)\r\n  tryAlternativeUrls: (tmdbId, type, season = null, episode = null) => {\r\n    const alternatives = [];\r\n\r\n    // Try current working VidSrc domains from research\r\n    const domains = [\r\n      'https://vidsrc.me/embed',\r\n      'https://vidsrc.in/embed',\r\n      'https://vidsrc.net/embed',\r\n      'https://vidsrc.xyz/embed',\r\n      'https://vidsrc.io/embed',\r\n      'https://vidsrc.vc/embed',\r\n      'https://vidsrc.bz/embed',\r\n      'https://vidsrc.gd/embed',\r\n      'https://vidsrc.do/embed',\r\n      'https://vidsrc.mn/embed',\r\n      'https://vidsrc.tw/embed'\r\n    ];\r\n\r\n    domains.forEach(domain => {\r\n      if (type === 'movie') {\r\n        alternatives.push(`${domain}/movie/${tmdbId}`);\r\n      } else {\r\n        alternatives.push(`${domain}/tv/${tmdbId}/${season || 1}/${episode || 1}`);\r\n      }\r\n    });\r\n\r\n    // Add alternative streaming sources\r\n    const altSources = [\r\n      `https://embedsu.com/embed/${tmdbId}`,\r\n      `https://2embed.cc/embed/${tmdbId}`,\r\n      `https://autoembed.cc/embed/${tmdbId}`,\r\n      `https://vidsrcsu.com/embed/${tmdbId}`\r\n    ];\r\n\r\n    alternatives.push(...altSources);\r\n\r\n    return alternatives;\r\n  },\r\n\r\n  // Enhanced multiple streaming sources with quality options\r\n  getMovieSources: (tmdbId, options = {}) => {\r\n    const { includeAlternatives = true, quality = 'auto' } = options;\r\n    const sources = [];\r\n\r\n    // Primary VidSrc sources with different qualities\r\n    const qualities = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\r\n\r\n    qualities.forEach((q, index) => {\r\n      sources.push({\r\n        id: `vidsrc-${q}`,\r\n        name: `VidSrc ${q.toUpperCase()}`,\r\n        url: fallbackManager.getNextUrl('movie', tmdbId, null, null, q),\r\n        embeddable: true,\r\n        quality: q,\r\n        provider: 'vidsrc',\r\n        primary: index === 0\r\n      });\r\n    });\r\n\r\n    // Backup domains for primary quality\r\n    if (includeAlternatives) {\r\n      VIDSRC_DOMAINS.fallbacks.forEach((domain, index) => {\r\n        sources.push({\r\n          id: `vidsrc-backup-${index}`,\r\n          name: `VidSrc Backup ${index + 1}`,\r\n          url: `${domain}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`,\r\n          embeddable: true,\r\n          quality: quality,\r\n          provider: 'vidsrc',\r\n          backup: true\r\n        });\r\n      });\r\n\r\n      // Alternative sources\r\n      sources.push({\r\n        id: 'vidsrcdomains',\r\n        name: 'VidSrc Domains',\r\n        url: `${EMBED_SOURCES.vidsrcdomains.baseUrl}movie/${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'vidsrcdomains'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'embedsu',\r\n        name: 'EmbedSu',\r\n        url: `${EMBED_SOURCES.embedsu.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'embedsu'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'embed2',\r\n        name: '2Embed',\r\n        url: `${EMBED_SOURCES.embed2.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'embed2'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'autoembed',\r\n        name: 'AutoEmbed',\r\n        url: `${EMBED_SOURCES.autoembed.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'autoembed'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'vidsrcsu',\r\n        name: 'VidSrcSu',\r\n        url: `${EMBED_SOURCES.vidsrcsu.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'vidsrcsu'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'vidsrcpk',\r\n        name: 'VidSrcPK',\r\n        url: `${EMBED_SOURCES.vidsrcpk.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'vidsrcpk'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'embedsoap',\r\n        name: 'EmbedSoap',\r\n        url: `${EMBED_SOURCES.embedsoap.baseUrl}?id=${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'embedsoap'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'smashystream',\r\n        name: 'SmashyStream',\r\n        url: `${EMBED_SOURCES.smashystream.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'smashystream'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'multiembed',\r\n        name: 'MultiEmbed',\r\n        url: `${EMBED_SOURCES.multiembed.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'multiembed'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'vidplay',\r\n        name: 'VidPlay',\r\n        url: `${EMBED_SOURCES.vidplay.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'vidplay'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'solarmovie',\r\n        name: 'SolarMovie',\r\n        url: `${EMBED_SOURCES.solarmovie.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'solarmovie'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'flixhq',\r\n        name: 'FlixHQ',\r\n        url: `${EMBED_SOURCES.flixhq.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'flixhq'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'solarmovie',\r\n        name: 'SolarMovie',\r\n        url: `${EMBED_SOURCES.solarmovie.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'solarmovie'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'fmovies',\r\n        name: 'FMovies',\r\n        url: `${EMBED_SOURCES.fmovies.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'fmovies'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'lookmovie',\r\n        name: 'LookMovie',\r\n        url: `${EMBED_SOURCES.lookmovie.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'lookmovie'\r\n      });\r\n\r\n      sources.push({\r\n        id: 'sflix',\r\n        name: 'SFlix',\r\n        url: `${EMBED_SOURCES.sflix.baseUrl}${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD',\r\n        provider: 'sflix'\r\n      });\r\n    }\r\n\r\n    return sources;\r\n  },\r\n\r\n  // Enhanced TV sources with quality options\r\n  getTVSources: (tmdbId, season = 1, episode = 1, options = {}) => {\r\n    const { includeAlternatives = true, quality = 'auto' } = options;\r\n    const sources = [];\r\n\r\n    // Primary VidSrc sources with different qualities\r\n    const qualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\r\n\r\n    qualities.forEach((q, index) => {\r\n      sources.push({\r\n        id: `vidsrc-${q}`,\r\n        name: `VidSrc ${q.toUpperCase()}`,\r\n        url: fallbackManager.getNextUrl('tv', tmdbId, season, episode, q),\r\n        embeddable: true,\r\n        quality: q,\r\n        provider: 'vidsrc',\r\n        season,\r\n        episode,\r\n        primary: index === 0\r\n      });\r\n    });\r\n\r\n    // Backup domains for primary quality\r\n    if (includeAlternatives) {\r\n      VIDSRC_DOMAINS.fallbacks.forEach((domain, index) => {\r\n        sources.push({\r\n          id: `vidsrc-backup-${index}`,\r\n          name: `VidSrc Backup ${index + 1}`,\r\n          url: `${domain}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`,\r\n          embeddable: true,\r\n          quality: quality,\r\n          provider: 'vidsrc',\r\n          season,\r\n          episode,\r\n          backup: true\r\n        });\r\n      });\r\n    }\r\n\r\n    return sources;\r\n  },\r\n\r\n  // Check if streaming is available for a movie\r\n  checkAvailability: async (tmdbId, type = 'movie') => {\r\n    try {\r\n      // VidSrc doesn't have a formal availability check API\r\n      // We assume content is available if it has a valid TMDB ID\r\n      return {\r\n        available: true,\r\n        provider: 'vidsrc',\r\n        embeddable: true,\r\n        message: 'Streaming available via VidSrc'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        available: false,\r\n        provider: 'vidsrc',\r\n        embeddable: false,\r\n        message: 'Streaming temporarily unavailable'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get streaming quality information\r\n  getQualityInfo: () => {\r\n    return {\r\n      default: '1080p',\r\n      available: ['720p', '1080p', '4K'],\r\n      note: 'Quality automatically adjusts based on connection speed'\r\n    };\r\n  },\r\n\r\n  // Get supported regions\r\n  getSupportedRegions: () => {\r\n    return {\r\n      regionsr\n      note: 'VidSrc works globally with no regional restrictions'\r\n    };\r\n  },\r\n\r\n  // Enhanced error handling with recovery\r\n  handleStreamError: async (error, context) => {\r\n    performanceMonitor.trackError(error);\r\n\r\n    try {\r\n      const recoveredUrl = await errorRecoveryManager.recover(error, context);\r\n      fallbackManager.recordSuccess();\r\n      return {\r\n        success: true,\r\n        url: recoveredUrl,\r\n        recovered: true\r\n      };\r\n    } catch (recoveryError) {\r\n      fallbackManager.recordFailure();\r\n      return {\r\n        success: false,\r\n        error: recoveryError.message,\r\n        fallbackExhausted: true\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get available quality options\r\n  getQualityOptions: (contentType = 'movie') => {\r\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\r\n\r\n    if (contentType === 'movie') {\r\n      baseQualities.unshift(QualityOptions.Q4K);\r\n    }\r\n\r\n    return baseQualities;\r\n  },\r\n\r\n  // Test stream availability with enhanced error handling (November 2025)\r\n  testStream: async (url, timeout = 8000) => {\r\n    const startTime = Date.now();\r\n\r\n    // Create a timeout promise with AbortController for better control\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n\r\n    try {\r\n      // Try HEAD request first (more efficient)\r\n      const response = await fetch(url, {\r\n        method: 'HEAD',\r\n        mode: 'no-cors',\r\n        signal: controller.signal,\r\n        headers: {\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n        }\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n      const loadTime = Date.now() - startTime;\r\n      performanceMonitor.trackStreamLoadTime(Date.now());\r\n\r\n      return {\r\n        available: true,\r\n        loadTime,\r\n        url,\r\n        responseTime: loadTime,\r\n        method: 'HEAD'\r\n      };\r\n    } catch (headError) {\r\n      try {\r\n        // If HEAD fails, try GET request\r\n        const getResponse = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'no-cors',\r\n          signal: controller.signal,\r\n          headers: {\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n          }\r\n        });\r\n\r\n        clearTimeout(timeoutId);\r\n        const loadTime = Date.now() - startTime;\r\n        performanceMonitor.trackStreamLoadTime(Date.now());\r\n\r\n        return {\r\n          available: true,\r\n          loadTime,\r\n          url,\r\n          responseTime: loadTime,\r\n          method: 'GET'\r\n        };\r\n      } catch (getError) {\r\n        clearTimeout(timeoutId);\r\n        const loadTime = Date.now() - startTime;\r\n        performanceMonitor.trackStreamLoadTime(Date.now());\r\n\r\n        // Enhanced error classification based on November 2025 standards\r\n        let errorType = StreamErrorTypes.NETWORK_ERROR;\r\n        let errorMessage = getError.message;\r\n\r\n        if (getError.name === 'AbortError' || getError.message.includes('timeout') || getError.message.includes('aborted')) {\r\n          errorType = StreamErrorTypes.TIMEOUT_ERROR;\r\n          errorMessage = 'Request timeout - server took too long to respond';\r\n        } else if (getError.message.includes('404') || getError.message.includes('Not Found')) {\r\n          errorType = StreamErrorTypes.CONTENT_NOT_FOUND;\r\n          errorMessage = 'Video not found on this server';\r\n        } else if (getError.message.includes('403') || getError.message.includes('Forbidden')) {\r\n          errorType = StreamErrorTypes.GEO_BLOCKED;\r\n          errorMessage = 'Content blocked in your region';\r\n        } else if (getError.message.includes('NetworkError') || getError.message.includes('Failed to fetch')) {\r\n          errorType = StreamErrorTypes.NETWORK_ERROR;\r\n          errorMessage = 'Network connection failed';\r\n        }\r\n\r\n        return {\r\n          available: false,\r\n          loadTime,\r\n          error: errorMessage,\r\n          errorType,\r\n          url,\r\n          responseTime: loadTime,\r\n          retryable: errorType !== StreamErrorTypes.CONTENT_NOT_FOUND\r\n        };\r\n      }\r\n    }\r\n  },\r\n\r\n  // Get performance metrics\r\n  getPerformanceReport: () => {\r\n    return performanceMonitor.generateReport();\r\n  },\r\n\r\n  // Test multiple sources and return the first working one\r\n  testMultipleSources: async (sources, options = {}) => {\r\n    const { timeout = 8000, maxConcurrent = 3 } = options;\r\n    const workingSources = [];\r\n    const failedSources = [];\r\n\r\n    // Test sources in batches to avoid overwhelming servers\r\n    for (let i = 0; i < sources.length; i += maxConcurrent) {\r\n      const batch = sources.slice(i, i + maxConcurrent);\r\n      const batchPromises = batch.map(async (source) => {\r\n        try {\r\n          const result = await this.testStream(source.url, timeout);\r\n          return { source, result };\r\n        } catch (error) {\r\n          return {\r\n            source,\r\n            result: {\r\n              available: false,\r\n              error: error.message,\r\n              errorType: 'TEST_ERROR'\r\n            }\r\n          };\r\n        }\r\n      });\r\n\r\n      const batchResults = await Promise.all(batchPromises);\r\n\r\n      batchResults.forEach(({ source, result }) => {\r\n        if (result.available) {\r\n          workingSources.push({ ...source, testResult: result });\r\n        } else {\r\n          failedSources.push({ ...source, testResult: result });\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      working: workingSources,\r\n      failed: failedSources,\r\n      total: sources.length,\r\n      successRate: sources.length > 0 ? (workingSources.length / sources.length) * 100 : 0\r\n    };\r\n  },\r\n\r\n  // Get best available source with automatic testing\r\n  getBestAvailableSource: async (tmdbId, type, season = null, episode = null, options = {}) => {\r\n    const { testSources = true, quality = 'auto' } = options;\r\n\r\n    // Get all available sources\r\n    const sources = type === 'movie'\r\n      ? this.getMovieSources(tmdbId, { includeAlternatives: true, quality })\r\n      : this.getTVSources(tmdbId, season, episode, { includeAlternatives: true, quality });\r\n\r\n    if (!testSources) {\r\n      return sources[0]; // Return first source without testing\r\n    }\r\n\r\n    // Test sources and return the first working one\r\n    const testResult = await this.testMultipleSources(sources);\r\n\r\n    if (testResult.working.length > 0) {\r\n      return testResult.working[0];\r\n    }\r\n\r\n    // If no sources work, return the primary source with error info\r\n    return {\r\n      ...sources[0],\r\n      testResult: {\r\n        available: false,\r\n        error: 'No working sources found',\r\n        errorType: 'ALL_SOURCES_FAILED'\r\n      }\r\n    };\r\n  },\r\n\r\n  // Reset fallback manager\r\n  resetFallbackManager: () => {\r\n    fallbackManager.reset();\r\n    performanceMonitor.startTracking();\r\n  },\r\n\r\n  // Get current fallback status\r\n  getFallbackStatus: () => {\r\n    return {\r\n      currentDomain: fallbackManager.getCurrentDomain(),\r\n      retryCount: fallbackManager.retryCount,\r\n      domainLevel: fallbackManager.domainLevel,\r\n      maxRetries: fallbackManager.maxRetries\r\n    };\r\n  },\r\n\r\n  // Create secure iframe embed\r\n  createSecureEmbed: (streamData, options = {}) => {\r\n    const {\r\n      width = '100%',\r\n      height = '500',\r\n      autoplay = false,\r\n      muted = false,\r\n      controls = true,\r\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\r\n    } = options;\r\n\r\n    const embedUrl = streamData.url;\r\n\r\n    return {\r\n      iframe: `<iframe\r\n        src=\"${embedUrl}\"\r\n        width=\"${width}\"\r\n        height=\"${height}\"\r\n        frameborder=\"0\"\r\n        allowfullscreen\r\n        ${autoplay ? 'autoplay' : ''}\r\n        ${muted ? 'muted' : ''}\r\n        ${controls ? '' : 'controls=\"false\"'}\r\n        sandbox=\"${sandbox}\"\r\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\r\n        referrerpolicy=\"strict-origin-when-cross-origin\"\r\n        loading=\"lazy\"\r\n      ></iframe>`,\r\n      url: embedUrl,\r\n      type: streamData.type,\r\n      provider: streamData.provider,\r\n      security: {\r\n        sandbox,\r\n        referrerPolicy: 'strict-origin-when-cross-origin',\r\n        cspCompliant: true\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to create iframe embed code\r\nexport const createEmbedCode = (streamData, options = {}) => {\r\n  const {\r\n    width = '100%',\r\n    height = '500',\r\n    autoplay = false,\r\n    muted = false,\r\n    controls = true\r\n  } = options;\r\n\r\n  const embedUrl = streamData.url;\r\n\r\n  return {\r\n    iframe: `<iframe\r\n      src=\"${embedUrl}\"\r\n      width=\"${width}\"\r\n      height=\"${height}\"\r\n      frameborder=\"0\"\r\n      allowfullscreen\r\n      ${autoplay ? 'autoplay' : ''}\r\n      ${muted ? 'muted' : ''}\r\n      ${controls ? '' : 'controls=\"false\"'}\r\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\r\n    ></iframe>`,\r\n    url: embedUrl,\r\n    type: streamData.type,\r\n    provider: streamData.provider\r\n  };\r\n};\r\n\r\n// Error handling for streaming\r\nexport const handleStreamError = (error, fallbackSources = []) => {\r\n  console.error('Streaming error:', error);\r\n\r\n  if (fallbackSources.length > 0) {\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      fallback: fallbackSources[0],\r\n      hasFallback: true\r\n    };\r\n  }\r\n\r\n  return {\r\n    success: false,\r\n    error: error.message,\r\n    hasFallback: false\r\n  };\r\n};\r\n\r\nexport default vidsrcApi;\r\n\r\n// Test function to verify video streaming functionality\r\nexport const testVideoStreaming = async () => {\r\n  console.log('🧪 Testing Video Streaming Functionality...');\r\n\r\n  // Test data\r\n  const testMovieId = '550'; // Fight Club\r\n  const testTVId = '1399'; // Game of Thrones\r\n\r\n  try {\r\n    // Test 1: Get movie sources\r\n    console.log('\\n📽️ Testing Movie Sources...');\r\n    const movieSources = vidsrcApi.getMovieSources(testMovieId, { includeAlternatives: true });\r\n    console.log(`Found ${movieSources.length} movie sources`);\r\n\r\n    // Test 2: Get TV sources\r\n    console.log('\\n📺 Testing TV Sources...');\r\n    const tvSources = vidsrcApi.getTVSources(testTVId, 1, 1, { includeAlternatives: true });\r\n    console.log(`Found ${tvSources.length} TV sources`);\r\n\r\n    // Test 3: Test a few sources\r\n    console.log('\\n🔍 Testing Source Availability...');\r\n    const testSources = movieSources.slice(0, 3); // Test first 3 sources\r\n\r\n    for (const source of testSources) {\r\n      try {\r\n        console.log(`Testing ${source.name}...`);\r\n        const result = await vidsrcApi.testStream(source.url, 5000);\r\n        console.log(`✅ ${source.name}: ${result.available ? 'Available' : 'Failed'} (${result.loadTime}ms)`);\r\n      } catch (error) {\r\n        console.log(`❌ ${source.name}: Error - ${error.message}`);\r\n      }\r\n    }\r\n\r\n    // Test 4: Test fallback system\r\n    console.log('\\n🔄 Testing Fallback System...');\r\n    const fallbackStatus = vidsrcApi.getFallbackStatus();\r\n    console.log('Fallback Status:', fallbackStatus);\r\n\r\n    // Test 5: Test alternative URLs\r\n    console.log('\\n🔗 Testing Alternative URLs...');\r\n    const altUrls = vidsrcApi.tryAlternativeUrls(testMovieId, 'movie');\r\n    console.log(`Found ${altUrls.length} alternative URLs`);\r\n\r\n    console.log('\\n✅ Video streaming test completed!');\r\n    return {\r\n      success: true,\r\n      movieSources: movieSources.length,\r\n      tvSources: tvSources.length,\r\n      alternativeUrls: altUrls.length\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('❌ Video streaming test failed:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}