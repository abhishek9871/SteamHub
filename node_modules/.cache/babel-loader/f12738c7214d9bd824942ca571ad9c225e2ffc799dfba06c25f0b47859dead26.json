{"ast":null,"code":"// VidSrc API service for streaming integration\n// No API key required - uses TMDB IDs directly\n\n// Enhanced domain configuration with multiple fallback levels\nconst VIDSRC_DOMAINS = {\n  primary: 'https://vidsrc.xyz/embed',\n  fallbacks: ['https://vidsrc.in/embed', 'https://vidsrc.pm/embed', 'https://vidsrc.net/embed'],\n  alternative: ['https://vidsrc.dev/embed', 'https://vidsrc.pro/embed']\n};\n\n// Quality options for streaming\nconst QualityOptions = {\n  AUTO: 'auto',\n  Q4K: '4k',\n  Q1080P: '1080p',\n  Q720P: '720p',\n  Q480P: '480p',\n  Q360P: '360p'\n};\n\n// Error types for better error handling\nconst StreamErrorTypes = {\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  PLAYER_ERROR: 'PLAYER_ERROR',\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\n  GEO_BLOCKED: 'GEO_BLOCKED',\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\n};\n\n// Alternative streaming sources for fallback\nconst EMBED_SOURCES = {\n  vidsrc: {\n    name: 'VidSrc',\n    baseUrl: 'https://vidsrc.xyz/embed',\n    supports: ['movie', 'tv']\n  },\n  embedsoap: {\n    name: 'EmbedSoap',\n    baseUrl: 'https://www.embedsoap.com/embed/movie/',\n    supports: ['movie']\n  },\n  smashystream: {\n    name: 'SmashyStream',\n    baseUrl: 'https://player.smashystream.com/movie/',\n    supports: ['movie']\n  }\n};\n\n// Fallback Manager Class\nclass FallbackManager {\n  constructor() {\n    this.currentIndex = 0;\n    this.retryCount = 0;\n    this.maxRetries = 3;\n    this.domainLevel = 0; // 0 = primary, 1 = fallbacks, 2 = alternative\n  }\n  getDomainsForCurrentLevel() {\n    switch (this.domainLevel) {\n      case 0:\n        return [VIDSRC_DOMAINS.primary];\n      case 1:\n        return VIDSRC_DOMAINS.fallbacks;\n      case 2:\n        return VIDSRC_DOMAINS.alternative;\n      default:\n        return [VIDSRC_DOMAINS.primary];\n    }\n  }\n  getNextUrl(type, id, season = null, episode = null, quality = 'auto') {\n    const domains = this.getDomainsForCurrentLevel();\n    const domain = domains[this.currentIndex % domains.length];\n    this.currentIndex++;\n\n    // Move to next domain level if we've tried all domains in current level\n    if (this.currentIndex >= domains.length) {\n      this.currentIndex = 0;\n      this.domainLevel = Math.min(this.domainLevel + 1, 2);\n    }\n    const baseUrl = type === 'movie' ? `${domain}/movie/${id}` : `${domain}/tv/${id}/${season}/${episode}`;\n    return quality !== 'auto' ? `${baseUrl}?q=${quality}` : baseUrl;\n  }\n  recordFailure() {\n    this.retryCount++;\n    if (this.retryCount >= this.maxRetries) {\n      this.reset();\n      throw new Error('All streaming sources failed');\n    }\n  }\n  recordSuccess() {\n    this.retryCount = 0;\n    this.currentIndex = 0;\n    this.domainLevel = 0;\n  }\n  reset() {\n    this.currentIndex = 0;\n    this.retryCount = 0;\n    this.domainLevel = 0;\n  }\n  getCurrentDomain() {\n    const domains = this.getDomainsForCurrentLevel();\n    return domains[this.currentIndex % domains.length];\n  }\n}\n\n// Error Recovery Manager Class\nclass ErrorRecoveryManager {\n  constructor(fallbackManager) {\n    this.fallbackManager = fallbackManager;\n    this.recoveryStrategies = new Map();\n    this.initializeStrategies();\n  }\n  initializeStrategies() {\n    this.recoveryStrategies.set(StreamErrorTypes.NETWORK_ERROR, this.handleNetworkError.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.TIMEOUT_ERROR, this.handleTimeoutError.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.PLAYER_ERROR, this.handlePlayerError.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.CONTENT_NOT_FOUND, this.handleContentNotFound.bind(this));\n    this.recoveryStrategies.set(StreamErrorTypes.QUALITY_UNAVAILABLE, this.handleQualityError.bind(this));\n  }\n  async recover(error, context) {\n    const strategy = this.recoveryStrategies.get(error.type);\n    if (strategy) {\n      return await strategy(error, context);\n    }\n    throw error;\n  }\n  async handleNetworkError(error, context) {\n    // Wait with exponential backoff\n    const delay = this.calculateBackoffDelay(context.retryCount);\n    await this.delay(delay);\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, context.quality);\n  }\n  async handleTimeoutError(error, context) {\n    // Reduce quality and retry\n    const newQuality = this.reduceQuality(context.quality);\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, newQuality);\n  }\n  async handlePlayerError(error, context) {\n    // Try different domain\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, context.quality);\n  }\n  async handleContentNotFound(error, context) {\n    // Try alternative sources\n    this.fallbackManager.domainLevel = 2; // Use alternative domains\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, context.quality);\n  }\n  async handleQualityError(error, context) {\n    // Reduce quality and retry\n    const newQuality = this.reduceQuality(context.quality);\n    return this.fallbackManager.getNextUrl(context.type, context.id, context.season, context.episode, newQuality);\n  }\n  calculateBackoffDelay(retryCount) {\n    return Math.min(1000 * Math.pow(2, retryCount), 10000);\n  }\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  reduceQuality(currentQuality) {\n    const qualityHierarchy = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P, QualityOptions.Q360P];\n    const currentIndex = qualityHierarchy.indexOf(currentQuality);\n    if (currentIndex < qualityHierarchy.length - 1) {\n      return qualityHierarchy[currentIndex + 1];\n    }\n    return QualityOptions.Q360P;\n  }\n}\n\n// Performance Monitor Class\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = {\n      streamLoadTime: [],\n      bufferingEvents: [],\n      qualitySwitches: [],\n      errorRates: [],\n      userEngagement: []\n    };\n    this.startTime = null;\n  }\n  startTracking() {\n    this.startTime = Date.now();\n  }\n  trackStreamLoadTime(endTime) {\n    if (!this.startTime) return;\n    const loadTime = endTime - this.startTime;\n    this.metrics.streamLoadTime.push(loadTime);\n    if (loadTime > 10000) {\n      // 10 seconds\n      console.warn('Slow stream loading detected:', loadTime);\n    }\n  }\n  trackBufferingEvent(duration) {\n    this.metrics.bufferingEvents.push({\n      timestamp: Date.now(),\n      duration\n    });\n  }\n  trackQualitySwitch(from, to) {\n    this.metrics.qualitySwitches.push({\n      timestamp: Date.now(),\n      from,\n      to\n    });\n  }\n  trackError(error) {\n    this.metrics.errorRates.push({\n      timestamp: Date.now(),\n      error: error.message\n    });\n  }\n  generateReport() {\n    const loadTimes = this.metrics.streamLoadTime;\n    return {\n      averageLoadTime: loadTimes.length > 0 ? loadTimes.reduce((a, b) => a + b, 0) / loadTimes.length : 0,\n      bufferingFrequency: this.metrics.bufferingEvents.length,\n      qualitySwitchCount: this.metrics.qualitySwitches.length,\n      errorCount: this.metrics.errorRates.length,\n      successRate: this.calculateSuccessRate()\n    };\n  }\n  calculateSuccessRate() {\n    const totalAttempts = this.metrics.streamLoadTime.length + this.metrics.errorRates.length;\n    return totalAttempts > 0 ? this.metrics.streamLoadTime.length / totalAttempts * 100 : 0;\n  }\n}\n\n// Global instances\nconst fallbackManager = new FallbackManager();\nconst errorRecoveryManager = new ErrorRecoveryManager(fallbackManager);\nconst performanceMonitor = new PerformanceMonitor();\nexport const vidsrcApi = {\n  // Get streaming URL for movies\n  getMovieStream: tmdbId => {\n    return {\n      url: `${VIDSRC_BASE_URL}/movie/${tmdbId}`,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true\n    };\n  },\n  // Get streaming URL for TV shows\n  getTVStream: (tmdbId, season = 1, episode = 1) => {\n    return {\n      url: `${VIDSRC_BASE_URL}/tv/${tmdbId}/${season}/${episode}`,\n      type: 'tv',\n      provider: 'vidsrc',\n      embeddable: true,\n      season,\n      episode\n    };\n  },\n  // Get multiple streaming sources for a movie\n  getMovieSources: tmdbId => {\n    const sources = [];\n\n    // Primary VidSrc source\n    sources.push({\n      id: 'vidsrc',\n      name: 'VidSrc',\n      url: `${VIDSRC_BASE_URL}/movie/${tmdbId}`,\n      embeddable: true,\n      quality: 'HD/4K',\n      provider: 'vidsrc'\n    });\n\n    // Backup VidSrc URLs\n    VIDSRC_BACKUP_URLS.forEach((url, index) => {\n      sources.push({\n        id: `vidsrc-backup-${index}`,\n        name: `VidSrc Backup ${index + 1}`,\n        url: `${url}/movie/${tmdbId}`,\n        embeddable: true,\n        quality: 'HD/4K',\n        provider: 'vidsrc'\n      });\n    });\n\n    // Alternative sources\n    sources.push({\n      id: 'embedsoap',\n      name: 'EmbedSoap',\n      url: `${EMBED_SOURCES.embedsoap.baseUrl}?id=${tmdbId}`,\n      embeddable: true,\n      quality: 'HD',\n      provider: 'embedsoap'\n    });\n    sources.push({\n      id: 'smashystream',\n      name: 'SmashyStream',\n      url: `${EMBED_SOURCES.smashystream.baseUrl}${tmdbId}`,\n      embeddable: true,\n      quality: 'HD',\n      provider: 'smashystream'\n    });\n    return sources;\n  },\n  // Get multiple streaming sources for TV shows\n  getTVSources: (tmdbId, season = 1, episode = 1) => {\n    const sources = [];\n\n    // Primary VidSrc source\n    sources.push({\n      id: 'vidsrc',\n      name: 'VidSrc',\n      url: `${VIDSRC_BASE_URL}/tv/${tmdbId}/${season}/${episode}`,\n      embeddable: true,\n      quality: 'HD/4K',\n      provider: 'vidsrc',\n      season,\n      episode\n    });\n\n    // Backup VidSrc URLs\n    VIDSRC_BACKUP_URLS.forEach((url, index) => {\n      sources.push({\n        id: `vidsrc-backup-${index}`,\n        name: `VidSrc Backup ${index + 1}`,\n        url: `${url}/tv/${tmdbId}/${season}/${episode}`,\n        embeddable: true,\n        quality: 'HD/4K',\n        provider: 'vidsrc',\n        season,\n        episode\n      });\n    });\n    return sources;\n  },\n  // Check if streaming is available for a movie\n  checkAvailability: async (tmdbId, type = 'movie') => {\n    try {\n      // VidSrc doesn't have a formal availability check API\n      // We assume content is available if it has a valid TMDB ID\n      return {\n        available: true,\n        provider: 'vidsrc',\n        embeddable: true,\n        message: 'Streaming available via VidSrc'\n      };\n    } catch (error) {\n      return {\n        available: false,\n        provider: 'vidsrc',\n        embeddable: false,\n        message: 'Streaming temporarily unavailable'\n      };\n    }\n  },\n  // Get streaming quality information\n  getQualityInfo: () => {\n    return {\n      default: '1080p',\n      available: ['720p', '1080p', '4K'],\n      note: 'Quality automatically adjusts based on connection speed'\n    };\n  },\n  // Get supported regions\n  getSupportedRegions: () => {\n    return {\n      regionsn      note: 'VidSrc works globally with no regional restrictions'\n    };\n  }\n};\n\n// Helper function to create iframe embed code\nexport const createEmbedCode = (streamData, options = {}) => {\n  const {\n    width = '100%',\n    height = '500',\n    autoplay = false,\n    muted = false,\n    controls = true\n  } = options;\n  const embedUrl = streamData.url;\n  return {\n    iframe: `<iframe\n      src=\"${embedUrl}\"\n      width=\"${width}\"\n      height=\"${height}\"\n      frameborder=\"0\"\n      allowfullscreen\n      ${autoplay ? 'autoplay' : ''}\n      ${muted ? 'muted' : ''}\n      ${controls ? '' : 'controls=\"false\"'}\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\n    ></iframe>`,\n    url: embedUrl,\n    type: streamData.type,\n    provider: streamData.provider\n  };\n};\n\n// Error handling for streaming\nexport const handleStreamError = (error, fallbackSources = []) => {\n  console.error('Streaming error:', error);\n  if (fallbackSources.length > 0) {\n    return {\n      success: false,\n      error: error.message,\n      fallback: fallbackSources[0],\n      hasFallback: true\n    };\n  }\n  return {\n    success: false,\n    error: error.message,\n    hasFallback: false\n  };\n};\nexport default vidsrcApi;","map":{"version":3,"names":["VIDSRC_DOMAINS","primary","fallbacks","alternative","QualityOptions","AUTO","Q4K","Q1080P","Q720P","Q480P","Q360P","StreamErrorTypes","NETWORK_ERROR","TIMEOUT_ERROR","PLAYER_ERROR","CONTENT_NOT_FOUND","GEO_BLOCKED","QUALITY_UNAVAILABLE","EMBED_SOURCES","vidsrc","name","baseUrl","supports","embedsoap","smashystream","FallbackManager","constructor","currentIndex","retryCount","maxRetries","domainLevel","getDomainsForCurrentLevel","getNextUrl","type","id","season","episode","quality","domains","domain","length","Math","min","recordFailure","reset","Error","recordSuccess","getCurrentDomain","ErrorRecoveryManager","fallbackManager","recoveryStrategies","Map","initializeStrategies","set","handleNetworkError","bind","handleTimeoutError","handlePlayerError","handleContentNotFound","handleQualityError","recover","error","context","strategy","get","delay","calculateBackoffDelay","newQuality","reduceQuality","pow","ms","Promise","resolve","setTimeout","currentQuality","qualityHierarchy","indexOf","PerformanceMonitor","metrics","streamLoadTime","bufferingEvents","qualitySwitches","errorRates","userEngagement","startTime","startTracking","Date","now","trackStreamLoadTime","endTime","loadTime","push","console","warn","trackBufferingEvent","duration","timestamp","trackQualitySwitch","from","to","trackError","message","generateReport","loadTimes","averageLoadTime","reduce","a","b","bufferingFrequency","qualitySwitchCount","errorCount","successRate","calculateSuccessRate","totalAttempts","errorRecoveryManager","performanceMonitor","vidsrcApi","getMovieStream","tmdbId","url","VIDSRC_BASE_URL","provider","embeddable","getTVStream","getMovieSources","sources","VIDSRC_BACKUP_URLS","forEach","index","getTVSources","checkAvailability","available","getQualityInfo","default","note","getSupportedRegions","regions","createEmbedCode","streamData","options","width","height","autoplay","muted","controls","embedUrl","iframe","handleStreamError","fallbackSources","success","fallback","hasFallback"],"sources":["c:/Users/VASU/Desktop/task/src/services/vidsrcApi.js"],"sourcesContent":["// VidSrc API service for streaming integration\r\n// No API key required - uses TMDB IDs directly\r\n\r\n// Enhanced domain configuration with multiple fallback levels\r\nconst VIDSRC_DOMAINS = {\r\n  primary: 'https://vidsrc.xyz/embed',\r\n  fallbacks: [\r\n    'https://vidsrc.in/embed',\r\n    'https://vidsrc.pm/embed',\r\n    'https://vidsrc.net/embed'\r\n  ],\r\n  alternative: [\r\n    'https://vidsrc.dev/embed',\r\n    'https://vidsrc.pro/embed'\r\n  ]\r\n};\r\n\r\n// Quality options for streaming\r\nconst QualityOptions = {\r\n  AUTO: 'auto',\r\n  Q4K: '4k',\r\n  Q1080P: '1080p',\r\n  Q720P: '720p',\r\n  Q480P: '480p',\r\n  Q360P: '360p'\r\n};\r\n\r\n// Error types for better error handling\r\nconst StreamErrorTypes = {\r\n  NETWORK_ERROR: 'NETWORK_ERROR',\r\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\r\n  PLAYER_ERROR: 'PLAYER_ERROR',\r\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\r\n  GEO_BLOCKED: 'GEO_BLOCKED',\r\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\r\n};\r\n\r\n// Alternative streaming sources for fallback\r\nconst EMBED_SOURCES = {\r\n  vidsrc: {\r\n    name: 'VidSrc',\r\n    baseUrl: 'https://vidsrc.xyz/embed',\r\n    supports: ['movie', 'tv']\r\n  },\r\n  embedsoap: {\r\n    name: 'EmbedSoap',\r\n    baseUrl: 'https://www.embedsoap.com/embed/movie/',\r\n    supports: ['movie']\r\n  },\r\n  smashystream: {\r\n    name: 'SmashyStream',\r\n    baseUrl: 'https://player.smashystream.com/movie/',\r\n    supports: ['movie']\r\n  }\r\n};\r\n\r\n// Fallback Manager Class\r\nclass FallbackManager {\r\n  constructor() {\r\n    this.currentIndex = 0;\r\n    this.retryCount = 0;\r\n    this.maxRetries = 3;\r\n    this.domainLevel = 0; // 0 = primary, 1 = fallbacks, 2 = alternative\r\n  }\r\n\r\n  getDomainsForCurrentLevel() {\r\n    switch (this.domainLevel) {\r\n      case 0:\r\n        return [VIDSRC_DOMAINS.primary];\r\n      case 1:\r\n        return VIDSRC_DOMAINS.fallbacks;\r\n      case 2:\r\n        return VIDSRC_DOMAINS.alternative;\r\n      default:\r\n        return [VIDSRC_DOMAINS.primary];\r\n    }\r\n  }\r\n\r\n  getNextUrl(type, id, season = null, episode = null, quality = 'auto') {\r\n    const domains = this.getDomainsForCurrentLevel();\r\n    const domain = domains[this.currentIndex % domains.length];\r\n\r\n    this.currentIndex++;\r\n\r\n    // Move to next domain level if we've tried all domains in current level\r\n    if (this.currentIndex >= domains.length) {\r\n      this.currentIndex = 0;\r\n      this.domainLevel = Math.min(this.domainLevel + 1, 2);\r\n    }\r\n\r\n    const baseUrl = type === 'movie'\r\n      ? `${domain}/movie/${id}`\r\n      : `${domain}/tv/${id}/${season}/${episode}`;\r\n\r\n    return quality !== 'auto' ? `${baseUrl}?q=${quality}` : baseUrl;\r\n  }\r\n\r\n  recordFailure() {\r\n    this.retryCount++;\r\n    if (this.retryCount >= this.maxRetries) {\r\n      this.reset();\r\n      throw new Error('All streaming sources failed');\r\n    }\r\n  }\r\n\r\n  recordSuccess() {\r\n    this.retryCount = 0;\r\n    this.currentIndex = 0;\r\n    this.domainLevel = 0;\r\n  }\r\n\r\n  reset() {\r\n    this.currentIndex = 0;\r\n    this.retryCount = 0;\r\n    this.domainLevel = 0;\r\n  }\r\n\r\n  getCurrentDomain() {\r\n    const domains = this.getDomainsForCurrentLevel();\r\n    return domains[this.currentIndex % domains.length];\r\n  }\r\n}\r\n\r\n// Error Recovery Manager Class\r\nclass ErrorRecoveryManager {\r\n  constructor(fallbackManager) {\r\n    this.fallbackManager = fallbackManager;\r\n    this.recoveryStrategies = new Map();\r\n    this.initializeStrategies();\r\n  }\r\n\r\n  initializeStrategies() {\r\n    this.recoveryStrategies.set(StreamErrorTypes.NETWORK_ERROR, this.handleNetworkError.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.TIMEOUT_ERROR, this.handleTimeoutError.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.PLAYER_ERROR, this.handlePlayerError.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.CONTENT_NOT_FOUND, this.handleContentNotFound.bind(this));\r\n    this.recoveryStrategies.set(StreamErrorTypes.QUALITY_UNAVAILABLE, this.handleQualityError.bind(this));\r\n  }\r\n\r\n  async recover(error, context) {\r\n    const strategy = this.recoveryStrategies.get(error.type);\r\n    if (strategy) {\r\n      return await strategy(error, context);\r\n    }\r\n    throw error;\r\n  }\r\n\r\n  async handleNetworkError(error, context) {\r\n    // Wait with exponential backoff\r\n    const delay = this.calculateBackoffDelay(context.retryCount);\r\n    await this.delay(delay);\r\n\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      context.quality\r\n    );\r\n  }\r\n\r\n  async handleTimeoutError(error, context) {\r\n    // Reduce quality and retry\r\n    const newQuality = this.reduceQuality(context.quality);\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      newQuality\r\n    );\r\n  }\r\n\r\n  async handlePlayerError(error, context) {\r\n    // Try different domain\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      context.quality\r\n    );\r\n  }\r\n\r\n  async handleContentNotFound(error, context) {\r\n    // Try alternative sources\r\n    this.fallbackManager.domainLevel = 2; // Use alternative domains\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      context.quality\r\n    );\r\n  }\r\n\r\n  async handleQualityError(error, context) {\r\n    // Reduce quality and retry\r\n    const newQuality = this.reduceQuality(context.quality);\r\n    return this.fallbackManager.getNextUrl(\r\n      context.type,\r\n      context.id,\r\n      context.season,\r\n      context.episode,\r\n      newQuality\r\n    );\r\n  }\r\n\r\n  calculateBackoffDelay(retryCount) {\r\n    return Math.min(1000 * Math.pow(2, retryCount), 10000);\r\n  }\r\n\r\n  delay(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  reduceQuality(currentQuality) {\r\n    const qualityHierarchy = [QualityOptions.Q4K, QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P, QualityOptions.Q360P];\r\n    const currentIndex = qualityHierarchy.indexOf(currentQuality);\r\n\r\n    if (currentIndex < qualityHierarchy.length - 1) {\r\n      return qualityHierarchy[currentIndex + 1];\r\n    }\r\n\r\n    return QualityOptions.Q360P;\r\n  }\r\n}\r\n\r\n// Performance Monitor Class\r\nclass PerformanceMonitor {\r\n  constructor() {\r\n    this.metrics = {\r\n      streamLoadTime: [],\r\n      bufferingEvents: [],\r\n      qualitySwitches: [],\r\n      errorRates: [],\r\n      userEngagement: []\r\n    };\r\n    this.startTime = null;\r\n  }\r\n\r\n  startTracking() {\r\n    this.startTime = Date.now();\r\n  }\r\n\r\n  trackStreamLoadTime(endTime) {\r\n    if (!this.startTime) return;\r\n\r\n    const loadTime = endTime - this.startTime;\r\n    this.metrics.streamLoadTime.push(loadTime);\r\n\r\n    if (loadTime > 10000) { // 10 seconds\r\n      console.warn('Slow stream loading detected:', loadTime);\r\n    }\r\n  }\r\n\r\n  trackBufferingEvent(duration) {\r\n    this.metrics.bufferingEvents.push({\r\n      timestamp: Date.now(),\r\n      duration\r\n    });\r\n  }\r\n\r\n  trackQualitySwitch(from, to) {\r\n    this.metrics.qualitySwitches.push({\r\n      timestamp: Date.now(),\r\n      from,\r\n      to\r\n    });\r\n  }\r\n\r\n  trackError(error) {\r\n    this.metrics.errorRates.push({\r\n      timestamp: Date.now(),\r\n      error: error.message\r\n    });\r\n  }\r\n\r\n  generateReport() {\r\n    const loadTimes = this.metrics.streamLoadTime;\r\n    return {\r\n      averageLoadTime: loadTimes.length > 0 ? loadTimes.reduce((a, b) => a + b, 0) / loadTimes.length : 0,\r\n      bufferingFrequency: this.metrics.bufferingEvents.length,\r\n      qualitySwitchCount: this.metrics.qualitySwitches.length,\r\n      errorCount: this.metrics.errorRates.length,\r\n      successRate: this.calculateSuccessRate()\r\n    };\r\n  }\r\n\r\n  calculateSuccessRate() {\r\n    const totalAttempts = this.metrics.streamLoadTime.length + this.metrics.errorRates.length;\r\n    return totalAttempts > 0 ? (this.metrics.streamLoadTime.length / totalAttempts) * 100 : 0;\r\n  }\r\n}\r\n\r\n// Global instances\r\nconst fallbackManager = new FallbackManager();\r\nconst errorRecoveryManager = new ErrorRecoveryManager(fallbackManager);\r\nconst performanceMonitor = new PerformanceMonitor();\r\n\r\nexport const vidsrcApi = {\r\n  // Get streaming URL for movies\r\n  getMovieStream: (tmdbId) => {\r\n    return {\r\n      url: `${VIDSRC_BASE_URL}/movie/${tmdbId}`,\r\n      type: 'movie',\r\n      provider: 'vidsrc',\r\n      embeddable: true\r\n    };\r\n  },\r\n\r\n  // Get streaming URL for TV shows\r\n  getTVStream: (tmdbId, season = 1, episode = 1) => {\r\n    return {\r\n      url: `${VIDSRC_BASE_URL}/tv/${tmdbId}/${season}/${episode}`,\r\n      type: 'tv',\r\n      provider: 'vidsrc',\r\n      embeddable: true,\r\n      season,\r\n      episode\r\n    };\r\n  },\r\n\r\n  // Get multiple streaming sources for a movie\r\n  getMovieSources: (tmdbId) => {\r\n    const sources = [];\r\n\r\n    // Primary VidSrc source\r\n    sources.push({\r\n      id: 'vidsrc',\r\n      name: 'VidSrc',\r\n      url: `${VIDSRC_BASE_URL}/movie/${tmdbId}`,\r\n      embeddable: true,\r\n      quality: 'HD/4K',\r\n      provider: 'vidsrc'\r\n    });\r\n\r\n    // Backup VidSrc URLs\r\n    VIDSRC_BACKUP_URLS.forEach((url, index) => {\r\n      sources.push({\r\n        id: `vidsrc-backup-${index}`,\r\n        name: `VidSrc Backup ${index + 1}`,\r\n        url: `${url}/movie/${tmdbId}`,\r\n        embeddable: true,\r\n        quality: 'HD/4K',\r\n        provider: 'vidsrc'\r\n      });\r\n    });\r\n\r\n    // Alternative sources\r\n    sources.push({\r\n      id: 'embedsoap',\r\n      name: 'EmbedSoap',\r\n      url: `${EMBED_SOURCES.embedsoap.baseUrl}?id=${tmdbId}`,\r\n      embeddable: true,\r\n      quality: 'HD',\r\n      provider: 'embedsoap'\r\n    });\r\n\r\n    sources.push({\r\n      id: 'smashystream',\r\n      name: 'SmashyStream',\r\n      url: `${EMBED_SOURCES.smashystream.baseUrl}${tmdbId}`,\r\n      embeddable: true,\r\n      quality: 'HD',\r\n      provider: 'smashystream'\r\n    });\r\n\r\n    return sources;\r\n  },\r\n\r\n  // Get multiple streaming sources for TV shows\r\n  getTVSources: (tmdbId, season = 1, episode = 1) => {\r\n    const sources = [];\r\n\r\n    // Primary VidSrc source\r\n    sources.push({\r\n      id: 'vidsrc',\r\n      name: 'VidSrc',\r\n      url: `${VIDSRC_BASE_URL}/tv/${tmdbId}/${season}/${episode}`,\r\n      embeddable: true,\r\n      quality: 'HD/4K',\r\n      provider: 'vidsrc',\r\n      season,\r\n      episode\r\n    });\r\n\r\n    // Backup VidSrc URLs\r\n    VIDSRC_BACKUP_URLS.forEach((url, index) => {\r\n      sources.push({\r\n        id: `vidsrc-backup-${index}`,\r\n        name: `VidSrc Backup ${index + 1}`,\r\n        url: `${url}/tv/${tmdbId}/${season}/${episode}`,\r\n        embeddable: true,\r\n        quality: 'HD/4K',\r\n        provider: 'vidsrc',\r\n        season,\r\n        episode\r\n      });\r\n    });\r\n\r\n    return sources;\r\n  },\r\n\r\n  // Check if streaming is available for a movie\r\n  checkAvailability: async (tmdbId, type = 'movie') => {\r\n    try {\r\n      // VidSrc doesn't have a formal availability check API\r\n      // We assume content is available if it has a valid TMDB ID\r\n      return {\r\n        available: true,\r\n        provider: 'vidsrc',\r\n        embeddable: true,\r\n        message: 'Streaming available via VidSrc'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        available: false,\r\n        provider: 'vidsrc',\r\n        embeddable: false,\r\n        message: 'Streaming temporarily unavailable'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get streaming quality information\r\n  getQualityInfo: () => {\r\n    return {\r\n      default: '1080p',\r\n      available: ['720p', '1080p', '4K'],\r\n      note: 'Quality automatically adjusts based on connection speed'\r\n    };\r\n  },\r\n\r\n  // Get supported regions\r\n  getSupportedRegions: () => {\r\n    return {\r\n      regionsr\n      note: 'VidSrc works globally with no regional restrictions'\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to create iframe embed code\r\nexport const createEmbedCode = (streamData, options = {}) => {\r\n  const {\r\n    width = '100%',\r\n    height = '500',\r\n    autoplay = false,\r\n    muted = false,\r\n    controls = true\r\n  } = options;\r\n\r\n  const embedUrl = streamData.url;\r\n\r\n  return {\r\n    iframe: `<iframe\r\n      src=\"${embedUrl}\"\r\n      width=\"${width}\"\r\n      height=\"${height}\"\r\n      frameborder=\"0\"\r\n      allowfullscreen\r\n      ${autoplay ? 'autoplay' : ''}\r\n      ${muted ? 'muted' : ''}\r\n      ${controls ? '' : 'controls=\"false\"'}\r\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\r\n    ></iframe>`,\r\n    url: embedUrl,\r\n    type: streamData.type,\r\n    provider: streamData.provider\r\n  };\r\n};\r\n\r\n// Error handling for streaming\r\nexport const handleStreamError = (error, fallbackSources = []) => {\r\n  console.error('Streaming error:', error);\r\n\r\n  if (fallbackSources.length > 0) {\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      fallback: fallbackSources[0],\r\n      hasFallback: true\r\n    };\r\n  }\r\n\r\n  return {\r\n    success: false,\r\n    error: error.message,\r\n    hasFallback: false\r\n  };\r\n};\r\n\r\nexport default vidsrcApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}