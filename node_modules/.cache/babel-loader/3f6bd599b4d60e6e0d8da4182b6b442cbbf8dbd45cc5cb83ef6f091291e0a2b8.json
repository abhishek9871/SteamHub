{"ast":null,"code":"// VidSrc API service for streaming integration\n// No API key required - uses TMDB IDs directly\n\n// Simplified domain configuration - prioritize the most reliable domain first\nconst VIDSRC_DOMAINS = {\n  primary: 'https://vidsrc.to/embed',\n  fallbacks: ['https://vidsrc.net/embed', 'https://vidsrc.cc/embed', 'https://vidsrc.me/embed']\n};\n\n// Quality options for streaming\nconst QualityOptions = {\n  AUTO: 'auto',\n  Q4K: '4k',\n  Q1080P: '1080p',\n  Q720P: '720p',\n  Q480P: '480p',\n  Q360P: '360p'\n};\n\n// Error types for better error handling\nconst StreamErrorTypes = {\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  PLAYER_ERROR: 'PLAYER_ERROR',\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\n  GEO_BLOCKED: 'GEO_BLOCKED',\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\n};\nexport const vidsrcApi = {\n  // Simple streaming URL generation using vidsrc.net\n  getMovieStream: (tmdbId, options = {}) => {\n    const {\n      quality = 'auto',\n      autoplay = false,\n      muted = false,\n      color\n    } = options;\n    let url = `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n  // Simple TV streaming using vidsrc.net\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      quality = 'auto',\n      autoplay = false,\n      muted = false,\n      color\n    } = options;\n    let url = `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n    return {\n      url,\n      type: 'tv',\n      provider: 'vidsrc',\n      embeddable: true,\n      season,\n      episode,\n      quality\n    };\n  },\n  // Build a movie stream URL using IMDb ID on a specific domain\n  getMovieStreamByImdbFromDomain: (domain, imdbId, options = {}) => {\n    const {\n      quality = 'auto',\n      autoplay = false,\n      muted = false,\n      color\n    } = options;\n    let url = `${domain}/movie/${imdbId}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n  // Build a movie stream URL using IMDb ID on the primary domain\n  getMovieStreamByImdb: (imdbId, options = {}) => {\n    const {\n      quality = 'auto',\n      autoplay = false,\n      muted = false,\n      color\n    } = options;\n    let url = `${VIDSRC_DOMAINS.primary}/movie/${imdbId}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n  // Return all supported domains in priority order\n  getAllDomains: () => {\n    return [VIDSRC_DOMAINS.primary, ...VIDSRC_DOMAINS.fallbacks];\n  },\n  // Build a movie stream URL using a specific domain\n  getMovieStreamFromDomain: (domain, tmdbId, options = {}) => {\n    const {\n      quality = 'auto',\n      autoplay = false,\n      muted = false,\n      color\n    } = options;\n    let url = `${domain}/movie/${tmdbId}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n  // Build a TV stream URL using a specific domain\n  getTVStreamFromDomain: (domain, tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      quality = 'auto',\n      autoplay = false,\n      muted = false,\n      color\n    } = options;\n    let url = `${domain}/tv/${tmdbId}/${season}/${episode}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n    return {\n      url,\n      type: 'tv',\n      provider: 'vidsrc',\n      embeddable: true,\n      season,\n      episode,\n      quality\n    };\n  },\n  // Get error stream for failed requests\n  getErrorStream: (type, id, error, season = null, episode = null) => {\n    return {\n      url: '',\n      type,\n      provider: 'error',\n      embeddable: false,\n      error: error.message,\n      season,\n      episode\n    };\n  },\n  // Check if streaming is available for a movie\n  checkAvailability: async (tmdbId, type = 'movie') => {\n    try {\n      // VidSrc doesn't have a formal availability check API\n      // We assume content is available if it has a valid TMDB ID\n      return {\n        available: true,\n        provider: 'vidsrc',\n        embeddable: true,\n        message: 'Streaming available via VidSrc'\n      };\n    } catch (error) {\n      return {\n        available: false,\n        provider: 'vidsrc',\n        embeddable: false,\n        message: 'Streaming temporarily unavailable'\n      };\n    }\n  },\n  // Get streaming quality information\n  getQualityInfo: () => {\n    return {\n      default: '1080p',\n      available: ['720p', '1080p', '4K'],\n      note: 'Quality automatically adjusts based on connection speed'\n    };\n  },\n  // Get supported regions\n  getSupportedRegions: () => {\n    return {\n      regionsn      note: 'VidSrc works globally with no regional restrictions'\n    };\n  },\n  // Get available quality options\n  getQualityOptions: (contentType = 'movie') => {\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    if (contentType === 'movie') {\n      baseQualities.unshift(QualityOptions.Q4K);\n    }\n    return baseQualities;\n  },\n  // Create secure iframe embed\n  createSecureEmbed: (streamData, options = {}) => {\n    const {\n      width = '100%',\n      height = '500',\n      autoplay = false,\n      muted = false,\n      controls = true,\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\n    } = options;\n    const embedUrl = streamData.url;\n    return {\n      iframe: `<iframe\n        src=\"${embedUrl}\"\n        width=\"${width}\"\n        height=\"${height}\"\n        frameborder=\"0\"\n        allowfullscreen\n        ${autoplay ? 'autoplay' : ''}\n        ${muted ? 'muted' : ''}\n        ${controls ? '' : 'controls=\"false\"'}\n        sandbox=\"${sandbox}\"\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\n        referrerpolicy=\"strict-origin-when-cross-origin\"\n        loading=\"lazy\"\n      ></iframe>`,\n      url: embedUrl,\n      type: streamData.type,\n      provider: streamData.provider,\n      security: {\n        sandbox,\n        referrerPolicy: 'strict-origin-when-cross-origin',\n        cspCompliant: true\n      }\n    };\n  }\n};\n\n// Helper function to create iframe embed code\nexport const createEmbedCode = (streamData, options = {}) => {\n  const {\n    width = '100%',\n    height = '500',\n    autoplay = false,\n    muted = false,\n    controls = true\n  } = options;\n  const embedUrl = streamData.url;\n  return {\n    iframe: `<iframe\n      src=\"${embedUrl}\"\n      width=\"${width}\"\n      height=\"${height}\"\n      frameborder=\"0\"\n      allowfullscreen\n      ${autoplay ? 'autoplay' : ''}\n      ${muted ? 'muted' : ''}\n      ${controls ? '' : 'controls=\"false\"'}\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\n    ></iframe>`,\n    url: embedUrl,\n    type: streamData.type,\n    provider: streamData.provider\n  };\n};\n\n// Error handling for streaming\nexport const handleStreamError = (error, fallbackSources = []) => {\n  console.error('Streaming error:', error);\n  if (fallbackSources.length > 0) {\n    return {\n      success: false,\n      error: error.message,\n      fallback: fallbackSources[0],\n      hasFallback: true\n    };\n  }\n  return {\n    success: false,\n    error: error.message,\n    hasFallback: false\n  };\n};\nexport default vidsrcApi;","map":{"version":3,"names":["VIDSRC_DOMAINS","primary","fallbacks","QualityOptions","AUTO","Q4K","Q1080P","Q720P","Q480P","Q360P","StreamErrorTypes","NETWORK_ERROR","TIMEOUT_ERROR","PLAYER_ERROR","CONTENT_NOT_FOUND","GEO_BLOCKED","QUALITY_UNAVAILABLE","vidsrcApi","getMovieStream","tmdbId","options","quality","autoplay","muted","color","url","params","URLSearchParams","set","String","replace","qs","toString","type","provider","embeddable","getTVStream","season","episode","getMovieStreamByImdbFromDomain","domain","imdbId","getMovieStreamByImdb","getAllDomains","getMovieStreamFromDomain","getTVStreamFromDomain","getErrorStream","id","error","message","checkAvailability","available","getQualityInfo","default","note","getSupportedRegions","regions","getQualityOptions","contentType","baseQualities","unshift","createSecureEmbed","streamData","width","height","controls","sandbox","embedUrl","iframe","security","referrerPolicy","cspCompliant","createEmbedCode","handleStreamError","fallbackSources","console","length","success","fallback","hasFallback"],"sources":["C:/Users/VASU/Desktop/task/src/services/vidsrcApi.js"],"sourcesContent":["// VidSrc API service for streaming integration\n// No API key required - uses TMDB IDs directly\n\n// Simplified domain configuration - prioritize the most reliable domain first\nconst VIDSRC_DOMAINS = {\n  primary: 'https://vidsrc.to/embed',\n  fallbacks: [\n    'https://vidsrc.net/embed',\n    'https://vidsrc.cc/embed',\n    'https://vidsrc.me/embed'\n  ]\n};\n\n// Quality options for streaming\nconst QualityOptions = {\n  AUTO: 'auto',\n  Q4K: '4k',\n  Q1080P: '1080p',\n  Q720P: '720p',\n  Q480P: '480p',\n  Q360P: '360p'\n};\n\n// Error types for better error handling\nconst StreamErrorTypes = {\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  PLAYER_ERROR: 'PLAYER_ERROR',\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\n  GEO_BLOCKED: 'GEO_BLOCKED',\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\n};\n\nexport const vidsrcApi = {\n  // Simple streaming URL generation using vidsrc.net\n  getMovieStream: (tmdbId, options = {}) => {\n    const { quality = 'auto', autoplay = false, muted = false, color } = options;\n\n    let url = `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n\n  // Simple TV streaming using vidsrc.net\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\n    const { quality = 'auto', autoplay = false, muted = false, color } = options;\n\n    let url = `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n\n    return {\n      url,\n      type: 'tv',\n      provider: 'vidsrc',\n      embeddable: true,\n      season,\n      episode,\n      quality\n    };\n  },\n\n  // Build a movie stream URL using IMDb ID on a specific domain\n  getMovieStreamByImdbFromDomain: (domain, imdbId, options = {}) => {\n    const { quality = 'auto', autoplay = false, muted = false, color } = options;\n\n    let url = `${domain}/movie/${imdbId}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n\n  // Build a movie stream URL using IMDb ID on the primary domain\n  getMovieStreamByImdb: (imdbId, options = {}) => {\n    const { quality = 'auto', autoplay = false, muted = false, color } = options;\n\n    let url = `${VIDSRC_DOMAINS.primary}/movie/${imdbId}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n\n  // Return all supported domains in priority order\n  getAllDomains: () => {\n    return [VIDSRC_DOMAINS.primary, ...VIDSRC_DOMAINS.fallbacks];\n  },\n\n  // Build a movie stream URL using a specific domain\n  getMovieStreamFromDomain: (domain, tmdbId, options = {}) => {\n    const { quality = 'auto', autoplay = false, muted = false, color } = options;\n\n    let url = `${domain}/movie/${tmdbId}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n\n  // Build a TV stream URL using a specific domain\n  getTVStreamFromDomain: (domain, tmdbId, season = 1, episode = 1, options = {}) => {\n    const { quality = 'auto', autoplay = false, muted = false, color } = options;\n\n    let url = `${domain}/tv/${tmdbId}/${season}/${episode}`;\n    const params = new URLSearchParams();\n    if (quality !== 'auto') params.set('q', quality);\n    if (autoplay) params.set('autoplay', '1');\n    if (muted) params.set('muted', '1');\n    if (color) params.set('color', String(color).replace('#', ''));\n    const qs = params.toString();\n    if (qs) url += `?${qs}`;\n\n    return {\n      url,\n      type: 'tv',\n      provider: 'vidsrc',\n      embeddable: true,\n      season,\n      episode,\n      quality\n    };\n  },\n\n  // Get error stream for failed requests\n  getErrorStream: (type, id, error, season = null, episode = null) => {\n    return {\n      url: '',\n      type,\n      provider: 'error',\n      embeddable: false,\n      error: error.message,\n      season,\n      episode\n    };\n  },\n\n  // Check if streaming is available for a movie\n  checkAvailability: async (tmdbId, type = 'movie') => {\n    try {\n      // VidSrc doesn't have a formal availability check API\n      // We assume content is available if it has a valid TMDB ID\n      return {\n        available: true,\n        provider: 'vidsrc',\n        embeddable: true,\n        message: 'Streaming available via VidSrc'\n      };\n    } catch (error) {\n      return {\n        available: false,\n        provider: 'vidsrc',\n        embeddable: false,\n        message: 'Streaming temporarily unavailable'\n      };\n    }\n  },\n\n  // Get streaming quality information\n  getQualityInfo: () => {\n    return {\n      default: '1080p',\n      available: ['720p', '1080p', '4K'],\n      note: 'Quality automatically adjusts based on connection speed'\n    };\n  },\n\n  // Get supported regions\n  getSupportedRegions: () => {\n    return {\n      regionsn      note: 'VidSrc works globally with no regional restrictions'\n    };\n  },\n\n\n\n\n\n\n  // Get available quality options\n  getQualityOptions: (contentType = 'movie') => {\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n\n    if (contentType === 'movie') {\n      baseQualities.unshift(QualityOptions.Q4K);\n    }\n\n    return baseQualities;\n  },\n\n\n\n\n\n\n\n\n  // Create secure iframe embed\n  createSecureEmbed: (streamData, options = {}) => {\n    const {\n      width = '100%',\n      height = '500',\n      autoplay = false,\n      muted = false,\n      controls = true,\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\n    } = options;\n\n    const embedUrl = streamData.url;\n\n    return {\n      iframe: `<iframe\n        src=\"${embedUrl}\"\n        width=\"${width}\"\n        height=\"${height}\"\n        frameborder=\"0\"\n        allowfullscreen\n        ${autoplay ? 'autoplay' : ''}\n        ${muted ? 'muted' : ''}\n        ${controls ? '' : 'controls=\"false\"'}\n        sandbox=\"${sandbox}\"\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\n        referrerpolicy=\"strict-origin-when-cross-origin\"\n        loading=\"lazy\"\n      ></iframe>`,\n      url: embedUrl,\n      type: streamData.type,\n      provider: streamData.provider,\n      security: {\n        sandbox,\n        referrerPolicy: 'strict-origin-when-cross-origin',\n        cspCompliant: true\n      }\n    };\n  }\n};\n\n// Helper function to create iframe embed code\nexport const createEmbedCode = (streamData, options = {}) => {\n  const {\n    width = '100%',\n    height = '500',\n    autoplay = false,\n    muted = false,\n    controls = true\n  } = options;\n\n  const embedUrl = streamData.url;\n\n  return {\n    iframe: `<iframe\n      src=\"${embedUrl}\"\n      width=\"${width}\"\n      height=\"${height}\"\n      frameborder=\"0\"\n      allowfullscreen\n      ${autoplay ? 'autoplay' : ''}\n      ${muted ? 'muted' : ''}\n      ${controls ? '' : 'controls=\"false\"'}\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\n    ></iframe>`,\n    url: embedUrl,\n    type: streamData.type,\n    provider: streamData.provider\n  };\n};\n\n// Error handling for streaming\nexport const handleStreamError = (error, fallbackSources = []) => {\n  console.error('Streaming error:', error);\n\n  if (fallbackSources.length > 0) {\n    return {\n      success: false,\n      error: error.message,\n      fallback: fallbackSources[0],\n      hasFallback: true\n    };\n  }\n\n  return {\n    success: false,\n    error: error.message,\n    hasFallback: false\n  };\n};\n\nexport default vidsrcApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}