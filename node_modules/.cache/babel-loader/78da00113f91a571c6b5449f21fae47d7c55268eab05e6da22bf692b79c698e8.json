{"ast":null,"code":"// VidSrc API service for streaming integration\n// No API key required - uses TMDB IDs directly\n\n// Simplified domain configuration - vidsrc.net as primary source\nconst VIDSRC_DOMAINS = {\n  primary: 'https://vidsrc.net/embed',\n  fallbacks: ['https://vidsrc.to/embed', 'https://vidsrc.cc/embed']\n};\n\n// Quality options for streaming\nconst QualityOptions = {\n  AUTO: 'auto',\n  Q4K: '4k',\n  Q1080P: '1080p',\n  Q720P: '720p',\n  Q480P: '480p',\n  Q360P: '360p'\n};\n\n// Error types for better error handling\nconst StreamErrorTypes = {\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  PLAYER_ERROR: 'PLAYER_ERROR',\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\n  GEO_BLOCKED: 'GEO_BLOCKED',\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\n};\nexport const vidsrcApi = {\n  // Simple streaming URL generation using vidsrc.net\n  getMovieStream: (tmdbId, options = {}) => {\n    const {\n      quality = 'auto'\n    } = options;\n    const url = `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n    return {\n      url,\n      type: 'movie',\n      provider: 'vidsrc',\n      embeddable: true,\n      quality\n    };\n  },\n  // Simple TV streaming using vidsrc.net\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\n    const {\n      quality = 'auto'\n    } = options;\n    const url = `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\n    return {\n      url,\n      type: 'tv',\n      provider: 'vidsrc',\n      embeddable: true,\n      season,\n      episode,\n      quality\n    };\n  },\n  // Get error stream for failed requests\n  getErrorStream: (type, id, error, season = null, episode = null) => {\n    return {\n      url: '',\n      type,\n      provider: 'error',\n      embeddable: false,\n      error: error.message,\n      season,\n      episode\n    };\n  },\n  // Check if streaming is available for a movie\n  checkAvailability: async (tmdbId, type = 'movie') => {\n    try {\n      // VidSrc doesn't have a formal availability check API\n      // We assume content is available if it has a valid TMDB ID\n      return {\n        available: true,\n        provider: 'vidsrc',\n        embeddable: true,\n        message: 'Streaming available via VidSrc'\n      };\n    } catch (error) {\n      return {\n        available: false,\n        provider: 'vidsrc',\n        embeddable: false,\n        message: 'Streaming temporarily unavailable'\n      };\n    }\n  },\n  // Get streaming quality information\n  getQualityInfo: () => {\n    return {\n      default: '1080p',\n      available: ['720p', '1080p', '4K'],\n      note: 'Quality automatically adjusts based on connection speed'\n    };\n  },\n  // Get supported regions\n  getSupportedRegions: () => {\n    return {\n      regionsn      note: 'VidSrc works globally with no regional restrictions'\n    };\n  },\n  // Enhanced error handling with recovery\n  handleStreamError: async (error, context) => {\n    performanceMonitor.trackError(error);\n    try {\n      const recoveredUrl = await errorRecoveryManager.recover(error, context);\n      fallbackManager.recordSuccess();\n      return {\n        success: true,\n        url: recoveredUrl,\n        recovered: true\n      };\n    } catch (recoveryError) {\n      fallbackManager.recordFailure();\n      return {\n        success: false,\n        error: recoveryError.message,\n        fallbackExhausted: true\n      };\n    }\n  },\n  // Get available quality options\n  getQualityOptions: (contentType = 'movie') => {\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\n    if (contentType === 'movie') {\n      baseQualities.unshift(QualityOptions.Q4K);\n    }\n    return baseQualities;\n  },\n  // Get performance metrics\n  getPerformanceReport: () => {\n    return performanceMonitor.generateReport();\n  },\n  // Manual source verification as backup when automatic testing fails\n  verifySourceManually: async (url, timeout = 10000) => {\n    console.log(`🔍 [Manual] Starting manual verification for: ${url}`);\n    return new Promise(resolve => {\n      const iframe = document.createElement('iframe');\n      iframe.src = url;\n      iframe.style.display = 'none';\n      iframe.sandbox = 'allow-same-origin allow-scripts allow-presentation';\n      const startTime = Date.now();\n      let hasLoaded = false;\n      let hasError = false;\n      const cleanup = () => {\n        if (iframe.parentNode) {\n          iframe.parentNode.removeChild(iframe);\n        }\n        clearTimeout(timeoutId);\n      };\n      const timeoutId = setTimeout(() => {\n        if (!hasLoaded && !hasError) {\n          console.log(`⏱️ [Manual] Manual verification timeout for: ${url}`);\n          cleanup();\n          resolve({\n            available: false,\n            error: 'Manual verification timeout',\n            errorType: 'TIMEOUT_ERROR',\n            method: 'manual-iframe',\n            loadTime: Date.now() - startTime\n          });\n        }\n      }, timeout);\n      iframe.onload = () => {\n        hasLoaded = true;\n        const loadTime = Date.now() - startTime;\n        console.log(`✅ [Manual] Manual verification success for: ${url} (${loadTime}ms)`);\n\n        // Additional check: try to access iframe content\n        try {\n          const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n          const hasVideoElement = iframeDoc.querySelector('video') !== null;\n          const hasPlayerContainer = iframeDoc.querySelector('.player, #player, [class*=\"player\"]') !== null;\n          const isErrorPage = iframeDoc.body && iframeDoc.body.textContent.includes('not found');\n          if (isErrorPage) {\n            cleanup();\n            resolve({\n              available: false,\n              error: 'Video not found (detected error page)',\n              errorType: 'CONTENT_NOT_FOUND',\n              method: 'manual-iframe',\n              loadTime,\n              hasVideoElement,\n              hasPlayerContainer\n            });\n          } else if (hasVideoElement || hasPlayerContainer) {\n            cleanup();\n            resolve({\n              available: true,\n              loadTime,\n              method: 'manual-iframe',\n              hasVideoElement,\n              hasPlayerContainer\n            });\n          } else {\n            // Give it a bit more time to load video content\n            setTimeout(() => {\n              try {\n                const finalDoc = iframe.contentDocument || iframe.contentWindow.document;\n                const finalVideoElement = finalDoc.querySelector('video') !== null;\n                const finalPlayerContainer = finalDoc.querySelector('.player, #player, [class*=\"player\"]') !== null;\n                cleanup();\n                resolve({\n                  available: finalVideoElement || finalPlayerContainer,\n                  loadTime: Date.now() - startTime,\n                  method: 'manual-iframe',\n                  hasVideoElement: finalVideoElement,\n                  hasPlayerContainer: finalPlayerContainer\n                });\n              } catch (e) {\n                cleanup();\n                resolve({\n                  available: true,\n                  // Assume it's working if we can't check content\n                  loadTime: Date.now() - startTime,\n                  method: 'manual-iframe',\n                  note: 'Could not verify content due to CORS, assuming available'\n                });\n              }\n            }, 2000);\n          }\n        } catch (e) {\n          // CORS restriction - assume it's working if it loaded\n          cleanup();\n          resolve({\n            available: true,\n            loadTime,\n            method: 'manual-iframe',\n            note: 'Could not verify content due to CORS, assuming available'\n          });\n        }\n      };\n      iframe.onerror = () => {\n        hasError = true;\n        const loadTime = Date.now() - startTime;\n        console.log(`❌ [Manual] Manual verification failed for: ${url} (${loadTime}ms)`);\n        cleanup();\n        resolve({\n          available: false,\n          error: 'Failed to load iframe',\n          errorType: 'NETWORK_ERROR',\n          method: 'manual-iframe',\n          loadTime\n        });\n      };\n      document.body.appendChild(iframe);\n    });\n  },\n  // Create secure iframe embed\n  createSecureEmbed: (streamData, options = {}) => {\n    const {\n      width = '100%',\n      height = '500',\n      autoplay = false,\n      muted = false,\n      controls = true,\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\n    } = options;\n    const embedUrl = streamData.url;\n    return {\n      iframe: `<iframe\n        src=\"${embedUrl}\"\n        width=\"${width}\"\n        height=\"${height}\"\n        frameborder=\"0\"\n        allowfullscreen\n        ${autoplay ? 'autoplay' : ''}\n        ${muted ? 'muted' : ''}\n        ${controls ? '' : 'controls=\"false\"'}\n        sandbox=\"${sandbox}\"\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\n        referrerpolicy=\"strict-origin-when-cross-origin\"\n        loading=\"lazy\"\n      ></iframe>`,\n      url: embedUrl,\n      type: streamData.type,\n      provider: streamData.provider,\n      security: {\n        sandbox,\n        referrerPolicy: 'strict-origin-when-cross-origin',\n        cspCompliant: true\n      }\n    };\n  }\n};\n\n// Helper function to create iframe embed code\nexport const createEmbedCode = (streamData, options = {}) => {\n  const {\n    width = '100%',\n    height = '500',\n    autoplay = false,\n    muted = false,\n    controls = true\n  } = options;\n  const embedUrl = streamData.url;\n  return {\n    iframe: `<iframe\n      src=\"${embedUrl}\"\n      width=\"${width}\"\n      height=\"${height}\"\n      frameborder=\"0\"\n      allowfullscreen\n      ${autoplay ? 'autoplay' : ''}\n      ${muted ? 'muted' : ''}\n      ${controls ? '' : 'controls=\"false\"'}\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\n    ></iframe>`,\n    url: embedUrl,\n    type: streamData.type,\n    provider: streamData.provider\n  };\n};\n\n// Error handling for streaming\nexport const handleStreamError = (error, fallbackSources = []) => {\n  console.error('Streaming error:', error);\n  if (fallbackSources.length > 0) {\n    return {\n      success: false,\n      error: error.message,\n      fallback: fallbackSources[0],\n      hasFallback: true\n    };\n  }\n  return {\n    success: false,\n    error: error.message,\n    hasFallback: false\n  };\n};\nexport default vidsrcApi;\n\n// Test function to verify video streaming functionality\nexport const testVideoStreaming = async () => {\n  console.log('🧪 Testing Video Streaming Functionality...');\n\n  // Test data - specific movies mentioned by user\n  const testMovies = [{\n    id: '278',\n    name: 'Shawshank Redemption'\n  }, {\n    id: '155',\n    name: 'The Dark Knight'\n  }, {\n    id: '550',\n    name: 'Fight Club'\n  }];\n  const testTVId = '1399'; // Game of Thrones\n\n  try {\n    // Test 1: Get movie sources for each test movie\n    console.log('\\n📽️ Testing Movie Sources...');\n    for (const movie of testMovies) {\n      const movieSources = vidsrcApi.getMovieSources(movie.id, {\n        includeAlternatives: true\n      });\n      console.log(`Found ${movieSources.length} sources for ${movie.name} (${movie.id})`);\n    }\n\n    // Test 2: Get TV sources\n    console.log('\\n📺 Testing TV Sources...');\n    const tvSources = vidsrcApi.getTVSources(testTVId, 1, 1, {\n      includeAlternatives: true\n    });\n    console.log(`Found ${tvSources.length} TV sources`);\n\n    // Test 3: Test specific movies for availability\n    console.log('\\n🔍 Testing Specific Movie Availability...');\n    for (const movie of testMovies) {\n      console.log(`\\n--- Testing ${movie.name} (${movie.id}) ---`);\n\n      // Test the primary source\n      const primaryStream = vidsrcApi.getMovieStream(movie.id, {\n        quality: '1080p'\n      });\n      console.log(`Primary URL: ${primaryStream.url}`);\n      try {\n        const result = await vidsrcApi.testStream(primaryStream.url, 5000);\n        console.log(`✅ Primary: ${result.available ? 'Available' : 'Failed'} (${result.loadTime}ms)`);\n        if (result.available) {\n          console.log(`🎉 SUCCESS: ${movie.name} is working!`);\n        } else {\n          console.log(`❌ Primary failed, trying alternatives...`);\n\n          // Try alternative sources\n          const altUrls = vidsrcApi.tryAlternativeUrls(movie.id, 'movie');\n          console.log(`Found ${altUrls.length} alternative URLs`);\n          for (let i = 0; i < Math.min(3, altUrls.length); i++) {\n            try {\n              const altResult = await vidsrcApi.testStream(altUrls[i], 3000);\n              console.log(`  Alt ${i + 1}: ${altResult.available ? 'Available' : 'Failed'} (${altResult.loadTime}ms)`);\n              if (altResult.available) {\n                console.log(`  🎉 Alternative ${i + 1} works!`);\n                break;\n              }\n            } catch (altError) {\n              console.log(`  Alt ${i + 1}: Error - ${altError.message}`);\n            }\n          }\n        }\n      } catch (error) {\n        console.log(`❌ Error testing ${movie.name}: ${error.message}`);\n      }\n    }\n\n    // Test 4: Test fallback system\n    console.log('\\n🔄 Testing Fallback System...');\n    const fallbackStatus = vidsrcApi.getFallbackStatus();\n    console.log('Fallback Status:', fallbackStatus);\n    console.log('\\n✅ Video streaming test completed!');\n    return {\n      success: true,\n      testedMovies: testMovies.length,\n      tvSources: tvSources.length\n    };\n  } catch (error) {\n    console.error('❌ Video streaming test failed:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["VIDSRC_DOMAINS","primary","fallbacks","QualityOptions","AUTO","Q4K","Q1080P","Q720P","Q480P","Q360P","StreamErrorTypes","NETWORK_ERROR","TIMEOUT_ERROR","PLAYER_ERROR","CONTENT_NOT_FOUND","GEO_BLOCKED","QUALITY_UNAVAILABLE","vidsrcApi","getMovieStream","tmdbId","options","quality","url","type","provider","embeddable","getTVStream","season","episode","getErrorStream","id","error","message","checkAvailability","available","getQualityInfo","default","note","getSupportedRegions","regions","handleStreamError","context","performanceMonitor","trackError","recoveredUrl","errorRecoveryManager","recover","fallbackManager","recordSuccess","success","recovered","recoveryError","recordFailure","fallbackExhausted","getQualityOptions","contentType","baseQualities","unshift","getPerformanceReport","generateReport","verifySourceManually","timeout","console","log","Promise","resolve","iframe","document","createElement","src","style","display","sandbox","startTime","Date","now","hasLoaded","hasError","cleanup","parentNode","removeChild","clearTimeout","timeoutId","setTimeout","errorType","method","loadTime","onload","iframeDoc","contentDocument","contentWindow","hasVideoElement","querySelector","hasPlayerContainer","isErrorPage","body","textContent","includes","finalDoc","finalVideoElement","finalPlayerContainer","e","onerror","appendChild","createSecureEmbed","streamData","width","height","autoplay","muted","controls","embedUrl","security","referrerPolicy","cspCompliant","createEmbedCode","fallbackSources","length","fallback","hasFallback","testVideoStreaming","testMovies","name","testTVId","movie","movieSources","getMovieSources","includeAlternatives","tvSources","getTVSources","primaryStream","result","testStream","altUrls","tryAlternativeUrls","i","Math","min","altResult","altError","fallbackStatus","getFallbackStatus","testedMovies"],"sources":["c:/Users/VASU/Desktop/task/src/services/vidsrcApi.js"],"sourcesContent":["// VidSrc API service for streaming integration\r\n// No API key required - uses TMDB IDs directly\r\n\r\n// Simplified domain configuration - vidsrc.net as primary source\r\nconst VIDSRC_DOMAINS = {\r\n  primary: 'https://vidsrc.net/embed',\r\n  fallbacks: [\r\n    'https://vidsrc.to/embed',\r\n    'https://vidsrc.cc/embed'\r\n  ]\r\n};\r\n\r\n// Quality options for streaming\r\nconst QualityOptions = {\r\n  AUTO: 'auto',\r\n  Q4K: '4k',\r\n  Q1080P: '1080p',\r\n  Q720P: '720p',\r\n  Q480P: '480p',\r\n  Q360P: '360p'\r\n};\r\n\r\n// Error types for better error handling\r\nconst StreamErrorTypes = {\r\n  NETWORK_ERROR: 'NETWORK_ERROR',\r\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\r\n  PLAYER_ERROR: 'PLAYER_ERROR',\r\n  CONTENT_NOT_FOUND: 'CONTENT_NOT_FOUND',\r\n  GEO_BLOCKED: 'GEO_BLOCKED',\r\n  QUALITY_UNAVAILABLE: 'QUALITY_UNAVAILABLE'\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const vidsrcApi = {\r\n  // Simple streaming URL generation using vidsrc.net\r\n  getMovieStream: (tmdbId, options = {}) => {\r\n    const { quality = 'auto' } = options;\r\n\r\n    const url = `${VIDSRC_DOMAINS.primary}/movie/${tmdbId}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n    return {\r\n      url,\r\n      type: 'movie',\r\n      provider: 'vidsrc',\r\n      embeddable: true,\r\n      quality\r\n    };\r\n  },\r\n\r\n  // Simple TV streaming using vidsrc.net\r\n  getTVStream: (tmdbId, season = 1, episode = 1, options = {}) => {\r\n    const { quality = 'auto' } = options;\r\n\r\n    const url = `${VIDSRC_DOMAINS.primary}/tv/${tmdbId}/${season}/${episode}${quality !== 'auto' ? `?q=${quality}` : ''}`;\r\n\r\n    return {\r\n      url,\r\n      type: 'tv',\r\n      provider: 'vidsrc',\r\n      embeddable: true,\r\n      season,\r\n      episode,\r\n      quality\r\n    };\r\n  },\r\n\r\n  // Get error stream for failed requests\r\n  getErrorStream: (type, id, error, season = null, episode = null) => {\r\n    return {\r\n      url: '',\r\n      type,\r\n      provider: 'error',\r\n      embeddable: false,\r\n      error: error.message,\r\n      season,\r\n      episode\r\n    };\r\n  },\r\n\r\n\r\n\r\n\r\n  // Check if streaming is available for a movie\r\n  checkAvailability: async (tmdbId, type = 'movie') => {\r\n    try {\r\n      // VidSrc doesn't have a formal availability check API\r\n      // We assume content is available if it has a valid TMDB ID\r\n      return {\r\n        available: true,\r\n        provider: 'vidsrc',\r\n        embeddable: true,\r\n        message: 'Streaming available via VidSrc'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        available: false,\r\n        provider: 'vidsrc',\r\n        embeddable: false,\r\n        message: 'Streaming temporarily unavailable'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get streaming quality information\r\n  getQualityInfo: () => {\r\n    return {\r\n      default: '1080p',\r\n      available: ['720p', '1080p', '4K'],\r\n      note: 'Quality automatically adjusts based on connection speed'\r\n    };\r\n  },\r\n\r\n  // Get supported regions\r\n  getSupportedRegions: () => {\r\n    return {\r\n      regionsr\n      note: 'VidSrc works globally with no regional restrictions'\r\n    };\r\n  },\r\n\r\n  // Enhanced error handling with recovery\r\n  handleStreamError: async (error, context) => {\r\n    performanceMonitor.trackError(error);\r\n\r\n    try {\r\n      const recoveredUrl = await errorRecoveryManager.recover(error, context);\r\n      fallbackManager.recordSuccess();\r\n      return {\r\n        success: true,\r\n        url: recoveredUrl,\r\n        recovered: true\r\n      };\r\n    } catch (recoveryError) {\r\n      fallbackManager.recordFailure();\r\n      return {\r\n        success: false,\r\n        error: recoveryError.message,\r\n        fallbackExhausted: true\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get available quality options\r\n  getQualityOptions: (contentType = 'movie') => {\r\n    const baseQualities = [QualityOptions.Q1080P, QualityOptions.Q720P, QualityOptions.Q480P];\r\n\r\n    if (contentType === 'movie') {\r\n      baseQualities.unshift(QualityOptions.Q4K);\r\n    }\r\n\r\n    return baseQualities;\r\n  },\r\n\r\n\r\n  // Get performance metrics\r\n  getPerformanceReport: () => {\r\n    return performanceMonitor.generateReport();\r\n  },\r\n\r\n\r\n\r\n\r\n\r\n  // Manual source verification as backup when automatic testing fails\r\n  verifySourceManually: async (url, timeout = 10000) => {\r\n    console.log(`🔍 [Manual] Starting manual verification for: ${url}`);\r\n\r\n    return new Promise((resolve) => {\r\n      const iframe = document.createElement('iframe');\r\n      iframe.src = url;\r\n      iframe.style.display = 'none';\r\n      iframe.sandbox = 'allow-same-origin allow-scripts allow-presentation';\r\n\r\n      const startTime = Date.now();\r\n      let hasLoaded = false;\r\n      let hasError = false;\r\n\r\n      const cleanup = () => {\r\n        if (iframe.parentNode) {\r\n          iframe.parentNode.removeChild(iframe);\r\n        }\r\n        clearTimeout(timeoutId);\r\n      };\r\n\r\n      const timeoutId = setTimeout(() => {\r\n        if (!hasLoaded && !hasError) {\r\n          console.log(`⏱️ [Manual] Manual verification timeout for: ${url}`);\r\n          cleanup();\r\n          resolve({\r\n            available: false,\r\n            error: 'Manual verification timeout',\r\n            errorType: 'TIMEOUT_ERROR',\r\n            method: 'manual-iframe',\r\n            loadTime: Date.now() - startTime\r\n          });\r\n        }\r\n      }, timeout);\r\n\r\n      iframe.onload = () => {\r\n        hasLoaded = true;\r\n        const loadTime = Date.now() - startTime;\r\n        console.log(`✅ [Manual] Manual verification success for: ${url} (${loadTime}ms)`);\r\n\r\n        // Additional check: try to access iframe content\r\n        try {\r\n          const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\r\n          const hasVideoElement = iframeDoc.querySelector('video') !== null;\r\n          const hasPlayerContainer = iframeDoc.querySelector('.player, #player, [class*=\"player\"]') !== null;\r\n          const isErrorPage = iframeDoc.body && iframeDoc.body.textContent.includes('not found');\r\n\r\n          if (isErrorPage) {\r\n            cleanup();\r\n            resolve({\r\n              available: false,\r\n              error: 'Video not found (detected error page)',\r\n              errorType: 'CONTENT_NOT_FOUND',\r\n              method: 'manual-iframe',\r\n              loadTime,\r\n              hasVideoElement,\r\n              hasPlayerContainer\r\n            });\r\n          } else if (hasVideoElement || hasPlayerContainer) {\r\n            cleanup();\r\n            resolve({\r\n              available: true,\r\n              loadTime,\r\n              method: 'manual-iframe',\r\n              hasVideoElement,\r\n              hasPlayerContainer\r\n            });\r\n          } else {\r\n            // Give it a bit more time to load video content\r\n            setTimeout(() => {\r\n              try {\r\n                const finalDoc = iframe.contentDocument || iframe.contentWindow.document;\r\n                const finalVideoElement = finalDoc.querySelector('video') !== null;\r\n                const finalPlayerContainer = finalDoc.querySelector('.player, #player, [class*=\"player\"]') !== null;\r\n\r\n                cleanup();\r\n                resolve({\r\n                  available: finalVideoElement || finalPlayerContainer,\r\n                  loadTime: Date.now() - startTime,\r\n                  method: 'manual-iframe',\r\n                  hasVideoElement: finalVideoElement,\r\n                  hasPlayerContainer: finalPlayerContainer\r\n                });\r\n              } catch (e) {\r\n                cleanup();\r\n                resolve({\r\n                  available: true, // Assume it's working if we can't check content\r\n                  loadTime: Date.now() - startTime,\r\n                  method: 'manual-iframe',\r\n                  note: 'Could not verify content due to CORS, assuming available'\r\n                });\r\n              }\r\n            }, 2000);\r\n          }\r\n        } catch (e) {\r\n          // CORS restriction - assume it's working if it loaded\r\n          cleanup();\r\n          resolve({\r\n            available: true,\r\n            loadTime,\r\n            method: 'manual-iframe',\r\n            note: 'Could not verify content due to CORS, assuming available'\r\n          });\r\n        }\r\n      };\r\n\r\n      iframe.onerror = () => {\r\n        hasError = true;\r\n        const loadTime = Date.now() - startTime;\r\n        console.log(`❌ [Manual] Manual verification failed for: ${url} (${loadTime}ms)`);\r\n        cleanup();\r\n        resolve({\r\n          available: false,\r\n          error: 'Failed to load iframe',\r\n          errorType: 'NETWORK_ERROR',\r\n          method: 'manual-iframe',\r\n          loadTime\r\n        });\r\n      };\r\n\r\n      document.body.appendChild(iframe);\r\n    });\r\n  },\r\n\r\n  // Create secure iframe embed\r\n  createSecureEmbed: (streamData, options = {}) => {\r\n    const {\r\n      width = '100%',\r\n      height = '500',\r\n      autoplay = false,\r\n      muted = false,\r\n      controls = true,\r\n      sandbox = 'allow-same-origin allow-scripts allow-presentation'\r\n    } = options;\r\n\r\n    const embedUrl = streamData.url;\r\n\r\n    return {\r\n      iframe: `<iframe\r\n        src=\"${embedUrl}\"\r\n        width=\"${width}\"\r\n        height=\"${height}\"\r\n        frameborder=\"0\"\r\n        allowfullscreen\r\n        ${autoplay ? 'autoplay' : ''}\r\n        ${muted ? 'muted' : ''}\r\n        ${controls ? '' : 'controls=\"false\"'}\r\n        sandbox=\"${sandbox}\"\r\n        allow=\"autoplay; encrypted-media; fullscreen; picture-in-picture\"\r\n        referrerpolicy=\"strict-origin-when-cross-origin\"\r\n        loading=\"lazy\"\r\n      ></iframe>`,\r\n      url: embedUrl,\r\n      type: streamData.type,\r\n      provider: streamData.provider,\r\n      security: {\r\n        sandbox,\r\n        referrerPolicy: 'strict-origin-when-cross-origin',\r\n        cspCompliant: true\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to create iframe embed code\r\nexport const createEmbedCode = (streamData, options = {}) => {\r\n  const {\r\n    width = '100%',\r\n    height = '500',\r\n    autoplay = false,\r\n    muted = false,\r\n    controls = true\r\n  } = options;\r\n\r\n  const embedUrl = streamData.url;\r\n\r\n  return {\r\n    iframe: `<iframe\r\n      src=\"${embedUrl}\"\r\n      width=\"${width}\"\r\n      height=\"${height}\"\r\n      frameborder=\"0\"\r\n      allowfullscreen\r\n      ${autoplay ? 'autoplay' : ''}\r\n      ${muted ? 'muted' : ''}\r\n      ${controls ? '' : 'controls=\"false\"'}\r\n      sandbox=\"allow-same-origin allow-scripts allow-presentation\"\r\n    ></iframe>`,\r\n    url: embedUrl,\r\n    type: streamData.type,\r\n    provider: streamData.provider\r\n  };\r\n};\r\n\r\n// Error handling for streaming\r\nexport const handleStreamError = (error, fallbackSources = []) => {\r\n  console.error('Streaming error:', error);\r\n\r\n  if (fallbackSources.length > 0) {\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      fallback: fallbackSources[0],\r\n      hasFallback: true\r\n    };\r\n  }\r\n\r\n  return {\r\n    success: false,\r\n    error: error.message,\r\n    hasFallback: false\r\n  };\r\n};\r\n\r\nexport default vidsrcApi;\r\n\r\n// Test function to verify video streaming functionality\r\nexport const testVideoStreaming = async () => {\r\n  console.log('🧪 Testing Video Streaming Functionality...');\r\n\r\n  // Test data - specific movies mentioned by user\r\n  const testMovies = [\r\n    { id: '278', name: 'Shawshank Redemption' },\r\n    { id: '155', name: 'The Dark Knight' },\r\n    { id: '550', name: 'Fight Club' }\r\n  ];\r\n  const testTVId = '1399'; // Game of Thrones\r\n\r\n  try {\r\n    // Test 1: Get movie sources for each test movie\r\n    console.log('\\n📽️ Testing Movie Sources...');\r\n    for (const movie of testMovies) {\r\n      const movieSources = vidsrcApi.getMovieSources(movie.id, { includeAlternatives: true });\r\n      console.log(`Found ${movieSources.length} sources for ${movie.name} (${movie.id})`);\r\n    }\r\n\r\n    // Test 2: Get TV sources\r\n    console.log('\\n📺 Testing TV Sources...');\r\n    const tvSources = vidsrcApi.getTVSources(testTVId, 1, 1, { includeAlternatives: true });\r\n    console.log(`Found ${tvSources.length} TV sources`);\r\n\r\n    // Test 3: Test specific movies for availability\r\n    console.log('\\n🔍 Testing Specific Movie Availability...');\r\n    for (const movie of testMovies) {\r\n      console.log(`\\n--- Testing ${movie.name} (${movie.id}) ---`);\r\n\r\n      // Test the primary source\r\n      const primaryStream = vidsrcApi.getMovieStream(movie.id, { quality: '1080p' });\r\n      console.log(`Primary URL: ${primaryStream.url}`);\r\n\r\n      try {\r\n        const result = await vidsrcApi.testStream(primaryStream.url, 5000);\r\n        console.log(`✅ Primary: ${result.available ? 'Available' : 'Failed'} (${result.loadTime}ms)`);\r\n\r\n        if (result.available) {\r\n          console.log(`🎉 SUCCESS: ${movie.name} is working!`);\r\n        } else {\r\n          console.log(`❌ Primary failed, trying alternatives...`);\r\n\r\n          // Try alternative sources\r\n          const altUrls = vidsrcApi.tryAlternativeUrls(movie.id, 'movie');\r\n          console.log(`Found ${altUrls.length} alternative URLs`);\r\n\r\n          for (let i = 0; i < Math.min(3, altUrls.length); i++) {\r\n            try {\r\n              const altResult = await vidsrcApi.testStream(altUrls[i], 3000);\r\n              console.log(`  Alt ${i + 1}: ${altResult.available ? 'Available' : 'Failed'} (${altResult.loadTime}ms)`);\r\n              if (altResult.available) {\r\n                console.log(`  🎉 Alternative ${i + 1} works!`);\r\n                break;\r\n              }\r\n            } catch (altError) {\r\n              console.log(`  Alt ${i + 1}: Error - ${altError.message}`);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(`❌ Error testing ${movie.name}: ${error.message}`);\r\n      }\r\n    }\r\n\r\n    // Test 4: Test fallback system\r\n    console.log('\\n🔄 Testing Fallback System...');\r\n    const fallbackStatus = vidsrcApi.getFallbackStatus();\r\n    console.log('Fallback Status:', fallbackStatus);\r\n\r\n    console.log('\\n✅ Video streaming test completed!');\r\n    return {\r\n      success: true,\r\n      testedMovies: testMovies.length,\r\n      tvSources: tvSources.length\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('❌ Video streaming test failed:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}