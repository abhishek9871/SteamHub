{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VASU\\\\Desktop\\\\task\\\\src\\\\context\\\\SettingsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsContext = /*#__PURE__*/createContext();\nconst settingsReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_SETTINGS':\n      const newSettings = {\n        ...state,\n        ...action.payload\n      };\n      localStorage.setItem('appSettings', JSON.stringify(newSettings));\n      return newSettings;\n    case 'LOAD_SETTINGS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\nconst defaultSettings = {\n  theme: 'dark',\n  region: 'IN',\n  contentRating: 'all',\n  autoplay: false,\n  subtitles: true\n};\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s();\n  const [settings, dispatch] = useReducer(settingsReducer, defaultSettings);\n  useEffect(() => {\n    const savedSettings = localStorage.getItem('appSettings');\n    if (savedSettings) {\n      dispatch({\n        type: 'LOAD_SETTINGS',\n        payload: JSON.parse(savedSettings)\n      });\n    }\n  }, []);\n  const updateSettings = newSettings => {\n    dispatch({\n      type: 'UPDATE_SETTINGS',\n      payload: newSettings\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      settings,\n      updateSettings\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(SettingsProvider, \"Jov2IkECLG57oLxz1R/xmy2953g=\");\n_c = SettingsProvider;\nexport const useSettings = () => {\n  _s2();\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n_s2(useSettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","SettingsContext","settingsReducer","state","action","type","newSettings","payload","localStorage","setItem","JSON","stringify","defaultSettings","theme","region","contentRating","autoplay","subtitles","SettingsProvider","children","_s","settings","dispatch","savedSettings","getItem","parse","updateSettings","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSettings","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/VASU/Desktop/task/src/context/SettingsContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\nconst SettingsContext = createContext();\r\n\r\nconst settingsReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'UPDATE_SETTINGS':\r\n      const newSettings = { ...state, ...action.payload };\r\n      localStorage.setItem('appSettings', JSON.stringify(newSettings));\r\n      return newSettings;\r\n    case 'LOAD_SETTINGS':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst defaultSettings = {\r\n  theme: 'dark',\r\n  region: 'IN',\r\n  contentRating: 'all',\r\n  autoplay: false,\r\n  subtitles: true\r\n};\r\n\r\nexport const SettingsProvider = ({ children }) => {\r\n  const [settings, dispatch] = useReducer(settingsReducer, defaultSettings);\r\n\r\n  useEffect(() => {\r\n    const savedSettings = localStorage.getItem('appSettings');\r\n    if (savedSettings) {\r\n      dispatch({ type: 'LOAD_SETTINGS', payload: JSON.parse(savedSettings) });\r\n    }\r\n  }, []);\r\n\r\n  const updateSettings = (newSettings) => {\r\n    dispatch({ type: 'UPDATE_SETTINGS', payload: newSettings });\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider value={{\r\n      settings,\r\n      updateSettings\r\n    }}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSettings = () => {\r\n  const context = useContext(SettingsContext);\r\n  if (!context) {\r\n    throw new Error('useSettings must be used within a SettingsProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhF,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC;AAEvC,MAAMO,eAAe,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACzC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,iBAAiB;MACpB,MAAMC,WAAW,GAAG;QAAE,GAAGH,KAAK;QAAE,GAAGC,MAAM,CAACG;MAAQ,CAAC;MACnDC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC;MAChE,OAAOA,WAAW;IACpB,KAAK,eAAe;MAClB,OAAOF,MAAM,CAACG,OAAO;IACvB;MACE,OAAOJ,KAAK;EAChB;AACF,CAAC;AAED,MAAMS,eAAe,GAAG;EACtBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE,IAAI;EACZC,aAAa,EAAE,KAAK;EACpBC,QAAQ,EAAE,KAAK;EACfC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,QAAQ,EAAEC,QAAQ,CAAC,GAAGzB,UAAU,CAACK,eAAe,EAAEU,eAAe,CAAC;EAEzEd,SAAS,CAAC,MAAM;IACd,MAAMyB,aAAa,GAAGf,YAAY,CAACgB,OAAO,CAAC,aAAa,CAAC;IACzD,IAAID,aAAa,EAAE;MACjBD,QAAQ,CAAC;QAAEjB,IAAI,EAAE,eAAe;QAAEE,OAAO,EAAEG,IAAI,CAACe,KAAK,CAACF,aAAa;MAAE,CAAC,CAAC;IACzE;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,cAAc,GAAIpB,WAAW,IAAK;IACtCgB,QAAQ,CAAC;MAAEjB,IAAI,EAAE,iBAAiB;MAAEE,OAAO,EAAED;IAAY,CAAC,CAAC;EAC7D,CAAC;EAED,oBACEN,OAAA,CAACC,eAAe,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAC/BP,QAAQ;MACRK;IACF,CAAE;IAAAP,QAAA,EACCA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACZ,EAAA,CAtBWF,gBAAgB;AAAAe,EAAA,GAAhBf,gBAAgB;AAwB7B,OAAO,MAAMgB,WAAW,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/B,MAAMC,OAAO,GAAGxC,UAAU,CAACK,eAAe,CAAC;EAC3C,IAAI,CAACmC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}